
questao4-i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005868  08005868  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005868  08005868  00006868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005870  08005870  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005878  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000064  080058dc  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  080058dc  000076bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001057f  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fa  00000000  00000000  00017613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00019810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cad  00000000  00000000  0001a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002285b  00000000  00000000  0001b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014288  00000000  00000000  0003dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d358c  00000000  00000000  00051fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012552c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  00125570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00129f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005068 	.word	0x08005068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08005068 	.word	0x08005068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_I2C1_Init_100>:
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void MX_I2C1_Init_100(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005a6:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <MX_I2C1_Init_100+0x54>)
 80005a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <MX_I2C1_Init_100+0x58>)
 80005ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_I2C1_Init_100+0x50>)
 80005de:	f001 f9a5 	bl	800192c <HAL_I2C_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init_100+0x4c>
  {
    Error_Handler();
 80005e8:	f000 fba2 	bl	8000d30 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000080 	.word	0x20000080
 80005f4:	40005400 	.word	0x40005400
 80005f8:	000186a0 	.word	0x000186a0

080005fc <scan_i2c>:

void scan_i2c(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0d0      	sub	sp, #320	@ 0x140
 8000600:	af00      	add	r7, sp, #0
	uint8_t buffer[25] = {0};
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	751a      	strb	r2, [r3, #20]
	uint8_t addr100 [128] = {0};
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000620:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000624:	227c      	movs	r2, #124	@ 0x7c
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 f89d 	bl	8004768 <memset>
	uint8_t addr400 [128] = {0};
 800062e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000632:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	3304      	adds	r3, #4
 800063c:	227c      	movs	r2, #124	@ 0x7c
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f891 	bl	8004768 <memset>

	uint16_t cont400 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t cont = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t cont100 = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
	//HAL_UART_Transmit(&huart2, "Scan 400kHz: ", 13, 10000);
	for(int i=1; i<128; i++)
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800065e:	e020      	b.n	80006a2 <scan_i2c+0xa6>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 8000660:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000664:	b29b      	uxth	r3, r3
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b299      	uxth	r1, r3
 800066a:	2305      	movs	r3, #5
 800066c:	2203      	movs	r2, #3
 800066e:	48b2      	ldr	r0, [pc, #712]	@ (8000938 <scan_i2c+0x33c>)
 8000670:	f001 fbce 	bl	8001e10 <HAL_I2C_IsDeviceReady>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d10e      	bne.n	8000698 <scan_i2c+0x9c>
		{
			addr400[cont400] = i;
 800067a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800067e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000688:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800068c:	54d1      	strb	r1, [r2, r3]
			cont400++;
 800068e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	for(int i=1; i<128; i++)
 8000698:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800069c:	3301      	adds	r3, #1
 800069e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80006a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80006a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80006a8:	ddda      	ble.n	8000660 <scan_i2c+0x64>
		}
	}

	HAL_I2C_DeInit(&hi2c1);
 80006aa:	48a3      	ldr	r0, [pc, #652]	@ (8000938 <scan_i2c+0x33c>)
 80006ac:	f001 fa82 	bl	8001bb4 <HAL_I2C_DeInit>
	MX_I2C1_Init_100();
 80006b0:	f7ff ff76 	bl	80005a0 <MX_I2C1_Init_100>

	//HAL_UART_Transmit(&huart2, "\nScan 100kHz: ", 14, 10000);
	for(int i=1; i<128; i++)
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80006ba:	e020      	b.n	80006fe <scan_i2c+0x102>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 80006bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	b299      	uxth	r1, r3
 80006c6:	2305      	movs	r3, #5
 80006c8:	2203      	movs	r2, #3
 80006ca:	489b      	ldr	r0, [pc, #620]	@ (8000938 <scan_i2c+0x33c>)
 80006cc:	f001 fba0 	bl	8001e10 <HAL_I2C_IsDeviceReady>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10e      	bne.n	80006f4 <scan_i2c+0xf8>
		{
			addr100[cont100] = i;
 80006d6:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80006da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80006e4:	443b      	add	r3, r7
 80006e6:	f803 2cbc 	strb.w	r2, [r3, #-188]
			cont100++;
 80006ea:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80006ee:	3301      	adds	r3, #1
 80006f0:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
	for(int i=1; i<128; i++)
 80006f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80006f8:	3301      	adds	r3, #1
 80006fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80006fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000702:	2b7f      	cmp	r3, #127	@ 0x7f
 8000704:	ddda      	ble.n	80006bc <scan_i2c+0xc0>
		}
	}

	//HAL_UART_Transmit(&huart2, "\n\n", 2, 10000);
	MX_I2C1_Init();
 8000706:	f000 f9ab 	bl	8000a60 <MX_I2C1_Init>

			//sprintf(buffer, "0x%X, ", i);
	SSD1306_Clear(); //Seta todos os pixels do buffer para branco
 800070a:	f003 ff6a 	bl	80045e2 <SSD1306_Clear>
	SSD1306_GotoXY (0,0); //Posiciona o "cursor" no pixel 20x20
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f003 fead 	bl	8004470 <SSD1306_GotoXY>
	SSD1306_Puts ("400: " , &Font_7x10, 1); //Escreve o texto no buffer
 8000716:	2201      	movs	r2, #1
 8000718:	4988      	ldr	r1, [pc, #544]	@ (800093c <scan_i2c+0x340>)
 800071a:	4889      	ldr	r0, [pc, #548]	@ (8000940 <scan_i2c+0x344>)
 800071c:	f003 ff3c 	bl	8004598 <SSD1306_Puts>
	cont = cont400;
 8000720:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8000724:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	for (int i = 0; i < 3; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800072e:	e02b      	b.n	8000788 <scan_i2c+0x18c>
		if(cont > 0) {
 8000730:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000734:	2b00      	cmp	r3, #0
 8000736:	d022      	beq.n	800077e <scan_i2c+0x182>
			cont--;
 8000738:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800073c:	3b01      	subs	r3, #1
 800073e:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

			sprintf(buffer, "0x%x", addr400[cont]);
 8000742:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000746:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800074a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800074e:	5cd3      	ldrb	r3, [r2, r3]
 8000750:	461a      	mov	r2, r3
 8000752:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000756:	497b      	ldr	r1, [pc, #492]	@ (8000944 <scan_i2c+0x348>)
 8000758:	4618      	mov	r0, r3
 800075a:	f003 ffe5 	bl	8004728 <siprintf>
			SSD1306_Puts (buffer , &Font_7x10, 1); //Escreve o texto no buffer
 800075e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000762:	2201      	movs	r2, #1
 8000764:	4975      	ldr	r1, [pc, #468]	@ (800093c <scan_i2c+0x340>)
 8000766:	4618      	mov	r0, r3
 8000768:	f003 ff16 	bl	8004598 <SSD1306_Puts>
			if (cont > 0) {
 800076c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <scan_i2c+0x182>
				SSD1306_Puts(", " , &Font_7x10, 1); //Escreve o texto no buffer
 8000774:	2201      	movs	r2, #1
 8000776:	4971      	ldr	r1, [pc, #452]	@ (800093c <scan_i2c+0x340>)
 8000778:	4873      	ldr	r0, [pc, #460]	@ (8000948 <scan_i2c+0x34c>)
 800077a:	f003 ff0d 	bl	8004598 <SSD1306_Puts>
	for (int i = 0; i < 3; i++) {
 800077e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000782:	3301      	adds	r3, #1
 8000784:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000788:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800078c:	2b02      	cmp	r3, #2
 800078e:	ddcf      	ble.n	8000730 <scan_i2c+0x134>
			}
		}
	}
	SSD1306_GotoXY (0, 11); //Posiciona o "cursor" no pixel 20x20
 8000790:	210b      	movs	r1, #11
 8000792:	2000      	movs	r0, #0
 8000794:	f003 fe6c 	bl	8004470 <SSD1306_GotoXY>
	if (cont > 0) {
 8000798:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800079c:	2b00      	cmp	r3, #0
 800079e:	d033      	beq.n	8000808 <scan_i2c+0x20c>
		for (int i = 0; i < 21; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80007a6:	e02b      	b.n	8000800 <scan_i2c+0x204>
			if(cont > 0) {
 80007a8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d022      	beq.n	80007f6 <scan_i2c+0x1fa>
				cont--;
 80007b0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80007b4:	3b01      	subs	r3, #1
 80007b6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
				sprintf(buffer, "0x%x", addr400[cont]);
 80007ba:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80007be:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80007c2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	461a      	mov	r2, r3
 80007ca:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80007ce:	495d      	ldr	r1, [pc, #372]	@ (8000944 <scan_i2c+0x348>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 ffa9 	bl	8004728 <siprintf>
				SSD1306_Puts (buffer , &Font_7x10, 1); //Escreve o texto no buffer
 80007d6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80007da:	2201      	movs	r2, #1
 80007dc:	4957      	ldr	r1, [pc, #348]	@ (800093c <scan_i2c+0x340>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 feda 	bl	8004598 <SSD1306_Puts>
				if (cont > 0) {
 80007e4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <scan_i2c+0x1fa>
					SSD1306_Puts(", " , &Font_7x10, 1); //Escreve o texto no buffer
 80007ec:	2201      	movs	r2, #1
 80007ee:	4953      	ldr	r1, [pc, #332]	@ (800093c <scan_i2c+0x340>)
 80007f0:	4855      	ldr	r0, [pc, #340]	@ (8000948 <scan_i2c+0x34c>)
 80007f2:	f003 fed1 	bl	8004598 <SSD1306_Puts>
		for (int i = 0; i < 21; i++) {
 80007f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007fa:	3301      	adds	r3, #1
 80007fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000804:	2b14      	cmp	r3, #20
 8000806:	ddcf      	ble.n	80007a8 <scan_i2c+0x1ac>
				}
			}
		}
	}

	cont = cont100;
 8000808:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800080c:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	SSD1306_GotoXY (0, 22); //Posiciona o "cursor" no pixel 20x20
 8000810:	2116      	movs	r1, #22
 8000812:	2000      	movs	r0, #0
 8000814:	f003 fe2c 	bl	8004470 <SSD1306_GotoXY>
	SSD1306_Puts ("100: " , &Font_7x10, 1); //Escreve o texto no buffer
 8000818:	2201      	movs	r2, #1
 800081a:	4948      	ldr	r1, [pc, #288]	@ (800093c <scan_i2c+0x340>)
 800081c:	484b      	ldr	r0, [pc, #300]	@ (800094c <scan_i2c+0x350>)
 800081e:	f003 febb 	bl	8004598 <SSD1306_Puts>
	for (int i = 0; i < 3; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000828:	e02b      	b.n	8000882 <scan_i2c+0x286>
		if(cont > 0) {
 800082a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800082e:	2b00      	cmp	r3, #0
 8000830:	d022      	beq.n	8000878 <scan_i2c+0x27c>
			cont--;
 8000832:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000836:	3b01      	subs	r3, #1
 8000838:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

			sprintf(buffer, "0x%x", addr100[cont]);
 800083c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000840:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8000844:	443b      	add	r3, r7
 8000846:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 800084a:	461a      	mov	r2, r3
 800084c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000850:	493c      	ldr	r1, [pc, #240]	@ (8000944 <scan_i2c+0x348>)
 8000852:	4618      	mov	r0, r3
 8000854:	f003 ff68 	bl	8004728 <siprintf>
			SSD1306_Puts (buffer , &Font_7x10, 1); //Escreve o texto no buffer
 8000858:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800085c:	2201      	movs	r2, #1
 800085e:	4937      	ldr	r1, [pc, #220]	@ (800093c <scan_i2c+0x340>)
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fe99 	bl	8004598 <SSD1306_Puts>
			if (cont > 0) {
 8000866:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <scan_i2c+0x27c>
				SSD1306_Puts(", " , &Font_7x10, 1); //Escreve o texto no buffer
 800086e:	2201      	movs	r2, #1
 8000870:	4932      	ldr	r1, [pc, #200]	@ (800093c <scan_i2c+0x340>)
 8000872:	4835      	ldr	r0, [pc, #212]	@ (8000948 <scan_i2c+0x34c>)
 8000874:	f003 fe90 	bl	8004598 <SSD1306_Puts>
	for (int i = 0; i < 3; i++) {
 8000878:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800087c:	3301      	adds	r3, #1
 800087e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000882:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000886:	2b02      	cmp	r3, #2
 8000888:	ddcf      	ble.n	800082a <scan_i2c+0x22e>
			}
		}
	}
	SSD1306_GotoXY (0, 33); //Posiciona o "cursor" no pixel 20x20
 800088a:	2121      	movs	r1, #33	@ 0x21
 800088c:	2000      	movs	r0, #0
 800088e:	f003 fdef 	bl	8004470 <SSD1306_GotoXY>
	if (cont > 0) {
 8000892:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8000896:	2b00      	cmp	r3, #0
 8000898:	d033      	beq.n	8000902 <scan_i2c+0x306>
		for (int i = 0; i < 21; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80008a0:	e02b      	b.n	80008fa <scan_i2c+0x2fe>
			if(cont > 0) {
 80008a2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d022      	beq.n	80008f0 <scan_i2c+0x2f4>
				cont--;
 80008aa:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
				sprintf(buffer, "0x%x", addr100[cont]);
 80008b4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80008b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80008bc:	443b      	add	r3, r7
 80008be:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80008c8:	491e      	ldr	r1, [pc, #120]	@ (8000944 <scan_i2c+0x348>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 ff2c 	bl	8004728 <siprintf>
				SSD1306_Puts (buffer , &Font_7x10, 1); //Escreve o texto no buffer
 80008d0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80008d4:	2201      	movs	r2, #1
 80008d6:	4919      	ldr	r1, [pc, #100]	@ (800093c <scan_i2c+0x340>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fe5d 	bl	8004598 <SSD1306_Puts>
				if (cont > 0) {
 80008de:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <scan_i2c+0x2f4>
					SSD1306_Puts(", " , &Font_7x10, 1); //Escreve o texto no buffer
 80008e6:	2201      	movs	r2, #1
 80008e8:	4914      	ldr	r1, [pc, #80]	@ (800093c <scan_i2c+0x340>)
 80008ea:	4817      	ldr	r0, [pc, #92]	@ (8000948 <scan_i2c+0x34c>)
 80008ec:	f003 fe54 	bl	8004598 <SSD1306_Puts>
		for (int i = 0; i < 21; i++) {
 80008f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008f4:	3301      	adds	r3, #1
 80008f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80008fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008fe:	2b14      	cmp	r3, #20
 8000900:	ddcf      	ble.n	80008a2 <scan_i2c+0x2a6>
				}
			}
		}
	}
	SSD1306_GotoXY (0, 44); //Posiciona o "cursor" no pixel 20x20
 8000902:	212c      	movs	r1, #44	@ 0x2c
 8000904:	2000      	movs	r0, #0
 8000906:	f003 fdb3 	bl	8004470 <SSD1306_GotoXY>
	sprintf(buffer, "qtd 400:%d | 100:%d", cont400, cont100);
 800090a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 800090e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8000912:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8000916:	490e      	ldr	r1, [pc, #56]	@ (8000950 <scan_i2c+0x354>)
 8000918:	f003 ff06 	bl	8004728 <siprintf>
	SSD1306_Puts (buffer, &Font_7x10, 1); //Escreve o texto no buffer
 800091c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000920:	2201      	movs	r2, #1
 8000922:	4906      	ldr	r1, [pc, #24]	@ (800093c <scan_i2c+0x340>)
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fe37 	bl	8004598 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //Flush do buffer para a tela
 800092a:	f003 fcfb 	bl	8004324 <SSD1306_UpdateScreen>
}
 800092e:	bf00      	nop
 8000930:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000080 	.word	0x20000080
 800093c:	2000000c 	.word	0x2000000c
 8000940:	08005080 	.word	0x08005080
 8000944:	08005088 	.word	0x08005088
 8000948:	08005090 	.word	0x08005090
 800094c:	08005094 	.word	0x08005094
 8000950:	0800509c 	.word	0x0800509c

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fbca 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f812 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f978 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000964:	f000 f94c 	bl	8000c00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000968:	f000 f87a 	bl	8000a60 <MX_I2C1_Init>
  MX_TIM1_Init();
 800096c:	f000 f8a6 	bl	8000abc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8000970:	f003 fc14 	bl	800419c <SSD1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(5000);
 8000974:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000978:	f000 fc2c 	bl	80011d4 <HAL_Delay>
	  scan_i2c();
 800097c:	f7ff fe3e 	bl	80005fc <scan_i2c>
	  HAL_Delay(5000);
 8000980:	bf00      	nop
 8000982:	e7f7      	b.n	8000974 <main+0x20>

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2234      	movs	r2, #52	@ 0x34
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fee8 	bl	8004768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a29      	ldr	r2, [pc, #164]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009d0:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009f8:	2310      	movs	r3, #16
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 f8d0 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a1e:	f000 f987 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fd70 	bl	8002524 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a4a:	f000 f971 	bl	8000d30 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	@ 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f000 ff45 	bl	800192c <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f942 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000080 	.word	0x20000080
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	00061a80 	.word	0x00061a80

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	@ 0x58
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2220      	movs	r2, #32
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fe37 	bl	8004768 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afa:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000afc:	4a3f      	ldr	r2, [pc, #252]	@ (8000bfc <MX_TIM1_Init+0x140>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000b00:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b02:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b10:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b28:	4833      	ldr	r0, [pc, #204]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b2a:	f002 fae3 	bl	80030f4 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 f8fc 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b42:	4619      	mov	r1, r3
 8000b44:	482c      	ldr	r0, [pc, #176]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b46:	f002 fbd9 	bl	80032fc <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 f8ee 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b54:	4828      	ldr	r0, [pc, #160]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b56:	f002 fb1c 	bl	8003192 <HAL_TIM_OC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b60:	f000 f8e6 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b70:	4619      	mov	r1, r3
 8000b72:	4821      	ldr	r0, [pc, #132]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000b74:	f002 ff80 	bl	8003a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b7e:	f000 f8d7 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4814      	ldr	r0, [pc, #80]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000ba8:	f002 fb4c 	bl	8003244 <HAL_TIM_OC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000bb2:	f000 f8bd 	bl	8000d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000bda:	f002 ffc9 	bl	8003b70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000be4:	f000 f8a4 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <MX_TIM1_Init+0x13c>)
 8000bea:	f000 f95d 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000bee:	bf00      	nop
 8000bf0:	3758      	adds	r7, #88	@ 0x58
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000d4 	.word	0x200000d4
 8000bfc:	40010000 	.word	0x40010000

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f002 ffec 	bl	8003c14 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f875 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000011c 	.word	0x2000011c
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a2c      	ldr	r2, [pc, #176]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a25      	ldr	r2, [pc, #148]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b23      	ldr	r3, [pc, #140]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <MX_GPIO_Init+0xd4>)
 8000ce0:	f000 fe0a 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <MX_GPIO_Init+0xd8>)
 8000cfc:	f000 fb74 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d00:	2320      	movs	r3, #32
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <MX_GPIO_Init+0xd4>)
 8000d18:	f000 fb66 	bl	80013e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	@ 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020800 	.word	0x40020800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 fb00 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <HAL_I2C_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <HAL_I2C_MspInit+0x8c>)
 8000de8:	f000 fafe 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400

08000e1c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_I2C_MspDeInit+0x3c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10f      	bne.n	8000e4e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_I2C_MspDeInit+0x40>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_I2C_MspDeInit+0x40>)
 8000e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000e3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e3e:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <HAL_I2C_MspDeInit+0x44>)
 8000e40:	f000 fc66 	bl	8001710 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_I2C_MspDeInit+0x44>)
 8000e4a:	f000 fc61 	bl	8001710 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <HAL_TIM_MspPostInit+0x68>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11e      	bne.n	8000f08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000f04:	f000 fa70 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40010000 	.word	0x40010000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <HAL_UART_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_UART_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f76:	230c      	movs	r3, #12
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f86:	2307      	movs	r3, #7
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <HAL_UART_MspInit+0x8c>)
 8000f92:	f000 fa29 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 f8c7 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f003 fb9c 	bl	8004778 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20020000 	.word	0x20020000
 800106c:	00000400 	.word	0x00000400
 8001070:	20000164 	.word	0x20000164
 8001074:	200006c0 	.word	0x200006c0

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f003 fb5b 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fc41 	bl	8000954 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010e0:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 80010e4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010e8:	200006bc 	.word	0x200006bc

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f931 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fe0a 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f93b 	bl	80013ce <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f911 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000168 	.word	0x20000168

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000168 	.word	0x20000168

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff47 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff5c 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffb0 	bl	800133c <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e165      	b.n	80016d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 8154 	bne.w	80016ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80ae 	beq.w	80016ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b5d      	ldr	r3, [pc, #372]	@ (80016e8 <HAL_GPIO_Init+0x300>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a5c      	ldr	r2, [pc, #368]	@ (80016e8 <HAL_GPIO_Init+0x300>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b5a      	ldr	r3, [pc, #360]	@ (80016e8 <HAL_GPIO_Init+0x300>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a58      	ldr	r2, [pc, #352]	@ (80016ec <HAL_GPIO_Init+0x304>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4f      	ldr	r2, [pc, #316]	@ (80016f0 <HAL_GPIO_Init+0x308>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4e      	ldr	r2, [pc, #312]	@ (80016f4 <HAL_GPIO_Init+0x30c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4d      	ldr	r2, [pc, #308]	@ (80016f8 <HAL_GPIO_Init+0x310>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	@ (80016fc <HAL_GPIO_Init+0x314>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001700 <HAL_GPIO_Init+0x318>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x20a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_GPIO_Init+0x31c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x206>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <HAL_GPIO_Init+0x320>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x202>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x21c>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	@ (80016ec <HAL_GPIO_Init+0x304>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001622:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <HAL_GPIO_Init+0x324>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001646:	4a31      	ldr	r2, [pc, #196]	@ (800170c <HAL_GPIO_Init+0x324>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800164c:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_GPIO_Init+0x324>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001670:	4a26      	ldr	r2, [pc, #152]	@ (800170c <HAL_GPIO_Init+0x324>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_GPIO_Init+0x324>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800169a:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_GPIO_Init+0x324>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <HAL_GPIO_Init+0x324>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c4:	4a11      	ldr	r2, [pc, #68]	@ (800170c <HAL_GPIO_Init+0x324>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f ae96 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	@ 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e0c7      	b.n	80018bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	429a      	cmp	r2, r3
 8001744:	f040 80b7 	bne.w	80018b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001748:	4a62      	ldr	r2, [pc, #392]	@ (80018d4 <HAL_GPIO_DeInit+0x1c4>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	4013      	ands	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a5a      	ldr	r2, [pc, #360]	@ (80018d8 <HAL_GPIO_DeInit+0x1c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d025      	beq.n	80017be <HAL_GPIO_DeInit+0xae>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a59      	ldr	r2, [pc, #356]	@ (80018dc <HAL_GPIO_DeInit+0x1cc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_DeInit+0xaa>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_GPIO_DeInit+0x1d0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_DeInit+0xa6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a57      	ldr	r2, [pc, #348]	@ (80018e4 <HAL_GPIO_DeInit+0x1d4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_DeInit+0xa2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a56      	ldr	r2, [pc, #344]	@ (80018e8 <HAL_GPIO_DeInit+0x1d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_DeInit+0x9e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a55      	ldr	r2, [pc, #340]	@ (80018ec <HAL_GPIO_DeInit+0x1dc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_DeInit+0x9a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a54      	ldr	r2, [pc, #336]	@ (80018f0 <HAL_GPIO_DeInit+0x1e0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_DeInit+0x96>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_DeInit+0xb0>
 80017be:	2300      	movs	r3, #0
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d132      	bne.n	8001836 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017d0:	4b48      	ldr	r3, [pc, #288]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4946      	ldr	r1, [pc, #280]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017da:	4013      	ands	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4943      	ldr	r1, [pc, #268]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017ec:	4b41      	ldr	r3, [pc, #260]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	493f      	ldr	r1, [pc, #252]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017fa:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	493c      	ldr	r1, [pc, #240]	@ (80018f4 <HAL_GPIO_DeInit+0x1e4>)
 8001804:	4013      	ands	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001818:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <HAL_GPIO_DeInit+0x1c4>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	43da      	mvns	r2, r3
 8001828:	482a      	ldr	r0, [pc, #168]	@ (80018d4 <HAL_GPIO_DeInit+0x1c4>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	400a      	ands	r2, r1
 8001830:	3302      	adds	r3, #2
 8001832:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2103      	movs	r1, #3
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	08d2      	lsrs	r2, r2, #3
 800186c:	4019      	ands	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2103      	movs	r1, #3
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b0f      	cmp	r3, #15
 80018c0:	f67f af34 	bls.w	800172c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40013800 	.word	0x40013800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40021400 	.word	0x40021400
 80018f0:	40021800 	.word	0x40021800
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e12b      	b.n	8001b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fa1a 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2224      	movs	r2, #36	@ 0x24
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800198e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001990:	f000 feba 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a81      	ldr	r2, [pc, #516]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d807      	bhi.n	80019b0 <HAL_I2C_Init+0x84>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a80      	ldr	r2, [pc, #512]	@ (8001ba4 <HAL_I2C_Init+0x278>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	e006      	b.n	80019be <HAL_I2C_Init+0x92>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba8 <HAL_I2C_Init+0x27c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0e7      	b.n	8001b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a78      	ldr	r2, [pc, #480]	@ (8001bac <HAL_I2C_Init+0x280>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d802      	bhi.n	8001a00 <HAL_I2C_Init+0xd4>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3301      	adds	r3, #1
 80019fe:	e009      	b.n	8001a14 <HAL_I2C_Init+0xe8>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_I2C_Init+0x284>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	3301      	adds	r3, #1
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	495c      	ldr	r1, [pc, #368]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 8001a30:	428b      	cmp	r3, r1
 8001a32:	d819      	bhi.n	8001a68 <HAL_I2C_Init+0x13c>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e59      	subs	r1, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a42:	1c59      	adds	r1, r3, #1
 8001a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00a      	beq.n	8001a64 <HAL_I2C_Init+0x138>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1e59      	subs	r1, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a62:	e051      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e04f      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d111      	bne.n	8001a94 <HAL_I2C_Init+0x168>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e58      	subs	r0, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	440b      	add	r3, r1
 8001a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e012      	b.n	8001aba <HAL_I2C_Init+0x18e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	0099      	lsls	r1, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Init+0x196>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e022      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_I2C_Init+0x1bc>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1e58      	subs	r0, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae6:	e00f      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	0099      	lsls	r1, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6809      	ldr	r1, [r1, #0]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6911      	ldr	r1, [r2, #16]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68d2      	ldr	r2, [r2, #12]
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	000186a0 	.word	0x000186a0
 8001ba4:	001e847f 	.word	0x001e847f
 8001ba8:	003d08ff 	.word	0x003d08ff
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	10624dd3 	.word	0x10624dd3

08001bb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e021      	b.n	8001c0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	@ 0x24
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff f91c 	bl	8000e1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fac8 	bl	80011bc <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	f040 80e0 	bne.w	8001dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2319      	movs	r3, #25
 8001c42:	2201      	movs	r2, #1
 8001c44:	4970      	ldr	r1, [pc, #448]	@ (8001e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa92 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0d3      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x50>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0cc      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d007      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2221      	movs	r2, #33	@ 0x21
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f9ca 	bl	800206c <I2C_MasterRequestWrite>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e08d      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf8:	e066      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fb50 	bl	80023a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d017      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fb47 	bl	8002434 <I2C_WaitOnBTFFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e01a      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d194      	bne.n	8001cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff f9cc 	bl	80011bc <HAL_GetTick>
 8001e24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 8111 	bne.w	800205a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4988      	ldr	r1, [pc, #544]	@ (8002064 <HAL_I2C_IsDeviceReady+0x254>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f994 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e104      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_IsDeviceReady+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0fd      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2224      	movs	r2, #36	@ 0x24
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a70      	ldr	r2, [pc, #448]	@ (8002068 <HAL_I2C_IsDeviceReady+0x258>)
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f952 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee0:	d103      	bne.n	8001eea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e0b6      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001efc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f95d 	bl	80011bc <HAL_GetTick>
 8001f02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f32:	e025      	b.n	8001f80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f34:	f7ff f942 	bl	80011bc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d302      	bcc.n	8001f4a <HAL_I2C_IsDeviceReady+0x13a>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22a0      	movs	r2, #160	@ 0xa0
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f8a:	d005      	beq.n	8001f98 <HAL_I2C_IsDeviceReady+0x188>
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_I2C_IsDeviceReady+0x188>
 8001f92:	7dbb      	ldrb	r3, [r7, #22]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0cd      	beq.n	8001f34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d129      	bne.n	8002002 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2319      	movs	r3, #25
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4921      	ldr	r1, [pc, #132]	@ (8002064 <HAL_I2C_IsDeviceReady+0x254>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f8c6 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e036      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e02c      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002010:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800201a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2319      	movs	r3, #25
 8002022:	2201      	movs	r2, #1
 8002024:	490f      	ldr	r1, [pc, #60]	@ (8002064 <HAL_I2C_IsDeviceReady+0x254>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f8a2 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e012      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3301      	adds	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	f4ff af32 	bcc.w	8001eaa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00100002 	.word	0x00100002
 8002068:	ffff0000 	.word	0xffff0000

0800206c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	460b      	mov	r3, r1
 800207a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d006      	beq.n	8002096 <I2C_MasterRequestWrite+0x2a>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d003      	beq.n	8002096 <I2C_MasterRequestWrite+0x2a>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002094:	d108      	bne.n	80020a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00b      	b.n	80020c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	d107      	bne.n	80020c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f84f 	bl	8002170 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e6:	d103      	bne.n	80020f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e035      	b.n	8002160 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020fc:	d108      	bne.n	8002110 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	e01b      	b.n	8002148 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	11db      	asrs	r3, r3, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0306 	and.w	r3, r3, #6
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f063 030f 	orn	r3, r3, #15
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	490e      	ldr	r1, [pc, #56]	@ (8002168 <I2C_MasterRequestWrite+0xfc>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f898 	bl	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e010      	b.n	8002160 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <I2C_MasterRequestWrite+0x100>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f888 	bl	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	00010008 	.word	0x00010008
 800216c:	00010002 	.word	0x00010002

08002170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002180:	e048      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d044      	beq.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f817 	bl	80011bc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d139      	bne.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10d      	bne.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	e00c      	b.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d116      	bne.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e023      	b.n	800225c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10d      	bne.n	800223a <I2C_WaitOnFlagUntilTimeout+0xca>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	43da      	mvns	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	e00c      	b.n	8002254 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	429a      	cmp	r2, r3
 8002258:	d093      	beq.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002272:	e071      	b.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002282:	d123      	bne.n	80022cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800229c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e067      	b.n	800239c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d041      	beq.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe ff72 	bl	80011bc <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d136      	bne.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10c      	bne.n	800230e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4013      	ands	r3, r2
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	e00b      	b.n	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	43da      	mvns	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4013      	ands	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e021      	b.n	800239c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10c      	bne.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e00b      	b.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f47f af6d 	bne.w	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023b0:	e034      	b.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f886 	bl	80024c4 <I2C_IsAcknowledgeFailed>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e034      	b.n	800242c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d028      	beq.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7fe fef7 	bl	80011bc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11d      	bne.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ea:	2b80      	cmp	r3, #128	@ 0x80
 80023ec:	d016      	beq.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e007      	b.n	800242c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002426:	2b80      	cmp	r3, #128	@ 0x80
 8002428:	d1c3      	bne.n	80023b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002440:	e034      	b.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f83e 	bl	80024c4 <I2C_IsAcknowledgeFailed>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e034      	b.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d028      	beq.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7fe feaf 	bl	80011bc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11d      	bne.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d016      	beq.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d1c3      	bne.n	8002442 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d11b      	bne.n	8002514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cc      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b68      	ldr	r3, [pc, #416]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d90c      	bls.n	8002560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b65      	ldr	r3, [pc, #404]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d044      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e067      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4934      	ldr	r1, [pc, #208]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7fe fdd2 	bl	80011bc <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fdce 	bl	80011bc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d20c      	bcs.n	800266c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f855 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd32 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	080050b0 	.word	0x080050b0
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff0 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a9b      	lsrs	r3, r3, #10
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	@ (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	080050c0 	.word	0x080050c0

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffdc 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0b5b      	lsrs	r3, r3, #13
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	080050c0 	.word	0x080050c0

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b0ae      	sub	sp, #184	@ 0xb8
 800275e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277e:	4bcb      	ldr	r3, [pc, #812]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b0c      	cmp	r3, #12
 8002788:	f200 8206 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x440>
 800278c:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <HAL_RCC_GetSysClockFreq+0x3c>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027c9 	.word	0x080027c9
 8002798:	08002b99 	.word	0x08002b99
 800279c:	08002b99 	.word	0x08002b99
 80027a0:	08002b99 	.word	0x08002b99
 80027a4:	080027d1 	.word	0x080027d1
 80027a8:	08002b99 	.word	0x08002b99
 80027ac:	08002b99 	.word	0x08002b99
 80027b0:	08002b99 	.word	0x08002b99
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	08002b99 	.word	0x08002b99
 80027bc:	08002b99 	.word	0x08002b99
 80027c0:	08002b99 	.word	0x08002b99
 80027c4:	080029c9 	.word	0x080029c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x358>)
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ce:	e1e7      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027d6:	e1e3      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	4bb4      	ldr	r3, [pc, #720]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e4:	4bb1      	ldr	r3, [pc, #708]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d071      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4bae      	ldr	r3, [pc, #696]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002808:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002816:	4622      	mov	r2, r4
 8002818:	462b      	mov	r3, r5
 800281a:	f04f 0000 	mov.w	r0, #0
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	0159      	lsls	r1, r3, #5
 8002824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002828:	0150      	lsls	r0, r2, #5
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4621      	mov	r1, r4
 8002830:	1a51      	subs	r1, r2, r1
 8002832:	6439      	str	r1, [r7, #64]	@ 0x40
 8002834:	4629      	mov	r1, r5
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	647b      	str	r3, [r7, #68]	@ 0x44
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002848:	4649      	mov	r1, r9
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	4641      	mov	r1, r8
 800284e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002852:	4641      	mov	r1, r8
 8002854:	018a      	lsls	r2, r1, #6
 8002856:	4641      	mov	r1, r8
 8002858:	1a51      	subs	r1, r2, r1
 800285a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800285c:	4649      	mov	r1, r9
 800285e:	eb63 0301 	sbc.w	r3, r3, r1
 8002862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002870:	4649      	mov	r1, r9
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4641      	mov	r1, r8
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4641      	mov	r1, r8
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4622      	mov	r2, r4
 8002886:	189b      	adds	r3, r3, r2
 8002888:	633b      	str	r3, [r7, #48]	@ 0x30
 800288a:	462b      	mov	r3, r5
 800288c:	460a      	mov	r2, r1
 800288e:	eb42 0303 	adc.w	r3, r2, r3
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028a0:	4629      	mov	r1, r5
 80028a2:	024b      	lsls	r3, r1, #9
 80028a4:	4621      	mov	r1, r4
 80028a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028aa:	4621      	mov	r1, r4
 80028ac:	024a      	lsls	r2, r1, #9
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028c4:	f7fd fcf4 	bl	80002b0 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028d2:	e067      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d4:	4b75      	ldr	r3, [pc, #468]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028ee:	2300      	movs	r3, #0
 80028f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80028f6:	4622      	mov	r2, r4
 80028f8:	462b      	mov	r3, r5
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	0159      	lsls	r1, r3, #5
 8002904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002908:	0150      	lsls	r0, r2, #5
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4621      	mov	r1, r4
 8002910:	1a51      	subs	r1, r2, r1
 8002912:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002914:	4629      	mov	r1, r5
 8002916:	eb63 0301 	sbc.w	r3, r3, r1
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002928:	4649      	mov	r1, r9
 800292a:	018b      	lsls	r3, r1, #6
 800292c:	4641      	mov	r1, r8
 800292e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002932:	4641      	mov	r1, r8
 8002934:	018a      	lsls	r2, r1, #6
 8002936:	4641      	mov	r1, r8
 8002938:	ebb2 0a01 	subs.w	sl, r2, r1
 800293c:	4649      	mov	r1, r9
 800293e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800294e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002956:	4692      	mov	sl, r2
 8002958:	469b      	mov	fp, r3
 800295a:	4623      	mov	r3, r4
 800295c:	eb1a 0303 	adds.w	r3, sl, r3
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	462b      	mov	r3, r5
 8002964:	eb4b 0303 	adc.w	r3, fp, r3
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002976:	4629      	mov	r1, r5
 8002978:	028b      	lsls	r3, r1, #10
 800297a:	4621      	mov	r1, r4
 800297c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002980:	4621      	mov	r1, r4
 8002982:	028a      	lsls	r2, r1, #10
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298c:	2200      	movs	r2, #0
 800298e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002990:	677a      	str	r2, [r7, #116]	@ 0x74
 8002992:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002996:	f7fd fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4613      	mov	r3, r2
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029a4:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029c6:	e0eb      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c8:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d4:	4b35      	ldr	r3, [pc, #212]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d06b      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e0:	4b32      	ldr	r3, [pc, #200]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x354>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	2200      	movs	r2, #0
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029f4:	2300      	movs	r3, #0
 80029f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029fc:	4622      	mov	r2, r4
 80029fe:	462b      	mov	r3, r5
 8002a00:	f04f 0000 	mov.w	r0, #0
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	0159      	lsls	r1, r3, #5
 8002a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0e:	0150      	lsls	r0, r2, #5
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4621      	mov	r1, r4
 8002a16:	1a51      	subs	r1, r2, r1
 8002a18:	61b9      	str	r1, [r7, #24]
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a2e:	4659      	mov	r1, fp
 8002a30:	018b      	lsls	r3, r1, #6
 8002a32:	4651      	mov	r1, sl
 8002a34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a38:	4651      	mov	r1, sl
 8002a3a:	018a      	lsls	r2, r1, #6
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a42:	4659      	mov	r1, fp
 8002a44:	eb63 0901 	sbc.w	r9, r3, r1
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5c:	4690      	mov	r8, r2
 8002a5e:	4699      	mov	r9, r3
 8002a60:	4623      	mov	r3, r4
 8002a62:	eb18 0303 	adds.w	r3, r8, r3
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	462b      	mov	r3, r5
 8002a6a:	eb49 0303 	adc.w	r3, r9, r3
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	024b      	lsls	r3, r1, #9
 8002a80:	4621      	mov	r1, r4
 8002a82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a86:	4621      	mov	r1, r4
 8002a88:	024a      	lsls	r2, r1, #9
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a92:	2200      	movs	r2, #0
 8002a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a9c:	f7fd fc08 	bl	80002b0 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aaa:	e065      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x420>
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aca:	2300      	movs	r3, #0
 8002acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ace:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0159      	lsls	r1, r3, #5
 8002ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae4:	0150      	lsls	r0, r2, #5
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4641      	mov	r1, r8
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	4649      	mov	r1, r9
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b04:	4659      	mov	r1, fp
 8002b06:	018b      	lsls	r3, r1, #6
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0e:	4651      	mov	r1, sl
 8002b10:	018a      	lsls	r2, r1, #6
 8002b12:	4651      	mov	r1, sl
 8002b14:	1a54      	subs	r4, r2, r1
 8002b16:	4659      	mov	r1, fp
 8002b18:	eb63 0501 	sbc.w	r5, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	464b      	mov	r3, r9
 8002b38:	eb45 0303 	adc.w	r3, r5, r3
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	028b      	lsls	r3, r1, #10
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b54:	4621      	mov	r1, r4
 8002b56:	028a      	lsls	r2, r1, #10
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b60:	2200      	movs	r2, #0
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b64:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b6a:	f7fd fba1 	bl	80002b0 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4613      	mov	r3, r2
 8002b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b78:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0f1b      	lsrs	r3, r3, #28
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b96:	e003      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	37b8      	adds	r7, #184	@ 0xb8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	00f42400 	.word	0x00f42400

08002bb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e28d      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8083 	beq.w	8002cde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bd8:	4b94      	ldr	r3, [pc, #592]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d019      	beq.n	8002c18 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002be4:	4b91      	ldr	r3, [pc, #580]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b84      	ldr	r3, [pc, #528]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x124>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e25a      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x90>
 8002c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xcc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0xb4>
 8002c52:	4b76      	ldr	r3, [pc, #472]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a72      	ldr	r2, [pc, #456]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xcc>
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fa96 	bl	80011bc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fa92 	bl	80011bc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e21f      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b61      	ldr	r3, [pc, #388]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xdc>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fa82 	bl	80011bc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fa7e 	bl	80011bc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e20b      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x104>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d06f      	beq.n	8002dca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cea:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d02:	4b4a      	ldr	r3, [pc, #296]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b44      	ldr	r3, [pc, #272]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x186>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1d3      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4937      	ldr	r1, [pc, #220]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fa2b 	bl	80011bc <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fa27 	bl	80011bc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1b4      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4925      	ldr	r1, [pc, #148]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <HAL_RCC_OscConfig+0x278>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fa0a 	bl	80011bc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe fa06 	bl	80011bc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e193      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe f9ea 	bl	80011bc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe f9e6 	bl	80011bc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e173      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x234>
 8002e0a:	e01b      	b.n	8002e44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe f9d3 	bl	80011bc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f9cf 	bl	80011bc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d907      	bls.n	8002e38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e15c      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b8a      	ldr	r3, [pc, #552]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ea      	bne.n	8002e1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8097 	beq.w	8002f80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b83      	ldr	r3, [pc, #524]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b7f      	ldr	r3, [pc, #508]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b7c      	ldr	r3, [pc, #496]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b79      	ldr	r3, [pc, #484]	@ (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	@ (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f98f 	bl	80011bc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe f98b 	bl	80011bc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e118      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <HAL_RCC_OscConfig+0x4b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x31e>
 8002ec8:	4b66      	ldr	r3, [pc, #408]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a65      	ldr	r2, [pc, #404]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x358>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x340>
 8002ede:	4b61      	ldr	r3, [pc, #388]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a60      	ldr	r2, [pc, #384]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	4b5e      	ldr	r3, [pc, #376]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a5d      	ldr	r2, [pc, #372]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x358>
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a59      	ldr	r2, [pc, #356]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f04:	4b57      	ldr	r3, [pc, #348]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a56      	ldr	r2, [pc, #344]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe f950 	bl	80011bc <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe f94c 	bl	80011bc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0d7      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b4b      	ldr	r3, [pc, #300]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x368>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe f93a 	bl	80011bc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f936 	bl	80011bc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0c1      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	4a3a      	ldr	r2, [pc, #232]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80ad 	beq.w	80030e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d060      	beq.n	8003058 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d145      	bne.n	800302a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b33      	ldr	r3, [pc, #204]	@ (800306c <HAL_RCC_OscConfig+0x4b4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f90a 	bl	80011bc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f906 	bl	80011bc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e093      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	491b      	ldr	r1, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x4b4>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe f8db 	bl	80011bc <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe f8d7 	bl	80011bc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e064      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301c:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x452>
 8003028:	e05c      	b.n	80030e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <HAL_RCC_OscConfig+0x4b4>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f8c4 	bl	80011bc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f8c0 	bl	80011bc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04d      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x480>
 8003056:	e045      	b.n	80030e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e040      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
 800306c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_RCC_OscConfig+0x538>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d030      	beq.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d129      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d122      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d119      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d10f      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e041      	b.n	800318a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fea2 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 f9aa 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e041      	b.n	8003228 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f839 	bl	8003230 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f000 f95b 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e048      	b.n	80032f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d839      	bhi.n	80032e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003270:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	080032ad 	.word	0x080032ad
 800327c:	080032e5 	.word	0x080032e5
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	080032bb 	.word	0x080032bb
 800328c:	080032e5 	.word	0x080032e5
 8003290:	080032e5 	.word	0x080032e5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032d7 	.word	0x080032d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f996 	bl	80035e4 <TIM_OC1_SetConfig>
      break;
 80032b8:	e017      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f9ff 	bl	80036c4 <TIM_OC2_SetConfig>
      break;
 80032c6:	e010      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fa6e 	bl	80037b0 <TIM_OC3_SetConfig>
      break;
 80032d4:	e009      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fadb 	bl	8003898 <TIM_OC4_SetConfig>
      break;
 80032e2:	e002      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIM_ConfigClockSource+0x1c>
 8003314:	2302      	movs	r3, #2
 8003316:	e0b4      	b.n	8003482 <HAL_TIM_ConfigClockSource+0x186>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800333e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003350:	d03e      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003356:	f200 8087 	bhi.w	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335e:	f000 8086 	beq.w	800346e <HAL_TIM_ConfigClockSource+0x172>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003366:	d87f      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b70      	cmp	r3, #112	@ 0x70
 800336a:	d01a      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0xa6>
 800336c:	2b70      	cmp	r3, #112	@ 0x70
 800336e:	d87b      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b60      	cmp	r3, #96	@ 0x60
 8003372:	d050      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x11a>
 8003374:	2b60      	cmp	r3, #96	@ 0x60
 8003376:	d877      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b50      	cmp	r3, #80	@ 0x50
 800337a:	d03c      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0xfa>
 800337c:	2b50      	cmp	r3, #80	@ 0x50
 800337e:	d873      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b40      	cmp	r3, #64	@ 0x40
 8003382:	d058      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x13a>
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d86f      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b30      	cmp	r3, #48	@ 0x30
 800338a:	d064      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	2b30      	cmp	r3, #48	@ 0x30
 800338e:	d86b      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d060      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d867      	bhi.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d05a      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x15a>
 80033a0:	e062      	b.n	8003468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033b2:	f000 fb41 	bl	8003a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	609a      	str	r2, [r3, #8]
      break;
 80033ce:	e04f      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e0:	f000 fb2a 	bl	8003a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033f2:	609a      	str	r2, [r3, #8]
      break;
 80033f4:	e03c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	461a      	mov	r2, r3
 8003404:	f000 fa9e 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2150      	movs	r1, #80	@ 0x50
 800340e:	4618      	mov	r0, r3
 8003410:	f000 faf7 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003414:	e02c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fabd 	bl	80039a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2160      	movs	r1, #96	@ 0x60
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fae7 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003434:	e01c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	461a      	mov	r2, r3
 8003444:	f000 fa7e 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2140      	movs	r1, #64	@ 0x40
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fad7 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003454:	e00c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 face 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003466:	e003      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e000      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800346e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a46      	ldr	r2, [pc, #280]	@ (80035b8 <TIM_Base_SetConfig+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <TIM_Base_SetConfig+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034aa:	d00f      	beq.n	80034cc <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a43      	ldr	r2, [pc, #268]	@ (80035bc <TIM_Base_SetConfig+0x130>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00b      	beq.n	80034cc <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <TIM_Base_SetConfig+0x134>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a41      	ldr	r2, [pc, #260]	@ (80035c4 <TIM_Base_SetConfig+0x138>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	@ (80035c8 <TIM_Base_SetConfig+0x13c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d108      	bne.n	80034de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a35      	ldr	r2, [pc, #212]	@ (80035b8 <TIM_Base_SetConfig+0x12c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02b      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ec:	d027      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a32      	ldr	r2, [pc, #200]	@ (80035bc <TIM_Base_SetConfig+0x130>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d023      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a31      	ldr	r2, [pc, #196]	@ (80035c0 <TIM_Base_SetConfig+0x134>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01f      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a30      	ldr	r2, [pc, #192]	@ (80035c4 <TIM_Base_SetConfig+0x138>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01b      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	@ (80035c8 <TIM_Base_SetConfig+0x13c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d017      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <TIM_Base_SetConfig+0x140>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <TIM_Base_SetConfig+0x144>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00f      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <TIM_Base_SetConfig+0x148>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00b      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <TIM_Base_SetConfig+0x14c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <TIM_Base_SetConfig+0x150>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d003      	beq.n	800353e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a29      	ldr	r2, [pc, #164]	@ (80035e0 <TIM_Base_SetConfig+0x154>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a10      	ldr	r2, [pc, #64]	@ (80035b8 <TIM_Base_SetConfig+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0xf8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a12      	ldr	r2, [pc, #72]	@ (80035c8 <TIM_Base_SetConfig+0x13c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
  }
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40000c00 	.word	0x40000c00
 80035c8:	40010400 	.word	0x40010400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800
 80035d8:	40001800 	.word	0x40001800
 80035dc:	40001c00 	.word	0x40001c00
 80035e0:	40002000 	.word	0x40002000

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0201 	bic.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <TIM_OC1_SetConfig+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC1_SetConfig+0x64>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1f      	ldr	r2, [pc, #124]	@ (80036c0 <TIM_OC1_SetConfig+0xdc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10c      	bne.n	8003662 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0308 	bic.w	r3, r3, #8
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a15      	ldr	r2, [pc, #84]	@ (80036bc <TIM_OC1_SetConfig+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_OC1_SetConfig+0x8e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <TIM_OC1_SetConfig+0xdc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40010400 	.word	0x40010400

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <TIM_OC2_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC2_SetConfig+0x68>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a21      	ldr	r2, [pc, #132]	@ (80037ac <TIM_OC2_SetConfig+0xe8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10d      	bne.n	8003748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <TIM_OC2_SetConfig+0xe4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC2_SetConfig+0x94>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <TIM_OC2_SetConfig+0xe8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a21      	ldr	r2, [pc, #132]	@ (8003890 <TIM_OC3_SetConfig+0xe0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC3_SetConfig+0x66>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a20      	ldr	r2, [pc, #128]	@ (8003894 <TIM_OC3_SetConfig+0xe4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10d      	bne.n	8003832 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a16      	ldr	r2, [pc, #88]	@ (8003890 <TIM_OC3_SetConfig+0xe0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC3_SetConfig+0x92>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <TIM_OC3_SetConfig+0xe4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d113      	bne.n	800386a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000
 8003894:	40010400 	.word	0x40010400

08003898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	031b      	lsls	r3, r3, #12
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a12      	ldr	r2, [pc, #72]	@ (800393c <TIM_OC4_SetConfig+0xa4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_OC4_SetConfig+0x68>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a11      	ldr	r2, [pc, #68]	@ (8003940 <TIM_OC4_SetConfig+0xa8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d109      	bne.n	8003914 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40010400 	.word	0x40010400

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0210 	bic.w	r2, r3, #16
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f043 0307 	orr.w	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e05a      	b.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d01d      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1b      	ldr	r2, [pc, #108]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a15      	ldr	r2, [pc, #84]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10c      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40010400 	.word	0x40010400
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40001800 	.word	0x40001800

08003b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e03d      	b.n	8003c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e042      	b.n	8003cac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f96e 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f82b 	bl	8003cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b0c0      	sub	sp, #256	@ 0x100
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	68d9      	ldr	r1, [r3, #12]
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	ea40 0301 	orr.w	r3, r0, r1
 8003cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d0c:	f021 010c 	bic.w	r1, r1, #12
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	6999      	ldr	r1, [r3, #24]
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	ea40 0301 	orr.w	r3, r0, r1
 8003d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b8f      	ldr	r3, [pc, #572]	@ (8003f80 <UART_SetConfig+0x2cc>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d005      	beq.n	8003d54 <UART_SetConfig+0xa0>
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f84 <UART_SetConfig+0x2d0>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d104      	bne.n	8003d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fcec 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8003d58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d5c:	e003      	b.n	8003d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d5e:	f7fe fcd3 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8003d62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d70:	f040 810c 	bne.w	8003f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d96:	4621      	mov	r1, r4
 8003d98:	eb12 0801 	adds.w	r8, r2, r1
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	eb43 0901 	adc.w	r9, r3, r1
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db6:	4690      	mov	r8, r2
 8003db8:	4699      	mov	r9, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	eb18 0303 	adds.w	r3, r8, r3
 8003dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	eb49 0303 	adc.w	r3, r9, r3
 8003dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003de2:	460b      	mov	r3, r1
 8003de4:	18db      	adds	r3, r3, r3
 8003de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003de8:	4613      	mov	r3, r2
 8003dea:	eb42 0303 	adc.w	r3, r2, r3
 8003dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003df8:	f7fc fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4b61      	ldr	r3, [pc, #388]	@ (8003f88 <UART_SetConfig+0x2d4>)
 8003e02:	fba3 2302 	umull	r2, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	011c      	lsls	r4, r3, #4
 8003e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	1891      	adds	r1, r2, r2
 8003e22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e24:	415b      	adcs	r3, r3
 8003e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e32:	4649      	mov	r1, r9
 8003e34:	eb43 0b01 	adc.w	fp, r3, r1
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e4c:	4692      	mov	sl, r2
 8003e4e:	469b      	mov	fp, r3
 8003e50:	4643      	mov	r3, r8
 8003e52:	eb1a 0303 	adds.w	r3, sl, r3
 8003e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	18db      	adds	r3, r3, r3
 8003e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e7e:	4613      	mov	r3, r2
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e8e:	f7fc fa0f 	bl	80002b0 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <UART_SetConfig+0x2d4>)
 8003e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2264      	movs	r2, #100	@ 0x64
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	1acb      	subs	r3, r1, r3
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eae:	4b36      	ldr	r3, [pc, #216]	@ (8003f88 <UART_SetConfig+0x2d4>)
 8003eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ebc:	441c      	add	r4, r3
 8003ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	1851      	adds	r1, r2, r1
 8003ee4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ef8:	4659      	mov	r1, fp
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4651      	mov	r1, sl
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f34:	460b      	mov	r3, r1
 8003f36:	18db      	adds	r3, r3, r3
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f4a:	f7fc f9b1 	bl	80002b0 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <UART_SetConfig+0x2d4>)
 8003f54:	fba3 1302 	umull	r1, r3, r3, r2
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	2164      	movs	r1, #100	@ 0x64
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	3332      	adds	r3, #50	@ 0x32
 8003f66:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <UART_SetConfig+0x2d4>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4422      	add	r2, r4
 8003f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f7c:	e106      	b.n	800418c <UART_SetConfig+0x4d8>
 8003f7e:	bf00      	nop
 8003f80:	40011000 	.word	0x40011000
 8003f84:	40011400 	.word	0x40011400
 8003f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f9e:	4642      	mov	r2, r8
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	1891      	adds	r1, r2, r2
 8003fa4:	6239      	str	r1, [r7, #32]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fae:	4641      	mov	r1, r8
 8003fb0:	1854      	adds	r4, r2, r1
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	eb43 0501 	adc.w	r5, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	00eb      	lsls	r3, r5, #3
 8003fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc6:	00e2      	lsls	r2, r4, #3
 8003fc8:	4614      	mov	r4, r2
 8003fca:	461d      	mov	r5, r3
 8003fcc:	4643      	mov	r3, r8
 8003fce:	18e3      	adds	r3, r4, r3
 8003fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	eb45 0303 	adc.w	r3, r5, r3
 8003fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	008b      	lsls	r3, r1, #2
 8003ffe:	4621      	mov	r1, r4
 8004000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004004:	4621      	mov	r1, r4
 8004006:	008a      	lsls	r2, r1, #2
 8004008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800400c:	f7fc f950 	bl	80002b0 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4b60      	ldr	r3, [pc, #384]	@ (8004198 <UART_SetConfig+0x4e4>)
 8004016:	fba3 2302 	umull	r2, r3, r3, r2
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	011c      	lsls	r4, r3, #4
 800401e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004028:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800402c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	1891      	adds	r1, r2, r2
 8004036:	61b9      	str	r1, [r7, #24]
 8004038:	415b      	adcs	r3, r3
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004040:	4641      	mov	r1, r8
 8004042:	1851      	adds	r1, r2, r1
 8004044:	6139      	str	r1, [r7, #16]
 8004046:	4649      	mov	r1, r9
 8004048:	414b      	adcs	r3, r1
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004058:	4659      	mov	r1, fp
 800405a:	00cb      	lsls	r3, r1, #3
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004062:	4651      	mov	r1, sl
 8004064:	00ca      	lsls	r2, r1, #3
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	4603      	mov	r3, r0
 800406c:	4642      	mov	r2, r8
 800406e:	189b      	adds	r3, r3, r2
 8004070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004074:	464b      	mov	r3, r9
 8004076:	460a      	mov	r2, r1
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800408a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004098:	4649      	mov	r1, r9
 800409a:	008b      	lsls	r3, r1, #2
 800409c:	4641      	mov	r1, r8
 800409e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a2:	4641      	mov	r1, r8
 80040a4:	008a      	lsls	r2, r1, #2
 80040a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040aa:	f7fc f901 	bl	80002b0 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <UART_SetConfig+0x4e4>)
 80040b6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2264      	movs	r2, #100	@ 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	1acb      	subs	r3, r1, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	@ 0x32
 80040c8:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <UART_SetConfig+0x4e4>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d4:	441c      	add	r4, r3
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040de:	677a      	str	r2, [r7, #116]	@ 0x74
 80040e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	1891      	adds	r1, r2, r2
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	415b      	adcs	r3, r3
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f4:	4641      	mov	r1, r8
 80040f6:	1851      	adds	r1, r2, r1
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	4649      	mov	r1, r9
 80040fc:	414b      	adcs	r3, r1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800410c:	4659      	mov	r1, fp
 800410e:	00cb      	lsls	r3, r1, #3
 8004110:	4651      	mov	r1, sl
 8004112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004116:	4651      	mov	r1, sl
 8004118:	00ca      	lsls	r2, r1, #3
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	4603      	mov	r3, r0
 8004120:	4642      	mov	r2, r8
 8004122:	189b      	adds	r3, r3, r2
 8004124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004126:	464b      	mov	r3, r9
 8004128:	460a      	mov	r2, r1
 800412a:	eb42 0303 	adc.w	r3, r2, r3
 800412e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	663b      	str	r3, [r7, #96]	@ 0x60
 800413a:	667a      	str	r2, [r7, #100]	@ 0x64
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004148:	4649      	mov	r1, r9
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	4641      	mov	r1, r8
 800414e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004152:	4641      	mov	r1, r8
 8004154:	008a      	lsls	r2, r1, #2
 8004156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800415a:	f7fc f8a9 	bl	80002b0 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <UART_SetConfig+0x4e4>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	@ 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	3332      	adds	r3, #50	@ 0x32
 8004176:	4a08      	ldr	r2, [pc, #32]	@ (8004198 <UART_SetConfig+0x4e4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4422      	add	r2, r4
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004192:	46bd      	mov	sp, r7
 8004194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004198:	51eb851f 	.word	0x51eb851f

0800419c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80041a2:	f000 fa27 	bl	80045f4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80041a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80041aa:	2201      	movs	r2, #1
 80041ac:	2178      	movs	r1, #120	@ 0x78
 80041ae:	485b      	ldr	r0, [pc, #364]	@ (800431c <SSD1306_Init+0x180>)
 80041b0:	f7fd fe2e 	bl	8001e10 <HAL_I2C_IsDeviceReady>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e0a9      	b.n	8004312 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80041be:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80041c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041c4:	e002      	b.n	80041cc <SSD1306_Init+0x30>
		p--;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f9      	bne.n	80041c6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80041d2:	22ae      	movs	r2, #174	@ 0xae
 80041d4:	2100      	movs	r1, #0
 80041d6:	2078      	movs	r0, #120	@ 0x78
 80041d8:	f000 fa88 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80041dc:	2220      	movs	r2, #32
 80041de:	2100      	movs	r1, #0
 80041e0:	2078      	movs	r0, #120	@ 0x78
 80041e2:	f000 fa83 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80041e6:	2210      	movs	r2, #16
 80041e8:	2100      	movs	r1, #0
 80041ea:	2078      	movs	r0, #120	@ 0x78
 80041ec:	f000 fa7e 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80041f0:	22b0      	movs	r2, #176	@ 0xb0
 80041f2:	2100      	movs	r1, #0
 80041f4:	2078      	movs	r0, #120	@ 0x78
 80041f6:	f000 fa79 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80041fa:	22c8      	movs	r2, #200	@ 0xc8
 80041fc:	2100      	movs	r1, #0
 80041fe:	2078      	movs	r0, #120	@ 0x78
 8004200:	f000 fa74 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004204:	2200      	movs	r2, #0
 8004206:	2100      	movs	r1, #0
 8004208:	2078      	movs	r0, #120	@ 0x78
 800420a:	f000 fa6f 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800420e:	2210      	movs	r2, #16
 8004210:	2100      	movs	r1, #0
 8004212:	2078      	movs	r0, #120	@ 0x78
 8004214:	f000 fa6a 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004218:	2240      	movs	r2, #64	@ 0x40
 800421a:	2100      	movs	r1, #0
 800421c:	2078      	movs	r0, #120	@ 0x78
 800421e:	f000 fa65 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004222:	2281      	movs	r2, #129	@ 0x81
 8004224:	2100      	movs	r1, #0
 8004226:	2078      	movs	r0, #120	@ 0x78
 8004228:	f000 fa60 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800422c:	22ff      	movs	r2, #255	@ 0xff
 800422e:	2100      	movs	r1, #0
 8004230:	2078      	movs	r0, #120	@ 0x78
 8004232:	f000 fa5b 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004236:	22a1      	movs	r2, #161	@ 0xa1
 8004238:	2100      	movs	r1, #0
 800423a:	2078      	movs	r0, #120	@ 0x78
 800423c:	f000 fa56 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004240:	22a6      	movs	r2, #166	@ 0xa6
 8004242:	2100      	movs	r1, #0
 8004244:	2078      	movs	r0, #120	@ 0x78
 8004246:	f000 fa51 	bl	80046ec <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800424a:	22a8      	movs	r2, #168	@ 0xa8
 800424c:	2100      	movs	r1, #0
 800424e:	2078      	movs	r0, #120	@ 0x78
 8004250:	f000 fa4c 	bl	80046ec <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8004254:	223f      	movs	r2, #63	@ 0x3f
 8004256:	2100      	movs	r1, #0
 8004258:	2078      	movs	r0, #120	@ 0x78
 800425a:	f000 fa47 	bl	80046ec <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800425e:	22a4      	movs	r2, #164	@ 0xa4
 8004260:	2100      	movs	r1, #0
 8004262:	2078      	movs	r0, #120	@ 0x78
 8004264:	f000 fa42 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004268:	22d3      	movs	r2, #211	@ 0xd3
 800426a:	2100      	movs	r1, #0
 800426c:	2078      	movs	r0, #120	@ 0x78
 800426e:	f000 fa3d 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2078      	movs	r0, #120	@ 0x78
 8004278:	f000 fa38 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800427c:	22d5      	movs	r2, #213	@ 0xd5
 800427e:	2100      	movs	r1, #0
 8004280:	2078      	movs	r0, #120	@ 0x78
 8004282:	f000 fa33 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004286:	22f0      	movs	r2, #240	@ 0xf0
 8004288:	2100      	movs	r1, #0
 800428a:	2078      	movs	r0, #120	@ 0x78
 800428c:	f000 fa2e 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004290:	22d9      	movs	r2, #217	@ 0xd9
 8004292:	2100      	movs	r1, #0
 8004294:	2078      	movs	r0, #120	@ 0x78
 8004296:	f000 fa29 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800429a:	2222      	movs	r2, #34	@ 0x22
 800429c:	2100      	movs	r1, #0
 800429e:	2078      	movs	r0, #120	@ 0x78
 80042a0:	f000 fa24 	bl	80046ec <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80042a4:	22da      	movs	r2, #218	@ 0xda
 80042a6:	2100      	movs	r1, #0
 80042a8:	2078      	movs	r0, #120	@ 0x78
 80042aa:	f000 fa1f 	bl	80046ec <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80042ae:	2212      	movs	r2, #18
 80042b0:	2100      	movs	r1, #0
 80042b2:	2078      	movs	r0, #120	@ 0x78
 80042b4:	f000 fa1a 	bl	80046ec <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80042b8:	22db      	movs	r2, #219	@ 0xdb
 80042ba:	2100      	movs	r1, #0
 80042bc:	2078      	movs	r0, #120	@ 0x78
 80042be:	f000 fa15 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80042c2:	2220      	movs	r2, #32
 80042c4:	2100      	movs	r1, #0
 80042c6:	2078      	movs	r0, #120	@ 0x78
 80042c8:	f000 fa10 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80042cc:	228d      	movs	r2, #141	@ 0x8d
 80042ce:	2100      	movs	r1, #0
 80042d0:	2078      	movs	r0, #120	@ 0x78
 80042d2:	f000 fa0b 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80042d6:	2214      	movs	r2, #20
 80042d8:	2100      	movs	r1, #0
 80042da:	2078      	movs	r0, #120	@ 0x78
 80042dc:	f000 fa06 	bl	80046ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80042e0:	22af      	movs	r2, #175	@ 0xaf
 80042e2:	2100      	movs	r1, #0
 80042e4:	2078      	movs	r0, #120	@ 0x78
 80042e6:	f000 fa01 	bl	80046ec <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80042ea:	222e      	movs	r2, #46	@ 0x2e
 80042ec:	2100      	movs	r1, #0
 80042ee:	2078      	movs	r0, #120	@ 0x78
 80042f0:	f000 f9fc 	bl	80046ec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f000 f843 	bl	8004380 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80042fa:	f000 f813 	bl	8004324 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80042fe:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <SSD1306_Init+0x184>)
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <SSD1306_Init+0x184>)
 8004306:	2200      	movs	r2, #0
 8004308:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800430a:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <SSD1306_Init+0x184>)
 800430c:	2201      	movs	r2, #1
 800430e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000080 	.word	0x20000080
 8004320:	2000056c 	.word	0x2000056c

08004324 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800432a:	2300      	movs	r3, #0
 800432c:	71fb      	strb	r3, [r7, #7]
 800432e:	e01d      	b.n	800436c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	3b50      	subs	r3, #80	@ 0x50
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	2100      	movs	r1, #0
 800433a:	2078      	movs	r0, #120	@ 0x78
 800433c:	f000 f9d6 	bl	80046ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004340:	2200      	movs	r2, #0
 8004342:	2100      	movs	r1, #0
 8004344:	2078      	movs	r0, #120	@ 0x78
 8004346:	f000 f9d1 	bl	80046ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800434a:	2210      	movs	r2, #16
 800434c:	2100      	movs	r1, #0
 800434e:	2078      	movs	r0, #120	@ 0x78
 8004350:	f000 f9cc 	bl	80046ec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	4a08      	ldr	r2, [pc, #32]	@ (800437c <SSD1306_UpdateScreen+0x58>)
 800435a:	441a      	add	r2, r3
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	2078      	movs	r0, #120	@ 0x78
 8004362:	f000 f95d 	bl	8004620 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	3301      	adds	r3, #1
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b07      	cmp	r3, #7
 8004370:	d9de      	bls.n	8004330 <SSD1306_UpdateScreen+0xc>
	}
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	2000016c 	.word	0x2000016c

08004380 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <SSD1306_Fill+0x14>
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <SSD1306_Fill+0x16>
 8004394:	23ff      	movs	r3, #255	@ 0xff
 8004396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800439a:	4619      	mov	r1, r3
 800439c:	4803      	ldr	r0, [pc, #12]	@ (80043ac <SSD1306_Fill+0x2c>)
 800439e:	f000 f9e3 	bl	8004768 <memset>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000016c 	.word	0x2000016c

080043b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
 80043ba:	460b      	mov	r3, r1
 80043bc:	80bb      	strh	r3, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	70fb      	strb	r3, [r7, #3]
	if (
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80043c6:	d848      	bhi.n	800445a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80043cc:	d845      	bhi.n	800445a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80043ce:	4b26      	ldr	r3, [pc, #152]	@ (8004468 <SSD1306_DrawPixel+0xb8>)
 80043d0:	791b      	ldrb	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d11a      	bne.n	8004420 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	08db      	lsrs	r3, r3, #3
 80043f0:	b298      	uxth	r0, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	01db      	lsls	r3, r3, #7
 80043f6:	4413      	add	r3, r2
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <SSD1306_DrawPixel+0xbc>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	88bb      	ldrh	r3, [r7, #4]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	b25b      	sxtb	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	b259      	sxtb	r1, r3
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	4603      	mov	r3, r0
 8004414:	01db      	lsls	r3, r3, #7
 8004416:	4413      	add	r3, r2
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	4a14      	ldr	r2, [pc, #80]	@ (800446c <SSD1306_DrawPixel+0xbc>)
 800441c:	54d1      	strb	r1, [r2, r3]
 800441e:	e01d      	b.n	800445c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004420:	88fa      	ldrh	r2, [r7, #6]
 8004422:	88bb      	ldrh	r3, [r7, #4]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	b298      	uxth	r0, r3
 8004428:	4603      	mov	r3, r0
 800442a:	01db      	lsls	r3, r3, #7
 800442c:	4413      	add	r3, r2
 800442e:	4a0f      	ldr	r2, [pc, #60]	@ (800446c <SSD1306_DrawPixel+0xbc>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	b25a      	sxtb	r2, r3
 8004434:	88bb      	ldrh	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	b25b      	sxtb	r3, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	b25b      	sxtb	r3, r3
 8004446:	4013      	ands	r3, r2
 8004448:	b259      	sxtb	r1, r3
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	4603      	mov	r3, r0
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	4413      	add	r3, r2
 8004452:	b2c9      	uxtb	r1, r1
 8004454:	4a05      	ldr	r2, [pc, #20]	@ (800446c <SSD1306_DrawPixel+0xbc>)
 8004456:	54d1      	strb	r1, [r2, r3]
 8004458:	e000      	b.n	800445c <SSD1306_DrawPixel+0xac>
		return;
 800445a:	bf00      	nop
	}
}
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2000056c 	.word	0x2000056c
 800446c:	2000016c 	.word	0x2000016c

08004470 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	460a      	mov	r2, r1
 800447a:	80fb      	strh	r3, [r7, #6]
 800447c:	4613      	mov	r3, r2
 800447e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004480:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <SSD1306_GotoXY+0x28>)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004486:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <SSD1306_GotoXY+0x28>)
 8004488:	88bb      	ldrh	r3, [r7, #4]
 800448a:	8053      	strh	r3, [r2, #2]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	2000056c 	.word	0x2000056c

0800449c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044ac:	4b39      	ldr	r3, [pc, #228]	@ (8004594 <SSD1306_Putc+0xf8>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	4413      	add	r3, r2
	if (
 80044b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ba:	dc07      	bgt.n	80044cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80044bc:	4b35      	ldr	r3, [pc, #212]	@ (8004594 <SSD1306_Putc+0xf8>)
 80044be:	885b      	ldrh	r3, [r3, #2]
 80044c0:	461a      	mov	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80044c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80044ca:	dd01      	ble.n	80044d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e05d      	b.n	800458c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e04b      	b.n	800456e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	3b20      	subs	r3, #32
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	7849      	ldrb	r1, [r1, #1]
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4619      	mov	r1, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	440b      	add	r3, r1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e030      	b.n	800455c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800450a:	4b22      	ldr	r3, [pc, #136]	@ (8004594 <SSD1306_Putc+0xf8>)
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	b29b      	uxth	r3, r3
 8004512:	4413      	add	r3, r2
 8004514:	b298      	uxth	r0, r3
 8004516:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <SSD1306_Putc+0xf8>)
 8004518:	885a      	ldrh	r2, [r3, #2]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	b29b      	uxth	r3, r3
 800451e:	4413      	add	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	79ba      	ldrb	r2, [r7, #6]
 8004524:	4619      	mov	r1, r3
 8004526:	f7ff ff43 	bl	80043b0 <SSD1306_DrawPixel>
 800452a:	e014      	b.n	8004556 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800452c:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <SSD1306_Putc+0xf8>)
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	b29b      	uxth	r3, r3
 8004534:	4413      	add	r3, r2
 8004536:	b298      	uxth	r0, r3
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <SSD1306_Putc+0xf8>)
 800453a:	885a      	ldrh	r2, [r3, #2]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	b29b      	uxth	r3, r3
 8004540:	4413      	add	r3, r2
 8004542:	b299      	uxth	r1, r3
 8004544:	79bb      	ldrb	r3, [r7, #6]
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	f7ff ff2d 	bl	80043b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4293      	cmp	r3, r2
 8004566:	d3c8      	bcc.n	80044fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3301      	adds	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	461a      	mov	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4293      	cmp	r3, r2
 8004578:	d3ad      	bcc.n	80044d6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <SSD1306_Putc+0xf8>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	4413      	add	r3, r2
 8004584:	b29a      	uxth	r2, r3
 8004586:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <SSD1306_Putc+0xf8>)
 8004588:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800458a:	79fb      	ldrb	r3, [r7, #7]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000056c 	.word	0x2000056c

08004598 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80045a6:	e012      	b.n	80045ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	79fa      	ldrb	r2, [r7, #7]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff73 	bl	800449c <SSD1306_Putc>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d002      	beq.n	80045c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	e008      	b.n	80045da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e8      	bne.n	80045a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	781b      	ldrb	r3, [r3, #0]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7ff feca 	bl	8004380 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80045ec:	f7ff fe9a 	bl	8004324 <SSD1306_UpdateScreen>
}
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <ssd1306_I2C_Init+0x28>)
 80045fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80045fe:	e002      	b.n	8004606 <ssd1306_I2C_Init+0x12>
		p--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f9      	bne.n	8004600 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	0003d090 	.word	0x0003d090

08004620 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b0c7      	sub	sp, #284	@ 0x11c
 8004624:	af02      	add	r7, sp, #8
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800462e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004632:	600a      	str	r2, [r1, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800463a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800463e:	4622      	mov	r2, r4
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004646:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800464a:	4602      	mov	r2, r0
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004652:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004656:	460a      	mov	r2, r1
 8004658:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800465a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800465e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004662:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004666:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800466a:	7812      	ldrb	r2, [r2, #0]
 800466c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004674:	e015      	b.n	80046a2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004676:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800467a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800467e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	441a      	add	r2, r3
 8004686:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800468a:	3301      	adds	r3, #1
 800468c:	7811      	ldrb	r1, [r2, #0]
 800468e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004692:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004696:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004698:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800469c:	3301      	adds	r3, #1
 800469e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80046a2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80046ac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80046b0:	8812      	ldrh	r2, [r2, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d8df      	bhi.n	8004676 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80046b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046ba:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b299      	uxth	r1, r3
 80046c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f107 020c 	add.w	r2, r7, #12
 80046d4:	200a      	movs	r0, #10
 80046d6:	9000      	str	r0, [sp, #0]
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <ssd1306_I2C_WriteMulti+0xc8>)
 80046da:	f7fd fa9b 	bl	8001c14 <HAL_I2C_Master_Transmit>
}
 80046de:	bf00      	nop
 80046e0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	20000080 	.word	0x20000080

080046ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	460b      	mov	r3, r1
 80046f8:	71bb      	strb	r3, [r7, #6]
 80046fa:	4613      	mov	r3, r2
 80046fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004702:	797b      	ldrb	r3, [r7, #5]
 8004704:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	b299      	uxth	r1, r3
 800470a:	f107 020c 	add.w	r2, r7, #12
 800470e:	230a      	movs	r3, #10
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2302      	movs	r3, #2
 8004714:	4803      	ldr	r0, [pc, #12]	@ (8004724 <ssd1306_I2C_Write+0x38>)
 8004716:	f7fd fa7d 	bl	8001c14 <HAL_I2C_Master_Transmit>
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000080 	.word	0x20000080

08004728 <siprintf>:
 8004728:	b40e      	push	{r1, r2, r3}
 800472a:	b500      	push	{lr}
 800472c:	b09c      	sub	sp, #112	@ 0x70
 800472e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004730:	9002      	str	r0, [sp, #8]
 8004732:	9006      	str	r0, [sp, #24]
 8004734:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004738:	4809      	ldr	r0, [pc, #36]	@ (8004760 <siprintf+0x38>)
 800473a:	9107      	str	r1, [sp, #28]
 800473c:	9104      	str	r1, [sp, #16]
 800473e:	4909      	ldr	r1, [pc, #36]	@ (8004764 <siprintf+0x3c>)
 8004740:	f853 2b04 	ldr.w	r2, [r3], #4
 8004744:	9105      	str	r1, [sp, #20]
 8004746:	6800      	ldr	r0, [r0, #0]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	a902      	add	r1, sp, #8
 800474c:	f000 f994 	bl	8004a78 <_svfiprintf_r>
 8004750:	9b02      	ldr	r3, [sp, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	b01c      	add	sp, #112	@ 0x70
 8004758:	f85d eb04 	ldr.w	lr, [sp], #4
 800475c:	b003      	add	sp, #12
 800475e:	4770      	bx	lr
 8004760:	20000014 	.word	0x20000014
 8004764:	ffff0208 	.word	0xffff0208

08004768 <memset>:
 8004768:	4402      	add	r2, r0
 800476a:	4603      	mov	r3, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	d100      	bne.n	8004772 <memset+0xa>
 8004770:	4770      	bx	lr
 8004772:	f803 1b01 	strb.w	r1, [r3], #1
 8004776:	e7f9      	b.n	800476c <memset+0x4>

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	@ (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000014 	.word	0x20000014

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	@ (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	@ (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	@ (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	@ (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 fc66 	bl	8005068 <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08005870 	.word	0x08005870
 80047c0:	08005870 	.word	0x08005870
 80047c4:	08005870 	.word	0x08005870
 80047c8:	08005874 	.word	0x08005874

080047cc <__retarget_lock_acquire_recursive>:
 80047cc:	4770      	bx	lr

080047ce <__retarget_lock_release_recursive>:
 80047ce:	4770      	bx	lr

080047d0 <_free_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d041      	beq.n	800485c <_free_r+0x8c>
 80047d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047dc:	1f0c      	subs	r4, r1, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfb8      	it	lt
 80047e2:	18e4      	addlt	r4, r4, r3
 80047e4:	f000 f8e0 	bl	80049a8 <__malloc_lock>
 80047e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <_free_r+0x90>)
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	b933      	cbnz	r3, 80047fc <_free_r+0x2c>
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	6014      	str	r4, [r2, #0]
 80047f2:	4628      	mov	r0, r5
 80047f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f8:	f000 b8dc 	b.w	80049b4 <__malloc_unlock>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d908      	bls.n	8004812 <_free_r+0x42>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	1821      	adds	r1, r4, r0
 8004804:	428b      	cmp	r3, r1
 8004806:	bf01      	itttt	eq
 8004808:	6819      	ldreq	r1, [r3, #0]
 800480a:	685b      	ldreq	r3, [r3, #4]
 800480c:	1809      	addeq	r1, r1, r0
 800480e:	6021      	streq	r1, [r4, #0]
 8004810:	e7ed      	b.n	80047ee <_free_r+0x1e>
 8004812:	461a      	mov	r2, r3
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b10b      	cbz	r3, 800481c <_free_r+0x4c>
 8004818:	42a3      	cmp	r3, r4
 800481a:	d9fa      	bls.n	8004812 <_free_r+0x42>
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	1850      	adds	r0, r2, r1
 8004820:	42a0      	cmp	r0, r4
 8004822:	d10b      	bne.n	800483c <_free_r+0x6c>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	4401      	add	r1, r0
 8004828:	1850      	adds	r0, r2, r1
 800482a:	4283      	cmp	r3, r0
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	d1e0      	bne.n	80047f2 <_free_r+0x22>
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	6053      	str	r3, [r2, #4]
 8004836:	4408      	add	r0, r1
 8004838:	6010      	str	r0, [r2, #0]
 800483a:	e7da      	b.n	80047f2 <_free_r+0x22>
 800483c:	d902      	bls.n	8004844 <_free_r+0x74>
 800483e:	230c      	movs	r3, #12
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	e7d6      	b.n	80047f2 <_free_r+0x22>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	1821      	adds	r1, r4, r0
 8004848:	428b      	cmp	r3, r1
 800484a:	bf04      	itt	eq
 800484c:	6819      	ldreq	r1, [r3, #0]
 800484e:	685b      	ldreq	r3, [r3, #4]
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	bf04      	itt	eq
 8004854:	1809      	addeq	r1, r1, r0
 8004856:	6021      	streq	r1, [r4, #0]
 8004858:	6054      	str	r4, [r2, #4]
 800485a:	e7ca      	b.n	80047f2 <_free_r+0x22>
 800485c:	bd38      	pop	{r3, r4, r5, pc}
 800485e:	bf00      	nop
 8004860:	200006b8 	.word	0x200006b8

08004864 <sbrk_aligned>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4e0f      	ldr	r6, [pc, #60]	@ (80048a4 <sbrk_aligned+0x40>)
 8004868:	460c      	mov	r4, r1
 800486a:	6831      	ldr	r1, [r6, #0]
 800486c:	4605      	mov	r5, r0
 800486e:	b911      	cbnz	r1, 8004876 <sbrk_aligned+0x12>
 8004870:	f000 fba6 	bl	8004fc0 <_sbrk_r>
 8004874:	6030      	str	r0, [r6, #0]
 8004876:	4621      	mov	r1, r4
 8004878:	4628      	mov	r0, r5
 800487a:	f000 fba1 	bl	8004fc0 <_sbrk_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d103      	bne.n	800488a <sbrk_aligned+0x26>
 8004882:	f04f 34ff 	mov.w	r4, #4294967295
 8004886:	4620      	mov	r0, r4
 8004888:	bd70      	pop	{r4, r5, r6, pc}
 800488a:	1cc4      	adds	r4, r0, #3
 800488c:	f024 0403 	bic.w	r4, r4, #3
 8004890:	42a0      	cmp	r0, r4
 8004892:	d0f8      	beq.n	8004886 <sbrk_aligned+0x22>
 8004894:	1a21      	subs	r1, r4, r0
 8004896:	4628      	mov	r0, r5
 8004898:	f000 fb92 	bl	8004fc0 <_sbrk_r>
 800489c:	3001      	adds	r0, #1
 800489e:	d1f2      	bne.n	8004886 <sbrk_aligned+0x22>
 80048a0:	e7ef      	b.n	8004882 <sbrk_aligned+0x1e>
 80048a2:	bf00      	nop
 80048a4:	200006b4 	.word	0x200006b4

080048a8 <_malloc_r>:
 80048a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ac:	1ccd      	adds	r5, r1, #3
 80048ae:	f025 0503 	bic.w	r5, r5, #3
 80048b2:	3508      	adds	r5, #8
 80048b4:	2d0c      	cmp	r5, #12
 80048b6:	bf38      	it	cc
 80048b8:	250c      	movcc	r5, #12
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	4606      	mov	r6, r0
 80048be:	db01      	blt.n	80048c4 <_malloc_r+0x1c>
 80048c0:	42a9      	cmp	r1, r5
 80048c2:	d904      	bls.n	80048ce <_malloc_r+0x26>
 80048c4:	230c      	movs	r3, #12
 80048c6:	6033      	str	r3, [r6, #0]
 80048c8:	2000      	movs	r0, #0
 80048ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049a4 <_malloc_r+0xfc>
 80048d2:	f000 f869 	bl	80049a8 <__malloc_lock>
 80048d6:	f8d8 3000 	ldr.w	r3, [r8]
 80048da:	461c      	mov	r4, r3
 80048dc:	bb44      	cbnz	r4, 8004930 <_malloc_r+0x88>
 80048de:	4629      	mov	r1, r5
 80048e0:	4630      	mov	r0, r6
 80048e2:	f7ff ffbf 	bl	8004864 <sbrk_aligned>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	4604      	mov	r4, r0
 80048ea:	d158      	bne.n	800499e <_malloc_r+0xf6>
 80048ec:	f8d8 4000 	ldr.w	r4, [r8]
 80048f0:	4627      	mov	r7, r4
 80048f2:	2f00      	cmp	r7, #0
 80048f4:	d143      	bne.n	800497e <_malloc_r+0xd6>
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d04b      	beq.n	8004992 <_malloc_r+0xea>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	4639      	mov	r1, r7
 80048fe:	4630      	mov	r0, r6
 8004900:	eb04 0903 	add.w	r9, r4, r3
 8004904:	f000 fb5c 	bl	8004fc0 <_sbrk_r>
 8004908:	4581      	cmp	r9, r0
 800490a:	d142      	bne.n	8004992 <_malloc_r+0xea>
 800490c:	6821      	ldr	r1, [r4, #0]
 800490e:	1a6d      	subs	r5, r5, r1
 8004910:	4629      	mov	r1, r5
 8004912:	4630      	mov	r0, r6
 8004914:	f7ff ffa6 	bl	8004864 <sbrk_aligned>
 8004918:	3001      	adds	r0, #1
 800491a:	d03a      	beq.n	8004992 <_malloc_r+0xea>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	442b      	add	r3, r5
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	f8d8 3000 	ldr.w	r3, [r8]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	bb62      	cbnz	r2, 8004984 <_malloc_r+0xdc>
 800492a:	f8c8 7000 	str.w	r7, [r8]
 800492e:	e00f      	b.n	8004950 <_malloc_r+0xa8>
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	1b52      	subs	r2, r2, r5
 8004934:	d420      	bmi.n	8004978 <_malloc_r+0xd0>
 8004936:	2a0b      	cmp	r2, #11
 8004938:	d917      	bls.n	800496a <_malloc_r+0xc2>
 800493a:	1961      	adds	r1, r4, r5
 800493c:	42a3      	cmp	r3, r4
 800493e:	6025      	str	r5, [r4, #0]
 8004940:	bf18      	it	ne
 8004942:	6059      	strne	r1, [r3, #4]
 8004944:	6863      	ldr	r3, [r4, #4]
 8004946:	bf08      	it	eq
 8004948:	f8c8 1000 	streq.w	r1, [r8]
 800494c:	5162      	str	r2, [r4, r5]
 800494e:	604b      	str	r3, [r1, #4]
 8004950:	4630      	mov	r0, r6
 8004952:	f000 f82f 	bl	80049b4 <__malloc_unlock>
 8004956:	f104 000b 	add.w	r0, r4, #11
 800495a:	1d23      	adds	r3, r4, #4
 800495c:	f020 0007 	bic.w	r0, r0, #7
 8004960:	1ac2      	subs	r2, r0, r3
 8004962:	bf1c      	itt	ne
 8004964:	1a1b      	subne	r3, r3, r0
 8004966:	50a3      	strne	r3, [r4, r2]
 8004968:	e7af      	b.n	80048ca <_malloc_r+0x22>
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	42a3      	cmp	r3, r4
 800496e:	bf0c      	ite	eq
 8004970:	f8c8 2000 	streq.w	r2, [r8]
 8004974:	605a      	strne	r2, [r3, #4]
 8004976:	e7eb      	b.n	8004950 <_malloc_r+0xa8>
 8004978:	4623      	mov	r3, r4
 800497a:	6864      	ldr	r4, [r4, #4]
 800497c:	e7ae      	b.n	80048dc <_malloc_r+0x34>
 800497e:	463c      	mov	r4, r7
 8004980:	687f      	ldr	r7, [r7, #4]
 8004982:	e7b6      	b.n	80048f2 <_malloc_r+0x4a>
 8004984:	461a      	mov	r2, r3
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	42a3      	cmp	r3, r4
 800498a:	d1fb      	bne.n	8004984 <_malloc_r+0xdc>
 800498c:	2300      	movs	r3, #0
 800498e:	6053      	str	r3, [r2, #4]
 8004990:	e7de      	b.n	8004950 <_malloc_r+0xa8>
 8004992:	230c      	movs	r3, #12
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	4630      	mov	r0, r6
 8004998:	f000 f80c 	bl	80049b4 <__malloc_unlock>
 800499c:	e794      	b.n	80048c8 <_malloc_r+0x20>
 800499e:	6005      	str	r5, [r0, #0]
 80049a0:	e7d6      	b.n	8004950 <_malloc_r+0xa8>
 80049a2:	bf00      	nop
 80049a4:	200006b8 	.word	0x200006b8

080049a8 <__malloc_lock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	@ (80049b0 <__malloc_lock+0x8>)
 80049aa:	f7ff bf0f 	b.w	80047cc <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	200006b0 	.word	0x200006b0

080049b4 <__malloc_unlock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	@ (80049bc <__malloc_unlock+0x8>)
 80049b6:	f7ff bf0a 	b.w	80047ce <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	200006b0 	.word	0x200006b0

080049c0 <__ssputs_r>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	688e      	ldr	r6, [r1, #8]
 80049c6:	461f      	mov	r7, r3
 80049c8:	42be      	cmp	r6, r7
 80049ca:	680b      	ldr	r3, [r1, #0]
 80049cc:	4682      	mov	sl, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	4690      	mov	r8, r2
 80049d2:	d82d      	bhi.n	8004a30 <__ssputs_r+0x70>
 80049d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049dc:	d026      	beq.n	8004a2c <__ssputs_r+0x6c>
 80049de:	6965      	ldr	r5, [r4, #20]
 80049e0:	6909      	ldr	r1, [r1, #16]
 80049e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049e6:	eba3 0901 	sub.w	r9, r3, r1
 80049ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049ee:	1c7b      	adds	r3, r7, #1
 80049f0:	444b      	add	r3, r9
 80049f2:	106d      	asrs	r5, r5, #1
 80049f4:	429d      	cmp	r5, r3
 80049f6:	bf38      	it	cc
 80049f8:	461d      	movcc	r5, r3
 80049fa:	0553      	lsls	r3, r2, #21
 80049fc:	d527      	bpl.n	8004a4e <__ssputs_r+0x8e>
 80049fe:	4629      	mov	r1, r5
 8004a00:	f7ff ff52 	bl	80048a8 <_malloc_r>
 8004a04:	4606      	mov	r6, r0
 8004a06:	b360      	cbz	r0, 8004a62 <__ssputs_r+0xa2>
 8004a08:	6921      	ldr	r1, [r4, #16]
 8004a0a:	464a      	mov	r2, r9
 8004a0c:	f000 fae8 	bl	8004fe0 <memcpy>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	6126      	str	r6, [r4, #16]
 8004a1e:	6165      	str	r5, [r4, #20]
 8004a20:	444e      	add	r6, r9
 8004a22:	eba5 0509 	sub.w	r5, r5, r9
 8004a26:	6026      	str	r6, [r4, #0]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	463e      	mov	r6, r7
 8004a2c:	42be      	cmp	r6, r7
 8004a2e:	d900      	bls.n	8004a32 <__ssputs_r+0x72>
 8004a30:	463e      	mov	r6, r7
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	4632      	mov	r2, r6
 8004a36:	4641      	mov	r1, r8
 8004a38:	f000 faa8 	bl	8004f8c <memmove>
 8004a3c:	68a3      	ldr	r3, [r4, #8]
 8004a3e:	1b9b      	subs	r3, r3, r6
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	4433      	add	r3, r6
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4e:	462a      	mov	r2, r5
 8004a50:	f000 fad4 	bl	8004ffc <_realloc_r>
 8004a54:	4606      	mov	r6, r0
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d1e0      	bne.n	8004a1c <__ssputs_r+0x5c>
 8004a5a:	6921      	ldr	r1, [r4, #16]
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	f7ff feb7 	bl	80047d0 <_free_r>
 8004a62:	230c      	movs	r3, #12
 8004a64:	f8ca 3000 	str.w	r3, [sl]
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e7e9      	b.n	8004a4a <__ssputs_r+0x8a>
	...

08004a78 <_svfiprintf_r>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	4698      	mov	r8, r3
 8004a7e:	898b      	ldrh	r3, [r1, #12]
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	b09d      	sub	sp, #116	@ 0x74
 8004a84:	4607      	mov	r7, r0
 8004a86:	460d      	mov	r5, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	d510      	bpl.n	8004aae <_svfiprintf_r+0x36>
 8004a8c:	690b      	ldr	r3, [r1, #16]
 8004a8e:	b973      	cbnz	r3, 8004aae <_svfiprintf_r+0x36>
 8004a90:	2140      	movs	r1, #64	@ 0x40
 8004a92:	f7ff ff09 	bl	80048a8 <_malloc_r>
 8004a96:	6028      	str	r0, [r5, #0]
 8004a98:	6128      	str	r0, [r5, #16]
 8004a9a:	b930      	cbnz	r0, 8004aaa <_svfiprintf_r+0x32>
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	b01d      	add	sp, #116	@ 0x74
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aaa:	2340      	movs	r3, #64	@ 0x40
 8004aac:	616b      	str	r3, [r5, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004abc:	2330      	movs	r3, #48	@ 0x30
 8004abe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c5c <_svfiprintf_r+0x1e4>
 8004ac2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ac6:	f04f 0901 	mov.w	r9, #1
 8004aca:	4623      	mov	r3, r4
 8004acc:	469a      	mov	sl, r3
 8004ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad2:	b10a      	cbz	r2, 8004ad8 <_svfiprintf_r+0x60>
 8004ad4:	2a25      	cmp	r2, #37	@ 0x25
 8004ad6:	d1f9      	bne.n	8004acc <_svfiprintf_r+0x54>
 8004ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8004adc:	d00b      	beq.n	8004af6 <_svfiprintf_r+0x7e>
 8004ade:	465b      	mov	r3, fp
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7ff ff6b 	bl	80049c0 <__ssputs_r>
 8004aea:	3001      	adds	r0, #1
 8004aec:	f000 80a7 	beq.w	8004c3e <_svfiprintf_r+0x1c6>
 8004af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004af2:	445a      	add	r2, fp
 8004af4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004af6:	f89a 3000 	ldrb.w	r3, [sl]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 809f 	beq.w	8004c3e <_svfiprintf_r+0x1c6>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b0a:	f10a 0a01 	add.w	sl, sl, #1
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b18:	4654      	mov	r4, sl
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b20:	484e      	ldr	r0, [pc, #312]	@ (8004c5c <_svfiprintf_r+0x1e4>)
 8004b22:	f7fb fb75 	bl	8000210 <memchr>
 8004b26:	9a04      	ldr	r2, [sp, #16]
 8004b28:	b9d8      	cbnz	r0, 8004b62 <_svfiprintf_r+0xea>
 8004b2a:	06d0      	lsls	r0, r2, #27
 8004b2c:	bf44      	itt	mi
 8004b2e:	2320      	movmi	r3, #32
 8004b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b34:	0711      	lsls	r1, r2, #28
 8004b36:	bf44      	itt	mi
 8004b38:	232b      	movmi	r3, #43	@ 0x2b
 8004b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b44:	d015      	beq.n	8004b72 <_svfiprintf_r+0xfa>
 8004b46:	9a07      	ldr	r2, [sp, #28]
 8004b48:	4654      	mov	r4, sl
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f04f 0c0a 	mov.w	ip, #10
 8004b50:	4621      	mov	r1, r4
 8004b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b56:	3b30      	subs	r3, #48	@ 0x30
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d94b      	bls.n	8004bf4 <_svfiprintf_r+0x17c>
 8004b5c:	b1b0      	cbz	r0, 8004b8c <_svfiprintf_r+0x114>
 8004b5e:	9207      	str	r2, [sp, #28]
 8004b60:	e014      	b.n	8004b8c <_svfiprintf_r+0x114>
 8004b62:	eba0 0308 	sub.w	r3, r0, r8
 8004b66:	fa09 f303 	lsl.w	r3, r9, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	46a2      	mov	sl, r4
 8004b70:	e7d2      	b.n	8004b18 <_svfiprintf_r+0xa0>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9103      	str	r1, [sp, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfbb      	ittet	lt
 8004b7e:	425b      	neglt	r3, r3
 8004b80:	f042 0202 	orrlt.w	r2, r2, #2
 8004b84:	9307      	strge	r3, [sp, #28]
 8004b86:	9307      	strlt	r3, [sp, #28]
 8004b88:	bfb8      	it	lt
 8004b8a:	9204      	strlt	r2, [sp, #16]
 8004b8c:	7823      	ldrb	r3, [r4, #0]
 8004b8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b90:	d10a      	bne.n	8004ba8 <_svfiprintf_r+0x130>
 8004b92:	7863      	ldrb	r3, [r4, #1]
 8004b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b96:	d132      	bne.n	8004bfe <_svfiprintf_r+0x186>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	9203      	str	r2, [sp, #12]
 8004ba0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ba4:	3402      	adds	r4, #2
 8004ba6:	9305      	str	r3, [sp, #20]
 8004ba8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c6c <_svfiprintf_r+0x1f4>
 8004bac:	7821      	ldrb	r1, [r4, #0]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	f7fb fb2d 	bl	8000210 <memchr>
 8004bb6:	b138      	cbz	r0, 8004bc8 <_svfiprintf_r+0x150>
 8004bb8:	9b04      	ldr	r3, [sp, #16]
 8004bba:	eba0 000a 	sub.w	r0, r0, sl
 8004bbe:	2240      	movs	r2, #64	@ 0x40
 8004bc0:	4082      	lsls	r2, r0
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	3401      	adds	r4, #1
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	4824      	ldr	r0, [pc, #144]	@ (8004c60 <_svfiprintf_r+0x1e8>)
 8004bce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bd2:	2206      	movs	r2, #6
 8004bd4:	f7fb fb1c 	bl	8000210 <memchr>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d036      	beq.n	8004c4a <_svfiprintf_r+0x1d2>
 8004bdc:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <_svfiprintf_r+0x1ec>)
 8004bde:	bb1b      	cbnz	r3, 8004c28 <_svfiprintf_r+0x1b0>
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	3307      	adds	r3, #7
 8004be4:	f023 0307 	bic.w	r3, r3, #7
 8004be8:	3308      	adds	r3, #8
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bee:	4433      	add	r3, r6
 8004bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bf2:	e76a      	b.n	8004aca <_svfiprintf_r+0x52>
 8004bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	e7a8      	b.n	8004b50 <_svfiprintf_r+0xd8>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	3401      	adds	r4, #1
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c10:	3a30      	subs	r2, #48	@ 0x30
 8004c12:	2a09      	cmp	r2, #9
 8004c14:	d903      	bls.n	8004c1e <_svfiprintf_r+0x1a6>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0c6      	beq.n	8004ba8 <_svfiprintf_r+0x130>
 8004c1a:	9105      	str	r1, [sp, #20]
 8004c1c:	e7c4      	b.n	8004ba8 <_svfiprintf_r+0x130>
 8004c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c22:	4604      	mov	r4, r0
 8004c24:	2301      	movs	r3, #1
 8004c26:	e7f0      	b.n	8004c0a <_svfiprintf_r+0x192>
 8004c28:	ab03      	add	r3, sp, #12
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <_svfiprintf_r+0x1f0>)
 8004c30:	a904      	add	r1, sp, #16
 8004c32:	4638      	mov	r0, r7
 8004c34:	f3af 8000 	nop.w
 8004c38:	1c42      	adds	r2, r0, #1
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	d1d6      	bne.n	8004bec <_svfiprintf_r+0x174>
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	065b      	lsls	r3, r3, #25
 8004c42:	f53f af2d 	bmi.w	8004aa0 <_svfiprintf_r+0x28>
 8004c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c48:	e72c      	b.n	8004aa4 <_svfiprintf_r+0x2c>
 8004c4a:	ab03      	add	r3, sp, #12
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	462a      	mov	r2, r5
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <_svfiprintf_r+0x1f0>)
 8004c52:	a904      	add	r1, sp, #16
 8004c54:	4638      	mov	r0, r7
 8004c56:	f000 f879 	bl	8004d4c <_printf_i>
 8004c5a:	e7ed      	b.n	8004c38 <_svfiprintf_r+0x1c0>
 8004c5c:	08005834 	.word	0x08005834
 8004c60:	0800583e 	.word	0x0800583e
 8004c64:	00000000 	.word	0x00000000
 8004c68:	080049c1 	.word	0x080049c1
 8004c6c:	0800583a 	.word	0x0800583a

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4616      	mov	r6, r2
 8004c76:	4698      	mov	r8, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bfb8      	it	lt
 8004c84:	4613      	movlt	r3, r2
 8004c86:	6033      	str	r3, [r6, #0]
 8004c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	b10a      	cbz	r2, 8004c96 <_printf_common+0x26>
 8004c92:	3301      	adds	r3, #1
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	0699      	lsls	r1, r3, #26
 8004c9a:	bf42      	ittt	mi
 8004c9c:	6833      	ldrmi	r3, [r6, #0]
 8004c9e:	3302      	addmi	r3, #2
 8004ca0:	6033      	strmi	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	f015 0506 	ands.w	r5, r5, #6
 8004ca8:	d106      	bne.n	8004cb8 <_printf_common+0x48>
 8004caa:	f104 0a19 	add.w	sl, r4, #25
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	6832      	ldr	r2, [r6, #0]
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dc26      	bgt.n	8004d06 <_printf_common+0x96>
 8004cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	3b00      	subs	r3, #0
 8004cc0:	bf18      	it	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	0692      	lsls	r2, r2, #26
 8004cc6:	d42b      	bmi.n	8004d20 <_printf_common+0xb0>
 8004cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ccc:	4641      	mov	r1, r8
 8004cce:	4638      	mov	r0, r7
 8004cd0:	47c8      	blx	r9
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d01e      	beq.n	8004d14 <_printf_common+0xa4>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	6922      	ldr	r2, [r4, #16]
 8004cda:	f003 0306 	and.w	r3, r3, #6
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf02      	ittt	eq
 8004ce2:	68e5      	ldreq	r5, [r4, #12]
 8004ce4:	6833      	ldreq	r3, [r6, #0]
 8004ce6:	1aed      	subeq	r5, r5, r3
 8004ce8:	68a3      	ldr	r3, [r4, #8]
 8004cea:	bf0c      	ite	eq
 8004cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf0:	2500      	movne	r5, #0
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	bfc4      	itt	gt
 8004cf6:	1a9b      	subgt	r3, r3, r2
 8004cf8:	18ed      	addgt	r5, r5, r3
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	341a      	adds	r4, #26
 8004cfe:	42b5      	cmp	r5, r6
 8004d00:	d11a      	bne.n	8004d38 <_printf_common+0xc8>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e008      	b.n	8004d18 <_printf_common+0xa8>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	47c8      	blx	r9
 8004d10:	3001      	adds	r0, #1
 8004d12:	d103      	bne.n	8004d1c <_printf_common+0xac>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	3501      	adds	r5, #1
 8004d1e:	e7c6      	b.n	8004cae <_printf_common+0x3e>
 8004d20:	18e1      	adds	r1, r4, r3
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	2030      	movs	r0, #48	@ 0x30
 8004d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d2a:	4422      	add	r2, r4
 8004d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d34:	3302      	adds	r3, #2
 8004d36:	e7c7      	b.n	8004cc8 <_printf_common+0x58>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c8      	blx	r9
 8004d42:	3001      	adds	r0, #1
 8004d44:	d0e6      	beq.n	8004d14 <_printf_common+0xa4>
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7d9      	b.n	8004cfe <_printf_common+0x8e>
	...

08004d4c <_printf_i>:
 8004d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	7e0f      	ldrb	r7, [r1, #24]
 8004d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d54:	2f78      	cmp	r7, #120	@ 0x78
 8004d56:	4691      	mov	r9, r2
 8004d58:	4680      	mov	r8, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	469a      	mov	sl, r3
 8004d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d62:	d807      	bhi.n	8004d74 <_printf_i+0x28>
 8004d64:	2f62      	cmp	r7, #98	@ 0x62
 8004d66:	d80a      	bhi.n	8004d7e <_printf_i+0x32>
 8004d68:	2f00      	cmp	r7, #0
 8004d6a:	f000 80d2 	beq.w	8004f12 <_printf_i+0x1c6>
 8004d6e:	2f58      	cmp	r7, #88	@ 0x58
 8004d70:	f000 80b9 	beq.w	8004ee6 <_printf_i+0x19a>
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d7c:	e03a      	b.n	8004df4 <_printf_i+0xa8>
 8004d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d82:	2b15      	cmp	r3, #21
 8004d84:	d8f6      	bhi.n	8004d74 <_printf_i+0x28>
 8004d86:	a101      	add	r1, pc, #4	@ (adr r1, 8004d8c <_printf_i+0x40>)
 8004d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004df9 	.word	0x08004df9
 8004d94:	08004d75 	.word	0x08004d75
 8004d98:	08004d75 	.word	0x08004d75
 8004d9c:	08004d75 	.word	0x08004d75
 8004da0:	08004d75 	.word	0x08004d75
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004d75 	.word	0x08004d75
 8004dac:	08004d75 	.word	0x08004d75
 8004db0:	08004d75 	.word	0x08004d75
 8004db4:	08004d75 	.word	0x08004d75
 8004db8:	08004ef9 	.word	0x08004ef9
 8004dbc:	08004e23 	.word	0x08004e23
 8004dc0:	08004eb3 	.word	0x08004eb3
 8004dc4:	08004d75 	.word	0x08004d75
 8004dc8:	08004d75 	.word	0x08004d75
 8004dcc:	08004f1b 	.word	0x08004f1b
 8004dd0:	08004d75 	.word	0x08004d75
 8004dd4:	08004e23 	.word	0x08004e23
 8004dd8:	08004d75 	.word	0x08004d75
 8004ddc:	08004d75 	.word	0x08004d75
 8004de0:	08004ebb 	.word	0x08004ebb
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6032      	str	r2, [r6, #0]
 8004dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004df4:	2301      	movs	r3, #1
 8004df6:	e09d      	b.n	8004f34 <_printf_i+0x1e8>
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	6820      	ldr	r0, [r4, #0]
 8004dfc:	1d19      	adds	r1, r3, #4
 8004dfe:	6031      	str	r1, [r6, #0]
 8004e00:	0606      	lsls	r6, r0, #24
 8004e02:	d501      	bpl.n	8004e08 <_printf_i+0xbc>
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	e003      	b.n	8004e10 <_printf_i+0xc4>
 8004e08:	0645      	lsls	r5, r0, #25
 8004e0a:	d5fb      	bpl.n	8004e04 <_printf_i+0xb8>
 8004e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	da03      	bge.n	8004e1c <_printf_i+0xd0>
 8004e14:	232d      	movs	r3, #45	@ 0x2d
 8004e16:	426d      	negs	r5, r5
 8004e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e1c:	4859      	ldr	r0, [pc, #356]	@ (8004f84 <_printf_i+0x238>)
 8004e1e:	230a      	movs	r3, #10
 8004e20:	e011      	b.n	8004e46 <_printf_i+0xfa>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	6833      	ldr	r3, [r6, #0]
 8004e26:	0608      	lsls	r0, r1, #24
 8004e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e2c:	d402      	bmi.n	8004e34 <_printf_i+0xe8>
 8004e2e:	0649      	lsls	r1, r1, #25
 8004e30:	bf48      	it	mi
 8004e32:	b2ad      	uxthmi	r5, r5
 8004e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e36:	4853      	ldr	r0, [pc, #332]	@ (8004f84 <_printf_i+0x238>)
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	bf14      	ite	ne
 8004e3c:	230a      	movne	r3, #10
 8004e3e:	2308      	moveq	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e46:	6866      	ldr	r6, [r4, #4]
 8004e48:	60a6      	str	r6, [r4, #8]
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	bfa2      	ittt	ge
 8004e4e:	6821      	ldrge	r1, [r4, #0]
 8004e50:	f021 0104 	bicge.w	r1, r1, #4
 8004e54:	6021      	strge	r1, [r4, #0]
 8004e56:	b90d      	cbnz	r5, 8004e5c <_printf_i+0x110>
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d04b      	beq.n	8004ef4 <_printf_i+0x1a8>
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e62:	fb03 5711 	mls	r7, r3, r1, r5
 8004e66:	5dc7      	ldrb	r7, [r0, r7]
 8004e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e6c:	462f      	mov	r7, r5
 8004e6e:	42bb      	cmp	r3, r7
 8004e70:	460d      	mov	r5, r1
 8004e72:	d9f4      	bls.n	8004e5e <_printf_i+0x112>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d10b      	bne.n	8004e90 <_printf_i+0x144>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07df      	lsls	r7, r3, #31
 8004e7c:	d508      	bpl.n	8004e90 <_printf_i+0x144>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	6861      	ldr	r1, [r4, #4]
 8004e82:	4299      	cmp	r1, r3
 8004e84:	bfde      	ittt	le
 8004e86:	2330      	movle	r3, #48	@ 0x30
 8004e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e90:	1b92      	subs	r2, r2, r6
 8004e92:	6122      	str	r2, [r4, #16]
 8004e94:	f8cd a000 	str.w	sl, [sp]
 8004e98:	464b      	mov	r3, r9
 8004e9a:	aa03      	add	r2, sp, #12
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f7ff fee6 	bl	8004c70 <_printf_common>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d14a      	bne.n	8004f3e <_printf_i+0x1f2>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b004      	add	sp, #16
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f043 0320 	orr.w	r3, r3, #32
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	4833      	ldr	r0, [pc, #204]	@ (8004f88 <_printf_i+0x23c>)
 8004ebc:	2778      	movs	r7, #120	@ 0x78
 8004ebe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	6831      	ldr	r1, [r6, #0]
 8004ec6:	061f      	lsls	r7, r3, #24
 8004ec8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ecc:	d402      	bmi.n	8004ed4 <_printf_i+0x188>
 8004ece:	065f      	lsls	r7, r3, #25
 8004ed0:	bf48      	it	mi
 8004ed2:	b2ad      	uxthmi	r5, r5
 8004ed4:	6031      	str	r1, [r6, #0]
 8004ed6:	07d9      	lsls	r1, r3, #31
 8004ed8:	bf44      	itt	mi
 8004eda:	f043 0320 	orrmi.w	r3, r3, #32
 8004ede:	6023      	strmi	r3, [r4, #0]
 8004ee0:	b11d      	cbz	r5, 8004eea <_printf_i+0x19e>
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	e7ac      	b.n	8004e40 <_printf_i+0xf4>
 8004ee6:	4827      	ldr	r0, [pc, #156]	@ (8004f84 <_printf_i+0x238>)
 8004ee8:	e7e9      	b.n	8004ebe <_printf_i+0x172>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	e7f6      	b.n	8004ee2 <_printf_i+0x196>
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	e7bd      	b.n	8004e74 <_printf_i+0x128>
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	6961      	ldr	r1, [r4, #20]
 8004efe:	1d18      	adds	r0, r3, #4
 8004f00:	6030      	str	r0, [r6, #0]
 8004f02:	062e      	lsls	r6, r5, #24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0x1c0>
 8004f08:	6019      	str	r1, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0x1c6>
 8004f0c:	0668      	lsls	r0, r5, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0x1bc>
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	4616      	mov	r6, r2
 8004f18:	e7bc      	b.n	8004e94 <_printf_i+0x148>
 8004f1a:	6833      	ldr	r3, [r6, #0]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	6032      	str	r2, [r6, #0]
 8004f20:	681e      	ldr	r6, [r3, #0]
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7fb f972 	bl	8000210 <memchr>
 8004f2c:	b108      	cbz	r0, 8004f32 <_printf_i+0x1e6>
 8004f2e:	1b80      	subs	r0, r0, r6
 8004f30:	6060      	str	r0, [r4, #4]
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f3c:	e7aa      	b.n	8004e94 <_printf_i+0x148>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	4632      	mov	r2, r6
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0ad      	beq.n	8004ea8 <_printf_i+0x15c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	079b      	lsls	r3, r3, #30
 8004f50:	d413      	bmi.n	8004f7a <_printf_i+0x22e>
 8004f52:	68e0      	ldr	r0, [r4, #12]
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	4298      	cmp	r0, r3
 8004f58:	bfb8      	it	lt
 8004f5a:	4618      	movlt	r0, r3
 8004f5c:	e7a6      	b.n	8004eac <_printf_i+0x160>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4632      	mov	r2, r6
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d09d      	beq.n	8004ea8 <_printf_i+0x15c>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dcf2      	bgt.n	8004f5e <_printf_i+0x212>
 8004f78:	e7eb      	b.n	8004f52 <_printf_i+0x206>
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	f104 0619 	add.w	r6, r4, #25
 8004f80:	e7f5      	b.n	8004f6e <_printf_i+0x222>
 8004f82:	bf00      	nop
 8004f84:	08005845 	.word	0x08005845
 8004f88:	08005856 	.word	0x08005856

08004f8c <memmove>:
 8004f8c:	4288      	cmp	r0, r1
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	eb01 0402 	add.w	r4, r1, r2
 8004f94:	d902      	bls.n	8004f9c <memmove+0x10>
 8004f96:	4284      	cmp	r4, r0
 8004f98:	4623      	mov	r3, r4
 8004f9a:	d807      	bhi.n	8004fac <memmove+0x20>
 8004f9c:	1e43      	subs	r3, r0, #1
 8004f9e:	42a1      	cmp	r1, r4
 8004fa0:	d008      	beq.n	8004fb4 <memmove+0x28>
 8004fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004faa:	e7f8      	b.n	8004f9e <memmove+0x12>
 8004fac:	4402      	add	r2, r0
 8004fae:	4601      	mov	r1, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d100      	bne.n	8004fb6 <memmove+0x2a>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fbe:	e7f7      	b.n	8004fb0 <memmove+0x24>

08004fc0 <_sbrk_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d06      	ldr	r5, [pc, #24]	@ (8004fdc <_sbrk_r+0x1c>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	f7fc f81e 	bl	800100c <_sbrk>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_sbrk_r+0x1a>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_sbrk_r+0x1a>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	200006ac 	.word	0x200006ac

08004fe0 <memcpy>:
 8004fe0:	440a      	add	r2, r1
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe8:	d100      	bne.n	8004fec <memcpy+0xc>
 8004fea:	4770      	bx	lr
 8004fec:	b510      	push	{r4, lr}
 8004fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d1f9      	bne.n	8004fee <memcpy+0xe>
 8004ffa:	bd10      	pop	{r4, pc}

08004ffc <_realloc_r>:
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	4680      	mov	r8, r0
 8005002:	4615      	mov	r5, r2
 8005004:	460c      	mov	r4, r1
 8005006:	b921      	cbnz	r1, 8005012 <_realloc_r+0x16>
 8005008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500c:	4611      	mov	r1, r2
 800500e:	f7ff bc4b 	b.w	80048a8 <_malloc_r>
 8005012:	b92a      	cbnz	r2, 8005020 <_realloc_r+0x24>
 8005014:	f7ff fbdc 	bl	80047d0 <_free_r>
 8005018:	2400      	movs	r4, #0
 800501a:	4620      	mov	r0, r4
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005020:	f000 f81a 	bl	8005058 <_malloc_usable_size_r>
 8005024:	4285      	cmp	r5, r0
 8005026:	4606      	mov	r6, r0
 8005028:	d802      	bhi.n	8005030 <_realloc_r+0x34>
 800502a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800502e:	d8f4      	bhi.n	800501a <_realloc_r+0x1e>
 8005030:	4629      	mov	r1, r5
 8005032:	4640      	mov	r0, r8
 8005034:	f7ff fc38 	bl	80048a8 <_malloc_r>
 8005038:	4607      	mov	r7, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d0ec      	beq.n	8005018 <_realloc_r+0x1c>
 800503e:	42b5      	cmp	r5, r6
 8005040:	462a      	mov	r2, r5
 8005042:	4621      	mov	r1, r4
 8005044:	bf28      	it	cs
 8005046:	4632      	movcs	r2, r6
 8005048:	f7ff ffca 	bl	8004fe0 <memcpy>
 800504c:	4621      	mov	r1, r4
 800504e:	4640      	mov	r0, r8
 8005050:	f7ff fbbe 	bl	80047d0 <_free_r>
 8005054:	463c      	mov	r4, r7
 8005056:	e7e0      	b.n	800501a <_realloc_r+0x1e>

08005058 <_malloc_usable_size_r>:
 8005058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505c:	1f18      	subs	r0, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	bfbc      	itt	lt
 8005062:	580b      	ldrlt	r3, [r1, r0]
 8005064:	18c0      	addlt	r0, r0, r3
 8005066:	4770      	bx	lr

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
