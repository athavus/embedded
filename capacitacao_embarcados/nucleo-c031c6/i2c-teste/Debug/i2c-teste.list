
i2c-teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da8  08002670  08002670  00003670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003418  08003418  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003418  08003418  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003418  08003418  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003418  08003418  00004418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800341c  0800341c  0000441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003420  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08003434  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08003434  00005490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080d7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adb  00000000  00000000  0000d113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063b  00000000  00000000  0000f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001300c  00000000  00000000  0000fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b895  00000000  00000000  00022a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072bb9  00000000  00000000  0002e304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0ebd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c40  00000000  00000000  000a0f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000a2b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002658 	.word	0x08002658

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002658 	.word	0x08002658

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  HAL_Init();
 8000224:	f000 fd00 	bl	8000c28 <HAL_Init>

  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>

  MX_GPIO_Init();
 800022c:	f000 f896 	bl	800035c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f854 	bl	80002dc <MX_I2C1_Init>

  SSD1306_Init ();
 8000234:	f000 fa06 	bl	8000644 <SSD1306_Init>
  SSD1306_Clear();
 8000238:	f000 fc44 	bl	8000ac4 <SSD1306_Clear>

  SSD1306_GotoXY (20,20);
 800023c:	2114      	movs	r1, #20
 800023e:	2014      	movs	r0, #20
 8000240:	f000 fb80 	bl	8000944 <SSD1306_GotoXY>
  SSD1306_Puts ("VIRTUS-CC", &Font_11x18, 1);
 8000244:	4904      	ldr	r1, [pc, #16]	@ (8000258 <main+0x38>)
 8000246:	4b05      	ldr	r3, [pc, #20]	@ (800025c <main+0x3c>)
 8000248:	2201      	movs	r2, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fc14 	bl	8000a78 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000250:	f000 fabc 	bl	80007cc <SSD1306_UpdateScreen>

  while (1)
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7fd      	b.n	8000254 <main+0x34>
 8000258:	20000004 	.word	0x20000004
 800025c:	08002670 	.word	0x08002670

08000260 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	@ 0x34
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	231c      	movs	r3, #28
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f9c5 	bl	8002600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 f9be 	bl	8002600 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2201      	movs	r2, #1
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	0252      	lsls	r2, r2, #9
 8000290:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	193b      	adds	r3, r7, r4
 8000294:	0018      	movs	r0, r3
 8000296:	f001 fd8b 	bl	8001db0 <HAL_RCC_OscConfig>
 800029a:	1e03      	subs	r3, r0, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800029e:	f000 f8eb 	bl	8000478 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	003b      	movs	r3, r7
 80002a4:	2207      	movs	r2, #7
 80002a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002a8:	003b      	movs	r3, r7
 80002aa:	2201      	movs	r2, #1
 80002ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	003b      	movs	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c0:	003b      	movs	r3, r7
 80002c2:	2101      	movs	r1, #1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 ff57 	bl	8002178 <HAL_RCC_ClockConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ce:	f000 f8d3 	bl	8000478 <Error_Handler>
  }
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b00d      	add	sp, #52	@ 0x34
 80002d8:	bd90      	pop	{r4, r7, pc}
	...

080002dc <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000318:	0018      	movs	r0, r3
 800031a:	f000 ffaf 	bl	800127c <HAL_I2C_Init>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f8a9 	bl	8000478 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fca8 	bl	8001c80 <HAL_I2CEx_ConfigAnalogFilter>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8a0 	bl	8000478 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <MX_I2C1_Init+0x74>)
 800033a:	2100      	movs	r1, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fceb 	bl	8001d18 <HAL_I2CEx_ConfigDigitalFilter>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f897 	bl	8000478 <Error_Handler>
  }
}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000030 	.word	0x20000030
 8000354:	40005400 	.word	0x40005400
 8000358:	10805d88 	.word	0x10805d88

0800035c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b08b      	sub	sp, #44	@ 0x2c
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	2414      	movs	r4, #20
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	2314      	movs	r3, #20
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 f947 	bl	8002600 <memset>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	4b3e      	ldr	r3, [pc, #248]	@ (800046c <MX_GPIO_Init+0x110>)
 8000374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000376:	4b3d      	ldr	r3, [pc, #244]	@ (800046c <MX_GPIO_Init+0x110>)
 8000378:	2104      	movs	r1, #4
 800037a:	430a      	orrs	r2, r1
 800037c:	635a      	str	r2, [r3, #52]	@ 0x34
 800037e:	4b3b      	ldr	r3, [pc, #236]	@ (800046c <MX_GPIO_Init+0x110>)
 8000380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000382:	2204      	movs	r2, #4
 8000384:	4013      	ands	r3, r2
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b38      	ldr	r3, [pc, #224]	@ (800046c <MX_GPIO_Init+0x110>)
 800038c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800038e:	4b37      	ldr	r3, [pc, #220]	@ (800046c <MX_GPIO_Init+0x110>)
 8000390:	2120      	movs	r1, #32
 8000392:	430a      	orrs	r2, r1
 8000394:	635a      	str	r2, [r3, #52]	@ 0x34
 8000396:	4b35      	ldr	r3, [pc, #212]	@ (800046c <MX_GPIO_Init+0x110>)
 8000398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800039a:	2220      	movs	r2, #32
 800039c:	4013      	ands	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b32      	ldr	r3, [pc, #200]	@ (800046c <MX_GPIO_Init+0x110>)
 80003a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003a6:	4b31      	ldr	r3, [pc, #196]	@ (800046c <MX_GPIO_Init+0x110>)
 80003a8:	2101      	movs	r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ae:	4b2f      	ldr	r3, [pc, #188]	@ (800046c <MX_GPIO_Init+0x110>)
 80003b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003b2:	2201      	movs	r2, #1
 80003b4:	4013      	ands	r3, r2
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b2c      	ldr	r3, [pc, #176]	@ (800046c <MX_GPIO_Init+0x110>)
 80003bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003be:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <MX_GPIO_Init+0x110>)
 80003c0:	2102      	movs	r1, #2
 80003c2:	430a      	orrs	r2, r1
 80003c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80003c6:	4b29      	ldr	r3, [pc, #164]	@ (800046c <MX_GPIO_Init+0x110>)
 80003c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003ca:	2202      	movs	r2, #2
 80003cc:	4013      	ands	r3, r2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 80003d2:	23a0      	movs	r3, #160	@ 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	2201      	movs	r2, #1
 80003d8:	2120      	movs	r1, #32
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fef2 	bl	80011c4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = User_Button_Pin;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2280      	movs	r2, #128	@ 0x80
 80003e4:	0192      	lsls	r2, r2, #6
 80003e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <MX_GPIO_Init+0x114>)
 80003ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000474 <MX_GPIO_Init+0x118>)
 80003f8:	0019      	movs	r1, r3
 80003fa:	0010      	movs	r0, r2
 80003fc:	f000 fd70 	bl	8000ee0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VCP_USART2_TX_Pin|VCP_USART2_RX_Pin;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	220c      	movs	r2, #12
 8000404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2202      	movs	r2, #2
 800040a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000418:	193b      	adds	r3, r7, r4
 800041a:	2201      	movs	r2, #1
 800041c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	193a      	adds	r2, r7, r4
 8000420:	23a0      	movs	r3, #160	@ 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	0011      	movs	r1, r2
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fd5a 	bl	8000ee0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Led_Pin;
 800042c:	0021      	movs	r1, r4
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2220      	movs	r2, #32
 8000432:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2201      	movs	r2, #1
 8000438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2203      	movs	r2, #3
 8000444:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000446:	187a      	adds	r2, r7, r1
 8000448:	23a0      	movs	r3, #160	@ 0xa0
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	0011      	movs	r1, r2
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fd46 	bl	8000ee0 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2007      	movs	r0, #7
 800045a:	f000 fd0f 	bl	8000e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800045e:	2007      	movs	r0, #7
 8000460:	f000 fd21 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

}
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b00b      	add	sp, #44	@ 0x2c
 800046a:	bd90      	pop	{r4, r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	10110000 	.word	0x10110000
 8000474:	50000800 	.word	0x50000800

08000478 <Error_Handler>:

void Error_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	641a      	str	r2, [r3, #64]	@ 0x40
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b091      	sub	sp, #68	@ 0x44
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	232c      	movs	r3, #44	@ 0x2c
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 f88e 	bl	8002600 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	2410      	movs	r4, #16
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	231c      	movs	r3, #28
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 f886 	bl	8002600 <memset>
  if(hi2c->Instance==I2C1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a22      	ldr	r2, [pc, #136]	@ (8000584 <HAL_I2C_MspInit+0xb8>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d13e      	bne.n	800057c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2202      	movs	r2, #2
 8000502:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0018      	movs	r0, r3
 800050e:	f001 ff8b 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000516:	f7ff ffaf 	bl	8000478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 8000520:	2102      	movs	r1, #2
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2202      	movs	r2, #2
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000532:	212c      	movs	r1, #44	@ 0x2c
 8000534:	187b      	adds	r3, r7, r1
 8000536:	22c0      	movs	r2, #192	@ 0xc0
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2212      	movs	r2, #18
 8000540:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2206      	movs	r2, #6
 8000552:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	187b      	adds	r3, r7, r1
 8000556:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <HAL_I2C_MspInit+0xc0>)
 8000558:	0019      	movs	r1, r3
 800055a:	0010      	movs	r0, r2
 800055c:	f000 fcc0 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 8000562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	0389      	lsls	r1, r1, #14
 800056a:	430a      	orrs	r2, r1
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <HAL_I2C_MspInit+0xbc>)
 8000570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000572:	2380      	movs	r3, #128	@ 0x80
 8000574:	039b      	lsls	r3, r3, #14
 8000576:	4013      	ands	r3, r2
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b011      	add	sp, #68	@ 0x44
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	40005400 	.word	0x40005400
 8000588:	40021000 	.word	0x40021000
 800058c:	50000400 	.word	0x50000400

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	e7fd      	b.n	8000594 <NMI_Handler+0x4>

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	e7fd      	b.n	800059c <HardFault_Handler+0x4>

080005a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 fb98 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80005c6:	2380      	movs	r3, #128	@ 0x80
 80005c8:	019b      	lsls	r3, r3, #6
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fe18 	bl	8001200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <SystemInit+0x14>)
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	609a      	str	r2, [r3, #8]
#endif
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	@ (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f7ff fff0 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005fa:	e003      	b.n	8000604 <LoopCopyDataInit>

080005fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80005fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000600:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000602:	3104      	adds	r1, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <LoopForever+0xa>)
  ldr r3, =_edata
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <LoopForever+0xe>)
  adds r2, r0, r1
 8000608:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800060c:	d3f6      	bcc.n	80005fc <CopyDataInit>
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <LoopForever+0x12>)
  b LoopFillZerobss
 8000610:	e002      	b.n	8000618 <LoopFillZerobss>

08000612 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  str  r3, [r2]
 8000614:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000616:	3204      	adds	r2, #4

08000618 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <LoopForever+0x16>)
  cmp r2, r3
 800061a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800061c:	d3f9      	bcc.n	8000612 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800061e:	f001 fff7 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdfd 	bl	8000220 <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800062c:	08003420 	.word	0x08003420
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000634:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000638:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800063c:	20000490 	.word	0x20000490

08000640 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_IRQHandler>
	...

08000644 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800064a:	f000 fa45 	bl	8000ad8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800064e:	4b5b      	ldr	r3, [pc, #364]	@ (80007bc <SSD1306_Init+0x178>)
 8000650:	485b      	ldr	r0, [pc, #364]	@ (80007c0 <SSD1306_Init+0x17c>)
 8000652:	2201      	movs	r2, #1
 8000654:	2178      	movs	r1, #120	@ 0x78
 8000656:	f000 ffe1 	bl	800161c <HAL_I2C_IsDeviceReady>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e0a8      	b.n	80007b4 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000662:	4b58      	ldr	r3, [pc, #352]	@ (80007c4 <SSD1306_Init+0x180>)
 8000664:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000666:	e002      	b.n	800066e <SSD1306_Init+0x2a>
		p--;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f9      	bne.n	8000668 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000674:	22ae      	movs	r2, #174	@ 0xae
 8000676:	2100      	movs	r1, #0
 8000678:	2078      	movs	r0, #120	@ 0x78
 800067a:	f000 faad 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800067e:	2220      	movs	r2, #32
 8000680:	2100      	movs	r1, #0
 8000682:	2078      	movs	r0, #120	@ 0x78
 8000684:	f000 faa8 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000688:	2210      	movs	r2, #16
 800068a:	2100      	movs	r1, #0
 800068c:	2078      	movs	r0, #120	@ 0x78
 800068e:	f000 faa3 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000692:	22b0      	movs	r2, #176	@ 0xb0
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	@ 0x78
 8000698:	f000 fa9e 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800069c:	22c8      	movs	r2, #200	@ 0xc8
 800069e:	2100      	movs	r1, #0
 80006a0:	2078      	movs	r0, #120	@ 0x78
 80006a2:	f000 fa99 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2078      	movs	r0, #120	@ 0x78
 80006ac:	f000 fa94 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80006b0:	2210      	movs	r2, #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	2078      	movs	r0, #120	@ 0x78
 80006b6:	f000 fa8f 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80006ba:	2240      	movs	r2, #64	@ 0x40
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	@ 0x78
 80006c0:	f000 fa8a 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006c4:	2281      	movs	r2, #129	@ 0x81
 80006c6:	2100      	movs	r1, #0
 80006c8:	2078      	movs	r0, #120	@ 0x78
 80006ca:	f000 fa85 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006ce:	22ff      	movs	r2, #255	@ 0xff
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	@ 0x78
 80006d4:	f000 fa80 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006d8:	22a1      	movs	r2, #161	@ 0xa1
 80006da:	2100      	movs	r1, #0
 80006dc:	2078      	movs	r0, #120	@ 0x78
 80006de:	f000 fa7b 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006e2:	22a6      	movs	r2, #166	@ 0xa6
 80006e4:	2100      	movs	r1, #0
 80006e6:	2078      	movs	r0, #120	@ 0x78
 80006e8:	f000 fa76 	bl	8000bd8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006ec:	22a8      	movs	r2, #168	@ 0xa8
 80006ee:	2100      	movs	r1, #0
 80006f0:	2078      	movs	r0, #120	@ 0x78
 80006f2:	f000 fa71 	bl	8000bd8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80006f6:	223f      	movs	r2, #63	@ 0x3f
 80006f8:	2100      	movs	r1, #0
 80006fa:	2078      	movs	r0, #120	@ 0x78
 80006fc:	f000 fa6c 	bl	8000bd8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000700:	22a4      	movs	r2, #164	@ 0xa4
 8000702:	2100      	movs	r1, #0
 8000704:	2078      	movs	r0, #120	@ 0x78
 8000706:	f000 fa67 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800070a:	22d3      	movs	r2, #211	@ 0xd3
 800070c:	2100      	movs	r1, #0
 800070e:	2078      	movs	r0, #120	@ 0x78
 8000710:	f000 fa62 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2078      	movs	r0, #120	@ 0x78
 800071a:	f000 fa5d 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800071e:	22d5      	movs	r2, #213	@ 0xd5
 8000720:	2100      	movs	r1, #0
 8000722:	2078      	movs	r0, #120	@ 0x78
 8000724:	f000 fa58 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000728:	22f0      	movs	r2, #240	@ 0xf0
 800072a:	2100      	movs	r1, #0
 800072c:	2078      	movs	r0, #120	@ 0x78
 800072e:	f000 fa53 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000732:	22d9      	movs	r2, #217	@ 0xd9
 8000734:	2100      	movs	r1, #0
 8000736:	2078      	movs	r0, #120	@ 0x78
 8000738:	f000 fa4e 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800073c:	2222      	movs	r2, #34	@ 0x22
 800073e:	2100      	movs	r1, #0
 8000740:	2078      	movs	r0, #120	@ 0x78
 8000742:	f000 fa49 	bl	8000bd8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000746:	22da      	movs	r2, #218	@ 0xda
 8000748:	2100      	movs	r1, #0
 800074a:	2078      	movs	r0, #120	@ 0x78
 800074c:	f000 fa44 	bl	8000bd8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000750:	2212      	movs	r2, #18
 8000752:	2100      	movs	r1, #0
 8000754:	2078      	movs	r0, #120	@ 0x78
 8000756:	f000 fa3f 	bl	8000bd8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800075a:	22db      	movs	r2, #219	@ 0xdb
 800075c:	2100      	movs	r1, #0
 800075e:	2078      	movs	r0, #120	@ 0x78
 8000760:	f000 fa3a 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000764:	2220      	movs	r2, #32
 8000766:	2100      	movs	r1, #0
 8000768:	2078      	movs	r0, #120	@ 0x78
 800076a:	f000 fa35 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800076e:	228d      	movs	r2, #141	@ 0x8d
 8000770:	2100      	movs	r1, #0
 8000772:	2078      	movs	r0, #120	@ 0x78
 8000774:	f000 fa30 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000778:	2214      	movs	r2, #20
 800077a:	2100      	movs	r1, #0
 800077c:	2078      	movs	r0, #120	@ 0x78
 800077e:	f000 fa2b 	bl	8000bd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000782:	22af      	movs	r2, #175	@ 0xaf
 8000784:	2100      	movs	r1, #0
 8000786:	2078      	movs	r0, #120	@ 0x78
 8000788:	f000 fa26 	bl	8000bd8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800078c:	222e      	movs	r2, #46	@ 0x2e
 800078e:	2100      	movs	r1, #0
 8000790:	2078      	movs	r0, #120	@ 0x78
 8000792:	f000 fa21 	bl	8000bd8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f84c 	bl	8000834 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800079c:	f000 f816 	bl	80007cc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <SSD1306_Init+0x184>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <SSD1306_Init+0x184>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SSD1306_Init+0x184>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	00004e20 	.word	0x00004e20
 80007c0:	20000030 	.word	0x20000030
 80007c4:	000009c4 	.word	0x000009c4
 80007c8:	20000484 	.word	0x20000484

080007cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e021      	b.n	800081e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3b50      	subs	r3, #80	@ 0x50
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	2078      	movs	r0, #120	@ 0x78
 80007e8:	f000 f9f6 	bl	8000bd8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2078      	movs	r0, #120	@ 0x78
 80007f2:	f000 f9f1 	bl	8000bd8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007f6:	2210      	movs	r2, #16
 80007f8:	2100      	movs	r1, #0
 80007fa:	2078      	movs	r0, #120	@ 0x78
 80007fc:	f000 f9ec 	bl	8000bd8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	01da      	lsls	r2, r3, #7
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <SSD1306_UpdateScreen+0x64>)
 8000808:	18d2      	adds	r2, r2, r3
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	2140      	movs	r1, #64	@ 0x40
 800080e:	2078      	movs	r0, #120	@ 0x78
 8000810:	f000 f976 	bl	8000b00 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	3201      	adds	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b07      	cmp	r3, #7
 8000824:	d9d9      	bls.n	80007da <SSD1306_UpdateScreen+0xe>
	}
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000084 	.word	0x20000084

08000834 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <SSD1306_Fill+0x18>
 8000848:	2300      	movs	r3, #0
 800084a:	e000      	b.n	800084e <SSD1306_Fill+0x1a>
 800084c:	23ff      	movs	r3, #255	@ 0xff
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <SSD1306_Fill+0x30>)
 8000854:	0019      	movs	r1, r3
 8000856:	f001 fed3 	bl	8002600 <memset>
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000084 	.word	0x20000084

08000868 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	0004      	movs	r4, r0
 8000870:	0008      	movs	r0, r1
 8000872:	0011      	movs	r1, r2
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	1c22      	adds	r2, r4, #0
 8000878:	801a      	strh	r2, [r3, #0]
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	1c02      	adds	r2, r0, #0
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	1cfb      	adds	r3, r7, #3
 8000882:	1c0a      	adds	r2, r1, #0
 8000884:	701a      	strb	r2, [r3, #0]
	if (
 8000886:	1dbb      	adds	r3, r7, #6
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	@ 0x7f
 800088c:	d852      	bhi.n	8000934 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	2b3f      	cmp	r3, #63	@ 0x3f
 8000894:	d84e      	bhi.n	8000934 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000896:	4b29      	ldr	r3, [pc, #164]	@ (800093c <SSD1306_DrawPixel+0xd4>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	425a      	negs	r2, r3
 80008a4:	4153      	adcs	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	1cfb      	adds	r3, r7, #3
 80008aa:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80008ac:	1cfb      	adds	r3, r7, #3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d11e      	bne.n	80008f2 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	881a      	ldrh	r2, [r3, #0]
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	b298      	uxth	r0, r3
 80008c0:	0003      	movs	r3, r0
 80008c2:	01db      	lsls	r3, r3, #7
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <SSD1306_DrawPixel+0xd8>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2107      	movs	r1, #7
 80008d2:	400b      	ands	r3, r1
 80008d4:	2101      	movs	r1, #1
 80008d6:	4099      	lsls	r1, r3
 80008d8:	000b      	movs	r3, r1
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b259      	sxtb	r1, r3
 80008e0:	1dbb      	adds	r3, r7, #6
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	0003      	movs	r3, r0
 80008e6:	01db      	lsls	r3, r3, #7
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <SSD1306_DrawPixel+0xd8>)
 80008ee:	54d1      	strb	r1, [r2, r3]
 80008f0:	e021      	b.n	8000936 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	881a      	ldrh	r2, [r3, #0]
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	b298      	uxth	r0, r3
 80008fe:	0003      	movs	r3, r0
 8000900:	01db      	lsls	r3, r3, #7
 8000902:	18d3      	adds	r3, r2, r3
 8000904:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <SSD1306_DrawPixel+0xd8>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	1d3a      	adds	r2, r7, #4
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	2107      	movs	r1, #7
 8000910:	400a      	ands	r2, r1
 8000912:	2101      	movs	r1, #1
 8000914:	4091      	lsls	r1, r2
 8000916:	000a      	movs	r2, r1
 8000918:	b252      	sxtb	r2, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	b252      	sxtb	r2, r2
 800091e:	4013      	ands	r3, r2
 8000920:	b259      	sxtb	r1, r3
 8000922:	1dbb      	adds	r3, r7, #6
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	0003      	movs	r3, r0
 8000928:	01db      	lsls	r3, r3, #7
 800092a:	18d3      	adds	r3, r2, r3
 800092c:	b2c9      	uxtb	r1, r1
 800092e:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <SSD1306_DrawPixel+0xd8>)
 8000930:	54d1      	strb	r1, [r2, r3]
 8000932:	e000      	b.n	8000936 <SSD1306_DrawPixel+0xce>
		return;
 8000934:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	20000484 	.word	0x20000484
 8000940:	20000084 	.word	0x20000084

08000944 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	1c0a      	adds	r2, r1, #0
 8000954:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <SSD1306_GotoXY+0x2c>)
 8000958:	1dba      	adds	r2, r7, #6
 800095a:	8812      	ldrh	r2, [r2, #0]
 800095c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800095e:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <SSD1306_GotoXY+0x2c>)
 8000960:	1d3a      	adds	r2, r7, #4
 8000962:	8812      	ldrh	r2, [r2, #0]
 8000964:	805a      	strh	r2, [r3, #2]
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	20000484 	.word	0x20000484

08000974 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6039      	str	r1, [r7, #0]
 800097c:	0011      	movs	r1, r2
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	1c02      	adds	r2, r0, #0
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800098a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a74 <SSD1306_Putc+0x100>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	001a      	movs	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	18d3      	adds	r3, r2, r3
	if (
 8000996:	2b7f      	cmp	r3, #127	@ 0x7f
 8000998:	dc07      	bgt.n	80009aa <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <SSD1306_Putc+0x100>)
 800099c:	885b      	ldrh	r3, [r3, #2]
 800099e:	001a      	movs	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80009a8:	dd01      	ble.n	80009ae <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e05d      	b.n	8000a6a <SSD1306_Putc+0xf6>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e04a      	b.n	8000a4a <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3b20      	subs	r3, #32
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	434b      	muls	r3, r1
 80009c4:	0019      	movs	r1, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	18cb      	adds	r3, r1, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	e02f      	b.n	8000a38 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	409a      	lsls	r2, r3
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	4013      	ands	r3, r2
 80009e4:	d011      	beq.n	8000a0a <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <SSD1306_Putc+0x100>)
 80009e8:	881a      	ldrh	r2, [r3, #0]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	18d3      	adds	r3, r2, r3
 80009f0:	b298      	uxth	r0, r3
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <SSD1306_Putc+0x100>)
 80009f4:	885a      	ldrh	r2, [r3, #2]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	18d3      	adds	r3, r2, r3
 80009fc:	b299      	uxth	r1, r3
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001a      	movs	r2, r3
 8000a04:	f7ff ff30 	bl	8000868 <SSD1306_DrawPixel>
 8000a08:	e013      	b.n	8000a32 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <SSD1306_Putc+0x100>)
 8000a0c:	881a      	ldrh	r2, [r3, #0]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	b298      	uxth	r0, r3
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <SSD1306_Putc+0x100>)
 8000a18:	885a      	ldrh	r2, [r3, #2]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	18d3      	adds	r3, r2, r3
 8000a20:	b299      	uxth	r1, r3
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	425a      	negs	r2, r3
 8000a28:	4153      	adcs	r3, r2
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	f7ff ff1b 	bl	8000868 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3301      	adds	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d3c9      	bcc.n	80009d8 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	001a      	movs	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d3ae      	bcc.n	80009b4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <SSD1306_Putc+0x100>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <SSD1306_Putc+0x100>)
 8000a64:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b006      	add	sp, #24
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	20000484 	.word	0x20000484

08000a78 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000a86:	e013      	b.n	8000ab0 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	7818      	ldrb	r0, [r3, #0]
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	0019      	movs	r1, r3
 8000a94:	f7ff ff6e 	bl	8000974 <SSD1306_Putc>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d002      	beq.n	8000aaa <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e7      	bne.n	8000a88 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	781b      	ldrb	r3, [r3, #0]
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b004      	add	sp, #16
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff feb3 	bl	8000834 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ace:	f7ff fe7d 	bl	80007cc <SSD1306_UpdateScreen>
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <ssd1306_I2C_Init+0x24>)
 8000ae0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ae2:	e002      	b.n	8000aea <ssd1306_I2C_Init+0x12>
		p--;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f9      	bne.n	8000ae4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	0003d090 	.word	0x0003d090

08000b00 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b0c6      	sub	sp, #280	@ 0x118
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	0004      	movs	r4, r0
 8000b08:	0008      	movs	r0, r1
 8000b0a:	603a      	str	r2, [r7, #0]
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <ssd1306_I2C_WriteMulti+0xc4>)
 8000b10:	2588      	movs	r5, #136	@ 0x88
 8000b12:	006d      	lsls	r5, r5, #1
 8000b14:	195b      	adds	r3, r3, r5
 8000b16:	19db      	adds	r3, r3, r7
 8000b18:	1c22      	adds	r2, r4, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b1e:	002c      	movs	r4, r5
 8000b20:	191b      	adds	r3, r3, r4
 8000b22:	19db      	adds	r3, r3, r7
 8000b24:	1c02      	adds	r2, r0, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <ssd1306_I2C_WriteMulti+0xcc>)
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	181b      	adds	r3, r3, r0
 8000b2e:	19db      	adds	r3, r3, r7
 8000b30:	1c0a      	adds	r2, r1, #0
 8000b32:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <ssd1306_I2C_WriteMulti+0xd0>)
 8000b36:	181b      	adds	r3, r3, r0
 8000b38:	19db      	adds	r3, r3, r7
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b3c:	1812      	adds	r2, r2, r0
 8000b3e:	19d2      	adds	r2, r2, r7
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b44:	2310      	movs	r3, #16
 8000b46:	33ff      	adds	r3, #255	@ 0xff
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e014      	b.n	8000b7a <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000b50:	2010      	movs	r0, #16
 8000b52:	30ff      	adds	r0, #255	@ 0xff
 8000b54:	183b      	adds	r3, r7, r0
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	183b      	adds	r3, r7, r0
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	7811      	ldrb	r1, [r2, #0]
 8000b64:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd0 <ssd1306_I2C_WriteMulti+0xd0>)
 8000b66:	2488      	movs	r4, #136	@ 0x88
 8000b68:	0064      	lsls	r4, r4, #1
 8000b6a:	1912      	adds	r2, r2, r4
 8000b6c:	19d2      	adds	r2, r2, r7
 8000b6e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	183b      	adds	r3, r7, r0
 8000b76:	3201      	adds	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	33ff      	adds	r3, #255	@ 0xff
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <ssd1306_I2C_WriteMulti+0xcc>)
 8000b86:	2188      	movs	r1, #136	@ 0x88
 8000b88:	0049      	lsls	r1, r1, #1
 8000b8a:	1852      	adds	r2, r2, r1
 8000b8c:	19d2      	adds	r2, r2, r7
 8000b8e:	8812      	ldrh	r2, [r2, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8dd      	bhi.n	8000b50 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <ssd1306_I2C_WriteMulti+0xc4>)
 8000b96:	000a      	movs	r2, r1
 8000b98:	189b      	adds	r3, r3, r2
 8000b9a:	19db      	adds	r3, r3, r7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <ssd1306_I2C_WriteMulti+0xcc>)
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	19db      	adds	r3, r3, r7
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	220c      	movs	r2, #12
 8000bae:	18ba      	adds	r2, r7, r2
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <ssd1306_I2C_WriteMulti+0xd4>)
 8000bb2:	240a      	movs	r4, #10
 8000bb4:	9400      	str	r4, [sp, #0]
 8000bb6:	f000 fc07 	bl	80013c8 <HAL_I2C_Master_Transmit>
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b044      	add	sp, #272	@ 0x110
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	fffffef7 	.word	0xfffffef7
 8000bc8:	fffffef6 	.word	0xfffffef6
 8000bcc:	fffffef4 	.word	0xfffffef4
 8000bd0:	fffffefc 	.word	0xfffffefc
 8000bd4:	20000030 	.word	0x20000030

08000bd8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	0004      	movs	r4, r0
 8000be0:	0008      	movs	r0, r1
 8000be2:	0011      	movs	r1, r2
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	1c22      	adds	r2, r4, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	1dbb      	adds	r3, r7, #6
 8000bec:	1c02      	adds	r2, r0, #0
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	1d7b      	adds	r3, r7, #5
 8000bf2:	1c0a      	adds	r2, r1, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000bf6:	200c      	movs	r0, #12
 8000bf8:	183b      	adds	r3, r7, r0
 8000bfa:	1dba      	adds	r2, r7, #6
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000c00:	183b      	adds	r3, r7, r0
 8000c02:	1d7a      	adds	r2, r7, #5
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	183a      	adds	r2, r7, r0
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <ssd1306_I2C_Write+0x4c>)
 8000c12:	230a      	movs	r3, #10
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	f000 fbd6 	bl	80013c8 <HAL_I2C_Master_Transmit>
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b005      	add	sp, #20
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	20000030 	.word	0x20000030

08000c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f80f 	bl	8000c58 <HAL_InitTick>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e001      	b.n	8000c4a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c46:	f7ff fc1d 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_InitTick+0x88>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d02b      	beq.n	8000cc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_InitTick+0x8c>)
 8000c72:	681c      	ldr	r4, [r3, #0]
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_InitTick+0x88>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	0019      	movs	r1, r3
 8000c7a:	23fa      	movs	r3, #250	@ 0xfa
 8000c7c:	0098      	lsls	r0, r3, #2
 8000c7e:	f7ff fa43 	bl	8000108 <__udivsi3>
 8000c82:	0003      	movs	r3, r0
 8000c84:	0019      	movs	r1, r3
 8000c86:	0020      	movs	r0, r4
 8000c88:	f7ff fa3e 	bl	8000108 <__udivsi3>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f919 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d112      	bne.n	8000cbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d80a      	bhi.n	8000cb4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f8e8 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_InitTick+0x90>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e00d      	b.n	8000cd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e008      	b.n	8000cd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e003      	b.n	8000cd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b005      	add	sp, #20
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	2000000c 	.word	0x2000000c

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	18d2      	adds	r2, r2, r3
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	2000048c 	.word	0x2000048c

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b02      	ldr	r3, [pc, #8]	@ (8000d20 <HAL_GetTick+0x10>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	2000048c 	.word	0x2000048c

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	@ 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	@ 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	@ 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	@ 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	045b      	lsls	r3, r3, #17
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d301      	bcc.n	8000e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e010      	b.n	8000e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <SysTick_Config+0x44>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	3a01      	subs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff7c 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x44>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffaf 	bl	8000e34 <SysTick_Config>
 8000ed6:	0003      	movs	r3, r0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000eee:	e153      	b.n	8001198 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0x28>
 8000f06:	e144      	b.n	8001192 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x38>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d125      	bne.n	8000f64 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	58d3      	ldr	r3, [r2, r3]
 8000f24:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	43da      	mvns	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	220f      	movs	r2, #15
 8000f42:	401a      	ands	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2107      	movs	r1, #7
 8000f48:	400b      	ands	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	43da      	mvns	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	401a      	ands	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d00b      	beq.n	8000fb8 <HAL_GPIO_Init+0xd8>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	2b11      	cmp	r3, #17
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	2201      	movs	r2, #1
 8001006:	401a      	ands	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4313      	orrs	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d017      	beq.n	8001052 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4013      	ands	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	055b      	lsls	r3, r3, #21
 800105a:	4013      	ands	r3, r2
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x180>
 800105e:	e098      	b.n	8001192 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001060:	4a53      	ldr	r2, [pc, #332]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3318      	adds	r3, #24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	589b      	ldr	r3, [r3, r2]
 800106c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	220f      	movs	r2, #15
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	43da      	mvns	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	23a0      	movs	r3, #160	@ 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	429a      	cmp	r2, r3
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x1e2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a48      	ldr	r2, [pc, #288]	@ (80011b4 <HAL_GPIO_Init+0x2d4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x1de>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a47      	ldr	r2, [pc, #284]	@ (80011b8 <HAL_GPIO_Init+0x2d8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x1da>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a46      	ldr	r2, [pc, #280]	@ (80011bc <HAL_GPIO_Init+0x2dc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x1d6>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a45      	ldr	r2, [pc, #276]	@ (80011c0 <HAL_GPIO_Init+0x2e0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x1d2>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010c2:	2300      	movs	r3, #0
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	2103      	movs	r1, #3
 80010c8:	400a      	ands	r2, r1
 80010ca:	00d2      	lsls	r2, r2, #3
 80010cc:	4093      	lsls	r3, r2
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010d4:	4936      	ldr	r1, [pc, #216]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3318      	adds	r3, #24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010e2:	4a33      	ldr	r2, [pc, #204]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	58d3      	ldr	r3, [r2, r3]
 80010e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43da      	mvns	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	4013      	ands	r3, r2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001108:	4929      	ldr	r1, [pc, #164]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001112:	2384      	movs	r3, #132	@ 0x84
 8001114:	58d3      	ldr	r3, [r2, r3]
 8001116:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43da      	mvns	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4013      	ands	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001136:	491e      	ldr	r1, [pc, #120]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001138:	2284      	movs	r2, #132	@ 0x84
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43da      	mvns	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4013      	ands	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	035b      	lsls	r3, r3, #13
 8001156:	4013      	ands	r3, r2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43da      	mvns	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	039b      	lsls	r3, r3, #14
 8001180:	4013      	ands	r3, r2
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	40da      	lsrs	r2, r3
 80011a0:	1e13      	subs	r3, r2, #0
 80011a2:	d000      	beq.n	80011a6 <HAL_GPIO_Init+0x2c6>
 80011a4:	e6a4      	b.n	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021800 	.word	0x40021800
 80011b4:	50000400 	.word	0x50000400
 80011b8:	50000800 	.word	0x50000800
 80011bc:	50000c00 	.word	0x50000c00
 80011c0:	50001400 	.word	0x50001400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	0008      	movs	r0, r1
 80011ce:	0011      	movs	r1, r2
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	1c7b      	adds	r3, r7, #1
 80011d8:	1c0a      	adds	r2, r1, #0
 80011da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	1c7b      	adds	r3, r7, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	881a      	ldrh	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	1dba      	adds	r2, r7, #6
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4013      	ands	r3, r2
 8001216:	d008      	beq.n	800122a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800121a:	1dba      	adds	r2, r7, #6
 800121c:	8812      	ldrh	r2, [r2, #0]
 800121e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001220:	1dbb      	adds	r3, r7, #6
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f815 	bl	8001254 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	1dba      	adds	r2, r7, #6
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	4013      	ands	r3, r2
 8001234:	d008      	beq.n	8001248 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001238:	1dba      	adds	r2, r7, #6
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800123e:	1dbb      	adds	r3, r7, #6
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	f000 f810 	bl	8001268 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021800 	.word	0x40021800

08001254 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	1dbb      	adds	r3, r7, #6
 8001272:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e08f      	b.n	80013ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2241      	movs	r2, #65	@ 0x41
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2240      	movs	r2, #64	@ 0x40
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff f911 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2241      	movs	r2, #65	@ 0x41
 80012ae:	2124      	movs	r1, #36	@ 0x24
 80012b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	438a      	bics	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	493b      	ldr	r1, [pc, #236]	@ (80013b8 <HAL_I2C_Init+0x13c>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4938      	ldr	r1, [pc, #224]	@ (80013bc <HAL_I2C_Init+0x140>)
 80012dc:	400a      	ands	r2, r1
 80012de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0209      	lsls	r1, r1, #8
 80012f4:	430a      	orrs	r2, r1
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e007      	b.n	800130a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2184      	movs	r1, #132	@ 0x84
 8001304:	0209      	lsls	r1, r1, #8
 8001306:	430a      	orrs	r2, r1
 8001308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d109      	bne.n	8001326 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	0109      	lsls	r1, r1, #4
 8001320:	430a      	orrs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	e007      	b.n	8001336 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4923      	ldr	r1, [pc, #140]	@ (80013c0 <HAL_I2C_Init+0x144>)
 8001332:	400a      	ands	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4920      	ldr	r1, [pc, #128]	@ (80013c4 <HAL_I2C_Init+0x148>)
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	491a      	ldr	r1, [pc, #104]	@ (80013bc <HAL_I2C_Init+0x140>)
 8001352:	400a      	ands	r2, r1
 8001354:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	431a      	orrs	r2, r3
 8001360:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69d9      	ldr	r1, [r3, #28]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2101      	movs	r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2241      	movs	r2, #65	@ 0x41
 800139a:	2120      	movs	r1, #32
 800139c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2242      	movs	r2, #66	@ 0x42
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	f0ffffff 	.word	0xf0ffffff
 80013bc:	ffff7fff 	.word	0xffff7fff
 80013c0:	fffff7ff 	.word	0xfffff7ff
 80013c4:	02008000 	.word	0x02008000

080013c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	0008      	movs	r0, r1
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	0019      	movs	r1, r3
 80013d6:	230a      	movs	r3, #10
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	1c02      	adds	r2, r0, #0
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	2308      	movs	r3, #8
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	1c0a      	adds	r2, r1, #0
 80013e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2241      	movs	r2, #65	@ 0x41
 80013ea:	5c9b      	ldrb	r3, [r3, r2]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b20      	cmp	r3, #32
 80013f0:	d000      	beq.n	80013f4 <HAL_I2C_Master_Transmit+0x2c>
 80013f2:	e10a      	b.n	800160a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2240      	movs	r2, #64	@ 0x40
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_I2C_Master_Transmit+0x3a>
 80013fe:	2302      	movs	r3, #2
 8001400:	e104      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800140a:	f7ff fc81 	bl	8000d10 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	0219      	lsls	r1, r3, #8
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2319      	movs	r3, #25
 800141e:	2201      	movs	r2, #1
 8001420:	f000 fa1a 	bl	8001858 <I2C_WaitOnFlagUntilTimeout>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0ef      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2241      	movs	r2, #65	@ 0x41
 8001430:	2121      	movs	r1, #33	@ 0x21
 8001432:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2242      	movs	r2, #66	@ 0x42
 8001438:	2110      	movs	r1, #16
 800143a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2208      	movs	r2, #8
 800144c:	18ba      	adds	r2, r7, r2
 800144e:	8812      	ldrh	r2, [r2, #0]
 8001450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145c:	b29b      	uxth	r3, r3
 800145e:	2bff      	cmp	r3, #255	@ 0xff
 8001460:	d906      	bls.n	8001470 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	22ff      	movs	r2, #255	@ 0xff
 8001466:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	045b      	lsls	r3, r3, #17
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e007      	b.n	8001480 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	049b      	lsls	r3, r3, #18
 800147e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d027      	beq.n	80014d8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	697c      	ldr	r4, [r7, #20]
 80014c4:	230a      	movs	r3, #10
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	4b51      	ldr	r3, [pc, #324]	@ (8001614 <HAL_I2C_Master_Transmit+0x24c>)
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0023      	movs	r3, r4
 80014d2:	f000 fb9b 	bl	8001c0c <I2C_TransferConfig>
 80014d6:	e06f      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	697c      	ldr	r4, [r7, #20]
 80014e0:	230a      	movs	r3, #10
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	8819      	ldrh	r1, [r3, #0]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <HAL_I2C_Master_Transmit+0x24c>)
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	0023      	movs	r3, r4
 80014ee:	f000 fb8d 	bl	8001c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80014f2:	e061      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 fa04 	bl	8001908 <I2C_WaitOnTXISFlagUntilTimeout>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e081      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0x1f0>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001546:	2b00      	cmp	r3, #0
 8001548:	d136      	bne.n	80015b8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800154a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0013      	movs	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	f000 f97e 	bl	8001858 <I2C_WaitOnFlagUntilTimeout>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e053      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2bff      	cmp	r3, #255	@ 0xff
 800156c:	d911      	bls.n	8001592 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	22ff      	movs	r2, #255	@ 0xff
 8001572:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001578:	b2da      	uxtb	r2, r3
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	045c      	lsls	r4, r3, #17
 800157e:	230a      	movs	r3, #10
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	8819      	ldrh	r1, [r3, #0]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	2300      	movs	r3, #0
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	0023      	movs	r3, r4
 800158c:	f000 fb3e 	bl	8001c0c <I2C_TransferConfig>
 8001590:	e012      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	049c      	lsls	r4, r3, #18
 80015a6:	230a      	movs	r3, #10
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	0023      	movs	r3, r4
 80015b4:	f000 fb2a 	bl	8001c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d198      	bne.n	80014f4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 f9e3 	bl	8001994 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e01a      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2220      	movs	r2, #32
 80015dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	490b      	ldr	r1, [pc, #44]	@ (8001618 <HAL_I2C_Master_Transmit+0x250>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2241      	movs	r2, #65	@ 0x41
 80015f2:	2120      	movs	r1, #32
 80015f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2242      	movs	r2, #66	@ 0x42
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
  }
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b007      	add	sp, #28
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	80002000 	.word	0x80002000
 8001618:	fe00e800 	.word	0xfe00e800

0800161c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	230a      	movs	r3, #10
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	1c0a      	adds	r2, r1, #0
 800162e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2241      	movs	r2, #65	@ 0x41
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b20      	cmp	r3, #32
 800163e:	d000      	beq.n	8001642 <HAL_I2C_IsDeviceReady+0x26>
 8001640:	e0df      	b.n	8001802 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	401a      	ands	r2, r3
 800164e:	2380      	movs	r3, #128	@ 0x80
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	429a      	cmp	r2, r3
 8001654:	d101      	bne.n	800165a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	e0d4      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2240      	movs	r2, #64	@ 0x40
 800165e:	5c9b      	ldrb	r3, [r3, r2]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_I2C_IsDeviceReady+0x4c>
 8001664:	2302      	movs	r3, #2
 8001666:	e0cd      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2101      	movs	r1, #1
 800166e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2241      	movs	r2, #65	@ 0x41
 8001674:	2124      	movs	r1, #36	@ 0x24
 8001676:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_I2C_IsDeviceReady+0x7a>
 8001686:	230a      	movs	r3, #10
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	059b      	lsls	r3, r3, #22
 800168e:	0d9b      	lsrs	r3, r3, #22
 8001690:	4a5e      	ldr	r2, [pc, #376]	@ (800180c <HAL_I2C_IsDeviceReady+0x1f0>)
 8001692:	431a      	orrs	r2, r3
 8001694:	e006      	b.n	80016a4 <HAL_I2C_IsDeviceReady+0x88>
 8001696:	230a      	movs	r3, #10
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	059b      	lsls	r3, r3, #22
 800169e:	0d9b      	lsrs	r3, r3, #22
 80016a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001810 <HAL_I2C_IsDeviceReady+0x1f4>)
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb31 	bl	8000d10 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2220      	movs	r2, #32
 80016ba:	4013      	ands	r3, r2
 80016bc:	3b20      	subs	r3, #32
 80016be:	425a      	negs	r2, r3
 80016c0:	4153      	adcs	r3, r2
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	231f      	movs	r3, #31
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2210      	movs	r2, #16
 80016d2:	4013      	ands	r3, r2
 80016d4:	3b10      	subs	r3, #16
 80016d6:	425a      	negs	r2, r3
 80016d8:	4153      	adcs	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	231e      	movs	r3, #30
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016e2:	e035      	b.n	8001750 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	d01a      	beq.n	8001720 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016ea:	f7ff fb11 	bl	8000d10 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <HAL_I2C_IsDeviceReady+0xe4>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10f      	bne.n	8001720 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2241      	movs	r2, #65	@ 0x41
 8001704:	2120      	movs	r1, #32
 8001706:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	2220      	movs	r2, #32
 800170e:	431a      	orrs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	2100      	movs	r1, #0
 800171a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e071      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2220      	movs	r2, #32
 8001728:	4013      	ands	r3, r2
 800172a:	3b20      	subs	r3, #32
 800172c:	425a      	negs	r2, r3
 800172e:	4153      	adcs	r3, r2
 8001730:	b2da      	uxtb	r2, r3
 8001732:	231f      	movs	r3, #31
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2210      	movs	r2, #16
 8001740:	4013      	ands	r3, r2
 8001742:	3b10      	subs	r3, #16
 8001744:	425a      	negs	r2, r3
 8001746:	4153      	adcs	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	231e      	movs	r3, #30
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001750:	231f      	movs	r3, #31
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d104      	bne.n	8001764 <HAL_I2C_IsDeviceReady+0x148>
 800175a:	231e      	movs	r3, #30
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0bf      	beq.n	80016e4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2210      	movs	r2, #16
 800176c:	4013      	ands	r3, r2
 800176e:	2b10      	cmp	r3, #16
 8001770:	d01a      	beq.n	80017a8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	0013      	movs	r3, r2
 800177c:	2200      	movs	r2, #0
 800177e:	2120      	movs	r1, #32
 8001780:	f000 f86a 	bl	8001858 <I2C_WaitOnFlagUntilTimeout>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e03b      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2241      	movs	r2, #65	@ 0x41
 8001798:	2120      	movs	r1, #32
 800179a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2240      	movs	r2, #64	@ 0x40
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e02d      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	0013      	movs	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	f000 f84f 	bl	8001858 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e020      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2210      	movs	r2, #16
 80017c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2220      	movs	r2, #32
 80017d0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d900      	bls.n	80017e2 <HAL_I2C_IsDeviceReady+0x1c6>
 80017e0:	e74d      	b.n	800167e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2241      	movs	r2, #65	@ 0x41
 80017e6:	2120      	movs	r1, #32
 80017e8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	2220      	movs	r2, #32
 80017f0:	431a      	orrs	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	@ 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001802:	2302      	movs	r3, #2
  }
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b008      	add	sp, #32
 800180a:	bd80      	pop	{r7, pc}
 800180c:	02002000 	.word	0x02002000
 8001810:	02002800 	.word	0x02002800

08001814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	2b02      	cmp	r3, #2
 8001828:	d103      	bne.n	8001832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d007      	beq.n	8001850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	619a      	str	r2, [r3, #24]
  }
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001868:	e03a      	b.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f8d3 	bl	8001a1c <I2C_IsErrorOccurred>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e040      	b.n	8001900 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	d02d      	beq.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001884:	f7ff fa44 	bl	8000d10 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d302      	bcc.n	800189a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d122      	bne.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	4013      	ands	r3, r2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	425a      	negs	r2, r3
 80018aa:	4153      	adcs	r3, r2
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	001a      	movs	r2, r3
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d113      	bne.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	2220      	movs	r2, #32
 80018be:	431a      	orrs	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2241      	movs	r2, #65	@ 0x41
 80018c8:	2120      	movs	r1, #32
 80018ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2242      	movs	r2, #66	@ 0x42
 80018d0:	2100      	movs	r1, #0
 80018d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	2100      	movs	r1, #0
 80018da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00f      	b.n	8001900 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4013      	ands	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	425a      	negs	r2, r3
 80018f0:	4153      	adcs	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	001a      	movs	r2, r3
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d0b5      	beq.n	800186a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}

08001908 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001914:	e032      	b.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	0018      	movs	r0, r3
 800191e:	f000 f87d 	bl	8001a1c <I2C_IsErrorOccurred>
 8001922:	1e03      	subs	r3, r0, #0
 8001924:	d001      	beq.n	800192a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e030      	b.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3301      	adds	r3, #1
 800192e:	d025      	beq.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001930:	f7ff f9ee 	bl	8000d10 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	d302      	bcc.n	8001946 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11a      	bne.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	2b02      	cmp	r3, #2
 8001952:	d013      	beq.n	800197c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001958:	2220      	movs	r2, #32
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2241      	movs	r2, #65	@ 0x41
 8001964:	2120      	movs	r1, #32
 8001966:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2242      	movs	r2, #66	@ 0x42
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2240      	movs	r2, #64	@ 0x40
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e007      	b.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d1c5      	bne.n	8001916 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}

08001994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a0:	e02f      	b.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f837 	bl	8001a1c <I2C_IsErrorOccurred>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d001      	beq.n	80019b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e02d      	b.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b6:	f7ff f9ab 	bl	8000d10 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11a      	bne.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2220      	movs	r2, #32
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d013      	beq.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	2220      	movs	r2, #32
 80019e0:	431a      	orrs	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2241      	movs	r2, #65	@ 0x41
 80019ea:	2120      	movs	r1, #32
 80019ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2242      	movs	r2, #66	@ 0x42
 80019f2:	2100      	movs	r1, #0
 80019f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2240      	movs	r2, #64	@ 0x40
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e007      	b.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d1c8      	bne.n	80019a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2327      	movs	r3, #39	@ 0x27
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2210      	movs	r2, #16
 8001a44:	4013      	ands	r3, r2
 8001a46:	d100      	bne.n	8001a4a <I2C_IsErrorOccurred+0x2e>
 8001a48:	e079      	b.n	8001b3e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2210      	movs	r2, #16
 8001a50:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a52:	e057      	b.n	8001b04 <I2C_IsErrorOccurred+0xe8>
 8001a54:	2227      	movs	r2, #39	@ 0x27
 8001a56:	18bb      	adds	r3, r7, r2
 8001a58:	18ba      	adds	r2, r7, r2
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3301      	adds	r3, #1
 8001a62:	d04f      	beq.n	8001b04 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff f954 	bl	8000d10 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <I2C_IsErrorOccurred+0x5e>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d144      	bne.n	8001b04 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	01db      	lsls	r3, r3, #7
 8001a84:	4013      	ands	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a88:	2013      	movs	r0, #19
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	2142      	movs	r1, #66	@ 0x42
 8001a90:	5c52      	ldrb	r2, [r2, r1]
 8001a92:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d126      	bne.n	8001af6 <I2C_IsErrorOccurred+0xda>
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d021      	beq.n	8001af6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d01d      	beq.n	8001af6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	01c9      	lsls	r1, r1, #7
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001acc:	f7ff f920 	bl	8000d10 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad4:	e00f      	b.n	8001af6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ad6:	f7ff f91b 	bl	8000d10 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b19      	cmp	r3, #25
 8001ae2:	d908      	bls.n	8001af6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001aec:	2327      	movs	r3, #39	@ 0x27
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]

              break;
 8001af4:	e006      	b.n	8001b04 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2220      	movs	r2, #32
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d1e8      	bne.n	8001ad6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d004      	beq.n	8001b1c <I2C_IsErrorOccurred+0x100>
 8001b12:	2327      	movs	r3, #39	@ 0x27
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d09b      	beq.n	8001a54 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b1c:	2327      	movs	r3, #39	@ 0x27
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2204      	movs	r2, #4
 8001b32:	4313      	orrs	r3, r2
 8001b34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b36:	2327      	movs	r3, #39	@ 0x27
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d00c      	beq.n	8001b6a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4313      	orrs	r3, r2
 8001b56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	0052      	lsls	r2, r2, #1
 8001b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b62:	2327      	movs	r3, #39	@ 0x27
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	d00c      	beq.n	8001b8e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2208      	movs	r2, #8
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	00d2      	lsls	r2, r2, #3
 8001b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b86:	2327      	movs	r3, #39	@ 0x27
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d00c      	beq.n	8001bb2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001baa:	2327      	movs	r3, #39	@ 0x27
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001bb2:	2327      	movs	r3, #39	@ 0x27
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01d      	beq.n	8001bf8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff fe28 	bl	8001814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	490e      	ldr	r1, [pc, #56]	@ (8001c08 <I2C_IsErrorOccurred+0x1ec>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2241      	movs	r2, #65	@ 0x41
 8001be4:	2120      	movs	r1, #32
 8001be6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2242      	movs	r2, #66	@ 0x42
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001bf8:	2327      	movs	r3, #39	@ 0x27
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b00a      	add	sp, #40	@ 0x28
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	fe00e800 	.word	0xfe00e800

08001c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	0008      	movs	r0, r1
 8001c16:	0011      	movs	r1, r2
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	240a      	movs	r4, #10
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	1c02      	adds	r2, r0, #0
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	2009      	movs	r0, #9
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	1c0a      	adds	r2, r1, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	059b      	lsls	r3, r3, #22
 8001c30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0419      	lsls	r1, r3, #16
 8001c38:	23ff      	movs	r3, #255	@ 0xff
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c46:	4313      	orrs	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c56:	0d51      	lsrs	r1, r2, #21
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	00d2      	lsls	r2, r2, #3
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <I2C_TransferConfig+0x70>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	43d2      	mvns	r2, r2
 8001c64:	401a      	ands	r2, r3
 8001c66:	0011      	movs	r1, r2
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b007      	add	sp, #28
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	03ff63ff 	.word	0x03ff63ff

08001c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2241      	movs	r2, #65	@ 0x41
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d138      	bne.n	8001d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2240      	movs	r2, #64	@ 0x40
 8001c9a:	5c9b      	ldrb	r3, [r3, r2]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e032      	b.n	8001d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2240      	movs	r2, #64	@ 0x40
 8001ca8:	2101      	movs	r1, #1
 8001caa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2241      	movs	r2, #65	@ 0x41
 8001cb0:	2124      	movs	r1, #36	@ 0x24
 8001cb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4911      	ldr	r1, [pc, #68]	@ (8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2241      	movs	r2, #65	@ 0x41
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2240      	movs	r2, #64	@ 0x40
 8001d00:	2100      	movs	r1, #0
 8001d02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	ffffefff 	.word	0xffffefff

08001d18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2241      	movs	r2, #65	@ 0x41
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d139      	bne.n	8001da2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2240      	movs	r2, #64	@ 0x40
 8001d32:	5c9b      	ldrb	r3, [r3, r2]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e033      	b.n	8001da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	2124      	movs	r1, #36	@ 0x24
 8001d4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	438a      	bics	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2241      	movs	r2, #65	@ 0x41
 8001d92:	2120      	movs	r1, #32
 8001d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	fffff0ff 	.word	0xfffff0ff

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1d0      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x1e>
 8001dcc:	e069      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4bc8      	ldr	r3, [pc, #800]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d15d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1bc      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_OscConfig+0x56>
 8001df6:	4bbe      	ldr	r3, [pc, #760]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4bbd      	ldr	r3, [pc, #756]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	0249      	lsls	r1, r1, #9
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e020      	b.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	23a0      	movs	r3, #160	@ 0xa0
 8001e0c:	02db      	lsls	r3, r3, #11
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d10e      	bne.n	8001e30 <HAL_RCC_OscConfig+0x80>
 8001e12:	4bb7      	ldr	r3, [pc, #732]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4bb6      	ldr	r3, [pc, #728]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	02c9      	lsls	r1, r1, #11
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4bb3      	ldr	r3, [pc, #716]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4bb2      	ldr	r3, [pc, #712]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	0249      	lsls	r1, r1, #9
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e30:	4baf      	ldr	r3, [pc, #700]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4bae      	ldr	r3, [pc, #696]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e36:	49af      	ldr	r1, [pc, #700]	@ (80020f4 <HAL_RCC_OscConfig+0x344>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4bac      	ldr	r3, [pc, #688]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4bab      	ldr	r3, [pc, #684]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e42:	49ad      	ldr	r1, [pc, #692]	@ (80020f8 <HAL_RCC_OscConfig+0x348>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d014      	beq.n	8001e7a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ff5e 	bl	8000d10 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ff59 	bl	8000d10 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	@ 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e17b      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6c:	4ba0      	ldr	r3, [pc, #640]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0xaa>
 8001e78:	e013      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff49 	bl	8000d10 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff44 	bl	8000d10 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e166      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e96:	4b96      	ldr	r3, [pc, #600]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0xfe>
 8001eac:	e086      	b.n	8001fbc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b90      	ldr	r3, [pc, #576]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	@ 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d12f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e14c      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b89      	ldr	r3, [pc, #548]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a8b      	ldr	r2, [pc, #556]	@ (80020fc <HAL_RCC_OscConfig+0x34c>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	4b85      	ldr	r3, [pc, #532]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ee6:	4b82      	ldr	r3, [pc, #520]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a85      	ldr	r2, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x350>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001efa:	4b7d      	ldr	r3, [pc, #500]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	2207      	movs	r2, #7
 8001f02:	4013      	ands	r3, r2
 8001f04:	4a7f      	ldr	r2, [pc, #508]	@ (8002104 <HAL_RCC_OscConfig+0x354>)
 8001f06:	40da      	lsrs	r2, r3
 8001f08:	4b7f      	ldr	r3, [pc, #508]	@ (8002108 <HAL_RCC_OscConfig+0x358>)
 8001f0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800210c <HAL_RCC_OscConfig+0x35c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe fea1 	bl	8000c58 <HAL_InitTick>
 8001f16:	1e03      	subs	r3, r0, #0
 8001f18:	d050      	beq.n	8001fbc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e122      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d030      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f26:	4b72      	ldr	r3, [pc, #456]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x350>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	4b6e      	ldr	r3, [pc, #440]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0049      	lsls	r1, r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fee2 	bl	8000d10 <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f52:	f7fe fedd 	bl	8000d10 <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0ff      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f64:	4b62      	ldr	r3, [pc, #392]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b5f      	ldr	r3, [pc, #380]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <HAL_RCC_OscConfig+0x34c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e019      	b.n	8001fbc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001f88:	4b59      	ldr	r3, [pc, #356]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001f8e:	4960      	ldr	r1, [pc, #384]	@ (8002110 <HAL_RCC_OscConfig+0x360>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe febc 	bl	8000d10 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe feb7 	bl	8000d10 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0d9      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d042      	beq.n	800204c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2238      	movs	r2, #56	@ 0x38
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b18      	cmp	r3, #24
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d138      	bne.n	800204c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0c2      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b42      	ldr	r3, [pc, #264]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001fe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe8d 	bl	8000d10 <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fe88 	bl	8000d10 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0aa      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800200e:	4b38      	ldr	r3, [pc, #224]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0f1      	beq.n	8001ffc <HAL_RCC_OscConfig+0x24c>
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800201a:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 800201c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800201e:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002020:	2101      	movs	r1, #1
 8002022:	438a      	bics	r2, r1
 8002024:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe fe73 	bl	8000d10 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002030:	f7fe fe6e 	bl	8000d10 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e090      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002042:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d1f1      	bne.n	8002030 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x2a8>
 8002056:	e084      	b.n	8002162 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002058:	230f      	movs	r3, #15
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002060:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2238      	movs	r2, #56	@ 0x38
 8002066:	4013      	ands	r3, r2
 8002068:	2b20      	cmp	r3, #32
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d000      	beq.n	8002076 <HAL_RCC_OscConfig+0x2c6>
 8002074:	e075      	b.n	8002162 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e074      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x2e0>
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800208e:	e01c      	b.n	80020ca <HAL_RCC_OscConfig+0x31a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x302>
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 800209a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 800209e:	2104      	movs	r1, #4
 80020a0:	430a      	orrs	r2, r1
 80020a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x31a>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	438a      	bics	r2, r1
 80020bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_RCC_OscConfig+0x340>)
 80020c4:	2104      	movs	r1, #4
 80020c6:	438a      	bics	r2, r1
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fe1d 	bl	8000d10 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fe18 	bl	8000d10 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <HAL_RCC_OscConfig+0x364>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d915      	bls.n	8002118 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e039      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	fffbffff 	.word	0xfffbffff
 80020fc:	ffff80ff 	.word	0xffff80ff
 8002100:	ffffc7ff 	.word	0xffffc7ff
 8002104:	02dc6c00 	.word	0x02dc6c00
 8002108:	20000000 	.word	0x20000000
 800210c:	2000000c 	.word	0x2000000c
 8002110:	fffffeff 	.word	0xfffffeff
 8002114:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HAL_RCC_OscConfig+0x3bc>)
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d0dc      	beq.n	80020dc <HAL_RCC_OscConfig+0x32c>
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fdf4 	bl	8000d10 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800212c:	e009      	b.n	8002142 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fdef 	bl	8000d10 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <HAL_RCC_OscConfig+0x3c0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e010      	b.n	8002164 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_RCC_OscConfig+0x3bc>)
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_RCC_OscConfig+0x3bc>)
 8002158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HAL_RCC_OscConfig+0x3bc>)
 800215c:	4905      	ldr	r1, [pc, #20]	@ (8002174 <HAL_RCC_OscConfig+0x3c4>)
 800215e:	400a      	ands	r2, r1
 8002160:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b006      	add	sp, #24
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	00001388 	.word	0x00001388
 8002174:	efffffff 	.word	0xefffffff

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0e9      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2207      	movs	r2, #7
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d91e      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b73      	ldr	r3, [pc, #460]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2207      	movs	r2, #7
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	4b70      	ldr	r3, [pc, #448]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fdb0 	bl	8000d10 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b4:	e009      	b.n	80021ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7fe fdab 	bl	8000d10 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a6a      	ldr	r2, [pc, #424]	@ (800236c <HAL_RCC_ClockConfig+0x1f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0ca      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ca:	4b67      	ldr	r3, [pc, #412]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1ee      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d017      	beq.n	8002212 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2204      	movs	r2, #4
 80021e8:	4013      	ands	r3, r2
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021ec:	4b60      	ldr	r3, [pc, #384]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a60      	ldr	r2, [pc, #384]	@ (8002374 <HAL_RCC_ClockConfig+0x1fc>)
 80021f2:	401a      	ands	r2, r3
 80021f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	21b0      	movs	r1, #176	@ 0xb0
 80021f8:	0109      	lsls	r1, r1, #4
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_RCC_ClockConfig+0x200>)
 8002204:	4013      	ands	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b58      	ldr	r3, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d055      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800221c:	4b54      	ldr	r3, [pc, #336]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	221c      	movs	r2, #28
 8002222:	4393      	bics	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	4b51      	ldr	r3, [pc, #324]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002238:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	4013      	ands	r3, r2
 8002242:	d11f      	bne.n	8002284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e08b      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4013      	ands	r3, r2
 800225a:	d113      	bne.n	8002284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e07f      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d106      	bne.n	8002276 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002268:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800226a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d108      	bne.n	8002284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e074      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002276:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e06d      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002284:	4b3a      	ldr	r3, [pc, #232]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2207      	movs	r2, #7
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002298:	f7fe fd3a 	bl	8000d10 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022a2:	f7fe fd35 	bl	8000d10 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <HAL_RCC_ClockConfig+0x1f4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e054      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2238      	movs	r2, #56	@ 0x38
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1ec      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2207      	movs	r2, #7
 80022ce:	4013      	ands	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d21e      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2207      	movs	r2, #7
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fd12 	bl	8000d10 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022f0:	e009      	b.n	8002306 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7fe fd0d 	bl	8000d10 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <HAL_RCC_ClockConfig+0x1f4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e02c      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002306:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2204      	movs	r2, #4
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <HAL_RCC_ClockConfig+0x204>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002332:	f000 f82b 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002336:	0001      	movs	r1, r0
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <HAL_RCC_ClockConfig+0x1f8>)
 800233a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	220f      	movs	r2, #15
 8002340:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002342:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_RCC_ClockConfig+0x208>)
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002348:	221f      	movs	r2, #31
 800234a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800234c:	000a      	movs	r2, r1
 800234e:	40da      	lsrs	r2, r3
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_RCC_ClockConfig+0x20c>)
 8002352:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_RCC_ClockConfig+0x210>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fc7d 	bl	8000c58 <HAL_InitTick>
 800235e:	0003      	movs	r3, r0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40022000 	.word	0x40022000
 800236c:	00001388 	.word	0x00001388
 8002370:	40021000 	.word	0x40021000
 8002374:	ffff84ff 	.word	0xffff84ff
 8002378:	fffff0ff 	.word	0xfffff0ff
 800237c:	ffff8fff 	.word	0xffff8fff
 8002380:	0800267c 	.word	0x0800267c
 8002384:	20000000 	.word	0x20000000
 8002388:	2000000c 	.word	0x2000000c

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	2207      	movs	r2, #7
 800239a:	4013      	ands	r3, r2
 800239c:	3301      	adds	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2238      	movs	r2, #56	@ 0x38
 80023a6:	4013      	ands	r3, r2
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0adb      	lsrs	r3, r3, #11
 80023b0:	2207      	movs	r2, #7
 80023b2:	4013      	ands	r3, r2
 80023b4:	2201      	movs	r2, #1
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4819      	ldr	r0, [pc, #100]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c0:	f7fd fea2 	bl	8000108 <__udivsi3>
 80023c4:	0003      	movs	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e01e      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2238      	movs	r2, #56	@ 0x38
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e015      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80023dc:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2238      	movs	r2, #56	@ 0x38
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d103      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2238      	movs	r2, #56	@ 0x38
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b18      	cmp	r3, #24
 80023fa:	d103      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023fc:	23fa      	movs	r3, #250	@ 0xfa
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e001      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7fd fe7c 	bl	8000108 <__udivsi3>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	40021000 	.word	0x40021000
 8002424:	02dc6c00 	.word	0x02dc6c00

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002430:	2313      	movs	r3, #19
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002438:	2312      	movs	r3, #18
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2240      	movs	r2, #64	@ 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	d100      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800244a:	e079      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244c:	2011      	movs	r0, #17
 800244e:	183b      	adds	r3, r7, r0
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002454:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	4013      	ands	r3, r2
 800245e:	d110      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002464:	4b5f      	ldr	r3, [pc, #380]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002466:	2180      	movs	r1, #128	@ 0x80
 8002468:	0549      	lsls	r1, r1, #21
 800246a:	430a      	orrs	r2, r1
 800246c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800246e:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	055b      	lsls	r3, r3, #21
 8002476:	4013      	ands	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247c:	183b      	adds	r3, r7, r0
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002482:	4b58      	ldr	r3, [pc, #352]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002484:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002486:	23c0      	movs	r3, #192	@ 0xc0
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4013      	ands	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d019      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	429a      	cmp	r2, r3
 800249c:	d014      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800249e:	4b51      	ldr	r3, [pc, #324]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	4a51      	ldr	r2, [pc, #324]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a8:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ac:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	0249      	lsls	r1, r1, #9
 80024b2:	430a      	orrs	r2, r1
 80024b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	4b4b      	ldr	r3, [pc, #300]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ba:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024bc:	494b      	ldr	r1, [pc, #300]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024be:	400a      	ands	r2, r1
 80024c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80024c2:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d016      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fc1e 	bl	8000d10 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024d8:	e00c      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fc19 	bl	8000d10 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a42      	ldr	r2, [pc, #264]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d904      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80024ea:	2313      	movs	r3, #19
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
          break;
 80024f2:	e004      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024f4:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d0ed      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80024fe:	2313      	movs	r3, #19
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	4a36      	ldr	r2, [pc, #216]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	4b33      	ldr	r3, [pc, #204]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002518:	430a      	orrs	r2, r1
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800251c:	e005      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251e:	2312      	movs	r3, #18
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2213      	movs	r2, #19
 8002524:	18ba      	adds	r2, r7, r2
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800252a:	2311      	movs	r3, #17
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002538:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800253a:	492e      	ldr	r1, [pc, #184]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800253c:	400a      	ands	r2, r1
 800253e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800254a:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	2203      	movs	r2, #3
 8002550:	4393      	bics	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800255a:	430a      	orrs	r2, r1
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002568:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	4a22      	ldr	r2, [pc, #136]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002578:	430a      	orrs	r2, r1
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	4013      	ands	r3, r2
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002586:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	0899      	lsrs	r1, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002594:	430a      	orrs	r2, r1
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025a2:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	4a15      	ldr	r2, [pc, #84]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	22e0      	movs	r2, #224	@ 0xe0
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80025d4:	2312      	movs	r3, #18
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b006      	add	sp, #24
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	fffffcff 	.word	0xfffffcff
 80025ec:	fffeffff 	.word	0xfffeffff
 80025f0:	00001388 	.word	0x00001388
 80025f4:	efffffff 	.word	0xefffffff
 80025f8:	ffffcfff 	.word	0xffffcfff
 80025fc:	ffff3fff 	.word	0xffff3fff

08002600 <memset>:
 8002600:	0003      	movs	r3, r0
 8002602:	1882      	adds	r2, r0, r2
 8002604:	4293      	cmp	r3, r2
 8002606:	d100      	bne.n	800260a <memset+0xa>
 8002608:	4770      	bx	lr
 800260a:	7019      	strb	r1, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	e7f9      	b.n	8002604 <memset+0x4>

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	2600      	movs	r6, #0
 8002614:	4c0c      	ldr	r4, [pc, #48]	@ (8002648 <__libc_init_array+0x38>)
 8002616:	4d0d      	ldr	r5, [pc, #52]	@ (800264c <__libc_init_array+0x3c>)
 8002618:	1b64      	subs	r4, r4, r5
 800261a:	10a4      	asrs	r4, r4, #2
 800261c:	42a6      	cmp	r6, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	2600      	movs	r6, #0
 8002622:	f000 f819 	bl	8002658 <_init>
 8002626:	4c0a      	ldr	r4, [pc, #40]	@ (8002650 <__libc_init_array+0x40>)
 8002628:	4d0a      	ldr	r5, [pc, #40]	@ (8002654 <__libc_init_array+0x44>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	42a6      	cmp	r6, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	00b3      	lsls	r3, r6, #2
 8002636:	58eb      	ldr	r3, [r5, r3]
 8002638:	4798      	blx	r3
 800263a:	3601      	adds	r6, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	00b3      	lsls	r3, r6, #2
 8002640:	58eb      	ldr	r3, [r5, r3]
 8002642:	4798      	blx	r3
 8002644:	3601      	adds	r6, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	08003418 	.word	0x08003418
 800264c:	08003418 	.word	0x08003418
 8002650:	0800341c 	.word	0x0800341c
 8002654:	08003418 	.word	0x08003418

08002658 <_init>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr

08002664 <_fini>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr
