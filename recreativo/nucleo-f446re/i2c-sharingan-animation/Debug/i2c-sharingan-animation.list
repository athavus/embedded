
i2c-sharingan-animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c18  08002ffc  08002ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c14  08006c14  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c1c  08006c1c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006c24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000000c  08006c30  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006c30  00008488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000837b  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001738  00000000  00000000  000103b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00011af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000654  00000000  00000000  00012328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f57  00000000  00000000  0001297c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b371  00000000  00000000  000338d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83a3  00000000  00000000  0003ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000219c  00000000  00000000  0010702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001091c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002fe4 	.word	0x08002fe4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002fe4 	.word	0x08002fe4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 4d88 	sub.w	sp, sp, #17408	@ 0x4400
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	// 'frame1', 128x64px
	const unsigned char epd_bitmap_frame1 []  = {
 80004fe:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000502:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000506:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800050a:	4ae1      	ldr	r2, [pc, #900]	@ (8000890 <main+0x39c>)
 800050c:	4618      	mov	r0, r3
 800050e:	4611      	mov	r1, r2
 8000510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000514:	461a      	mov	r2, r3
 8000516:	f002 fd57 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame2', 128x64px
	const unsigned char epd_bitmap_frame2 []  = {
 800051a:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800051e:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000522:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8000526:	4adb      	ldr	r2, [pc, #876]	@ (8000894 <main+0x3a0>)
 8000528:	4618      	mov	r0, r3
 800052a:	4611      	mov	r1, r2
 800052c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000530:	461a      	mov	r2, r3
 8000532:	f002 fd49 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame3', 128x64px
	const unsigned char epd_bitmap_frame3 []  = {
 8000536:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 800053a:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 800053e:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 8000542:	4ad5      	ldr	r2, [pc, #852]	@ (8000898 <main+0x3a4>)
 8000544:	4618      	mov	r0, r3
 8000546:	4611      	mov	r1, r2
 8000548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054c:	461a      	mov	r2, r3
 800054e:	f002 fd3b 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame4', 128x64px
	const unsigned char epd_bitmap_frame4 []  = {
 8000552:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8000556:	f103 0308 	add.w	r3, r3, #8
 800055a:	4ad0      	ldr	r2, [pc, #832]	@ (800089c <main+0x3a8>)
 800055c:	3b04      	subs	r3, #4
 800055e:	4611      	mov	r1, r2
 8000560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fd2f 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame5', 128x64px
	const unsigned char epd_bitmap_frame5 []  = {
 800056a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800056e:	f103 0308 	add.w	r3, r3, #8
 8000572:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000576:	4aca      	ldr	r2, [pc, #808]	@ (80008a0 <main+0x3ac>)
 8000578:	4618      	mov	r0, r3
 800057a:	4611      	mov	r1, r2
 800057c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000580:	461a      	mov	r2, r3
 8000582:	f002 fd21 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame6', 128x64px
	const unsigned char epd_bitmap_frame6 []  = {
 8000586:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800058a:	f103 0308 	add.w	r3, r3, #8
 800058e:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8000592:	4ac4      	ldr	r2, [pc, #784]	@ (80008a4 <main+0x3b0>)
 8000594:	4618      	mov	r0, r3
 8000596:	4611      	mov	r1, r2
 8000598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800059c:	461a      	mov	r2, r3
 800059e:	f002 fd13 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame7', 128x64px
	const unsigned char epd_bitmap_frame7 []  = {
 80005a2:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80005a6:	f103 0308 	add.w	r3, r3, #8
 80005aa:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 80005ae:	4abc      	ldr	r2, [pc, #752]	@ (80008a0 <main+0x3ac>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	4611      	mov	r1, r2
 80005b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b8:	461a      	mov	r2, r3
 80005ba:	f002 fd05 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame8', 128x64px
	const unsigned char epd_bitmap_frame8 []  = {
 80005be:	f507 5311 	add.w	r3, r7, #9280	@ 0x2440
 80005c2:	f103 0308 	add.w	r3, r3, #8
 80005c6:	4ab8      	ldr	r2, [pc, #736]	@ (80008a8 <main+0x3b4>)
 80005c8:	3b04      	subs	r3, #4
 80005ca:	4611      	mov	r1, r2
 80005cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fcf9 	bl	8002fc8 <memcpy>
		0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame9', 128x64px
	const unsigned char epd_bitmap_frame9 []  = {
 80005d6:	f507 5311 	add.w	r3, r7, #9280	@ 0x2440
 80005da:	f103 0308 	add.w	r3, r3, #8
 80005de:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80005e2:	4ab2      	ldr	r2, [pc, #712]	@ (80008ac <main+0x3b8>)
 80005e4:	4618      	mov	r0, r3
 80005e6:	4611      	mov	r1, r2
 80005e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ec:	461a      	mov	r2, r3
 80005ee:	f002 fceb 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame10', 128x64px
	const unsigned char epd_bitmap_frame10 []  = {
 80005f2:	f507 5311 	add.w	r3, r7, #9280	@ 0x2440
 80005f6:	f103 0308 	add.w	r3, r3, #8
 80005fa:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80005fe:	4aac      	ldr	r2, [pc, #688]	@ (80008b0 <main+0x3bc>)
 8000600:	4618      	mov	r0, r3
 8000602:	4611      	mov	r1, r2
 8000604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000608:	461a      	mov	r2, r3
 800060a:	f002 fcdd 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame11', 128x64px
	const unsigned char epd_bitmap_frame11 []  = {
 800060e:	f507 5311 	add.w	r3, r7, #9280	@ 0x2440
 8000612:	f103 0308 	add.w	r3, r3, #8
 8000616:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 800061a:	4aa6      	ldr	r2, [pc, #664]	@ (80008b4 <main+0x3c0>)
 800061c:	4618      	mov	r0, r3
 800061e:	4611      	mov	r1, r2
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	461a      	mov	r2, r3
 8000626:	f002 fccf 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame12', 128x64px
	const unsigned char epd_bitmap_frame12 []  = {
 800062a:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800062e:	f103 0308 	add.w	r3, r3, #8
 8000632:	4aa1      	ldr	r2, [pc, #644]	@ (80008b8 <main+0x3c4>)
 8000634:	3b04      	subs	r3, #4
 8000636:	4611      	mov	r1, r2
 8000638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fcc3 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame13', 128x64px
	const unsigned char epd_bitmap_frame13 []  = {
 8000642:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000646:	f103 0308 	add.w	r3, r3, #8
 800064a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800064e:	4a9b      	ldr	r2, [pc, #620]	@ (80008bc <main+0x3c8>)
 8000650:	4618      	mov	r0, r3
 8000652:	4611      	mov	r1, r2
 8000654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000658:	461a      	mov	r2, r3
 800065a:	f002 fcb5 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame14', 128x64px
	const unsigned char epd_bitmap_frame14 []  = {
 800065e:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000662:	f103 0308 	add.w	r3, r3, #8
 8000666:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800066a:	4a95      	ldr	r2, [pc, #596]	@ (80008c0 <main+0x3cc>)
 800066c:	4618      	mov	r0, r3
 800066e:	4611      	mov	r1, r2
 8000670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000674:	461a      	mov	r2, r3
 8000676:	f002 fca7 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame15', 128x64px
	const unsigned char epd_bitmap_frame15 []  = {
 800067a:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800067e:	f103 0308 	add.w	r3, r3, #8
 8000682:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 8000686:	4a8f      	ldr	r2, [pc, #572]	@ (80008c4 <main+0x3d0>)
 8000688:	4618      	mov	r0, r3
 800068a:	4611      	mov	r1, r2
 800068c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000690:	461a      	mov	r2, r3
 8000692:	f002 fc99 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame16', 128x64px
	const unsigned char epd_bitmap_frame16 []  = {
 8000696:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800069a:	4a8a      	ldr	r2, [pc, #552]	@ (80008c4 <main+0x3d0>)
 800069c:	3b04      	subs	r3, #4
 800069e:	4611      	mov	r1, r2
 80006a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc8f 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};
	// 'frame17', 128x64px
	const unsigned char epd_bitmap_frame17 []  = {
 80006aa:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80006ae:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80006b2:	4a85      	ldr	r2, [pc, #532]	@ (80008c8 <main+0x3d4>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	4611      	mov	r1, r2
 80006b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006bc:	461a      	mov	r2, r3
 80006be:	f002 fc83 	bl	8002fc8 <memcpy>
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};

	// Array of all bitmaps for convenience. (Total bytes used to store images in  = 17680)
	const unsigned char* epd_bitmap_allArray[17] = {
 80006c2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80006c6:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80006ca:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80006ce:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80006d8:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80006dc:	f507 53e2 	add.w	r3, r7, #7232	@ 0x1c40
 80006e0:	f103 0308 	add.w	r3, r3, #8
 80006e4:	3b04      	subs	r3, #4
 80006e6:	6053      	str	r3, [r2, #4]
 80006e8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80006ec:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80006f0:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 80006f4:	f103 0308 	add.w	r3, r3, #8
 80006f8:	3b04      	subs	r3, #4
 80006fa:	6093      	str	r3, [r2, #8]
 80006fc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000700:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8000704:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000708:	f103 0308 	add.w	r3, r3, #8
 800070c:	3b04      	subs	r3, #4
 800070e:	60d3      	str	r3, [r2, #12]
 8000710:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000714:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8000718:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800071c:	f103 0308 	add.w	r3, r3, #8
 8000720:	3b04      	subs	r3, #4
 8000722:	6113      	str	r3, [r2, #16]
 8000724:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000728:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800072c:	f607 4348 	addw	r3, r7, #3144	@ 0xc48
 8000730:	3b04      	subs	r3, #4
 8000732:	6153      	str	r3, [r2, #20]
 8000734:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000738:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800073c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8000740:	3b04      	subs	r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000748:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800074c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000750:	3b04      	subs	r3, #4
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000758:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800075c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000760:	3b04      	subs	r3, #4
 8000762:	6213      	str	r3, [r2, #32]
 8000764:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000768:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800076c:	f507 5271 	add.w	r2, r7, #15424	@ 0x3c40
 8000770:	f102 0204 	add.w	r2, r2, #4
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
 8000776:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800077a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800077e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8000782:	f102 0204 	add.w	r2, r2, #4
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
 8000788:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800078c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8000790:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8000794:	f103 0308 	add.w	r3, r3, #8
 8000798:	3b04      	subs	r3, #4
 800079a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800079c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80007a0:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80007a4:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80007a8:	f103 0308 	add.w	r3, r3, #8
 80007ac:	3b04      	subs	r3, #4
 80007ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80007b4:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80007b8:	f507 5331 	add.w	r3, r7, #11328	@ 0x2c40
 80007bc:	f103 0308 	add.w	r3, r3, #8
 80007c0:	3b04      	subs	r3, #4
 80007c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80007c4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80007c8:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80007cc:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 80007d0:	f103 0308 	add.w	r3, r3, #8
 80007d4:	3b04      	subs	r3, #4
 80007d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80007d8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80007dc:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80007e0:	f507 5311 	add.w	r3, r7, #9280	@ 0x2440
 80007e4:	f103 0308 	add.w	r3, r3, #8
 80007e8:	3b04      	subs	r3, #4
 80007ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007ec:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80007f0:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80007f4:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80007f8:	f103 0308 	add.w	r3, r3, #8
 80007fc:	3b04      	subs	r3, #4
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fcec 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f862 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f8fc 	bl	8000a04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800080c:	f000 f8cc 	bl	80009a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8000810:	f000 fa58 	bl	8000cc4 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cont = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 800081a:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 800081e:	6013      	str	r3, [r2, #0]
  while (1)
  {
      SSD1306_Clear();
 8000820:	f000 fc38 	bl	8001094 <SSD1306_Clear>
      SSD1306_GotoXY (0,0);
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fbb6 	bl	8000f98 <SSD1306_GotoXY>
      SSD1306_DrawBitmap(0, 0, epd_bitmap_allArray[cont], 128, 64, SSD1306_COLOR_WHITE);
 800082c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000830:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8000834:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 8000838:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000842:	2301      	movs	r3, #1
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	2340      	movs	r3, #64	@ 0x40
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fbb8 	bl	8000fc4 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 8000854:	f000 fafa 	bl	8000e4c <SSD1306_UpdateScreen>
      HAL_Delay(59);
 8000858:	203b      	movs	r0, #59	@ 0x3b
 800085a:	f000 fd31 	bl	80012c0 <HAL_Delay>
      cont++;
 800085e:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000862:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 800086e:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000872:	6013      	str	r3, [r2, #0]
      if (cont == 17) {
 8000874:	f507 4388 	add.w	r3, r7, #17408	@ 0x4400
 8000878:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b11      	cmp	r3, #17
 8000880:	d1ce      	bne.n	8000820 <main+0x32c>
	  cont = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	f507 4288 	add.w	r2, r7, #17408	@ 0x4400
 8000888:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 800088c:	6013      	str	r3, [r2, #0]
      SSD1306_Clear();
 800088e:	e7c7      	b.n	8000820 <main+0x32c>
 8000890:	08002ffc 	.word	0x08002ffc
 8000894:	080033fc 	.word	0x080033fc
 8000898:	080037fc 	.word	0x080037fc
 800089c:	08003bfc 	.word	0x08003bfc
 80008a0:	08003ffc 	.word	0x08003ffc
 80008a4:	080043fc 	.word	0x080043fc
 80008a8:	080047fc 	.word	0x080047fc
 80008ac:	08004bfc 	.word	0x08004bfc
 80008b0:	08004ffc 	.word	0x08004ffc
 80008b4:	080053fc 	.word	0x080053fc
 80008b8:	080057fc 	.word	0x080057fc
 80008bc:	08005bfc 	.word	0x08005bfc
 80008c0:	08005ffc 	.word	0x08005ffc
 80008c4:	080063fc 	.word	0x080063fc
 80008c8:	080067fc 	.word	0x080067fc

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	@ 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	@ 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fb48 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <SystemClock_Config+0xd4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	4a29      	ldr	r2, [pc, #164]	@ (80009a0 <SystemClock_Config+0xd4>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <SystemClock_Config+0xd4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <SystemClock_Config+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000918:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <SystemClock_Config+0xd8>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <SystemClock_Config+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000940:	2310      	movs	r3, #16
 8000942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000944:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000948:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094a:	2304      	movs	r3, #4
 800094c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f86a 	bl	8002a34 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000966:	f000 f8cb 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2302      	movs	r3, #2
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fd1e 	bl	80023c8 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000992:	f000 f8b5 	bl	8000b00 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	@ 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <MX_I2C1_Init+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_I2C1_Init+0x58>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_I2C1_Init+0x50>)
 80009e6:	f000 ff23 	bl	8001830 <HAL_I2C_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f886 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000028 	.word	0x20000028
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00061a80 	.word	0x00061a80

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a34      	ldr	r2, [pc, #208]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a26      	ldr	r2, [pc, #152]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <MX_GPIO_Init+0xf0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	481a      	ldr	r0, [pc, #104]	@ (8000af8 <MX_GPIO_Init+0xf4>)
 8000a90:	f000 feb4 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	@ (8000afc <MX_GPIO_Init+0xf8>)
 8000aac:	f000 fd12 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <MX_GPIO_Init+0xf4>)
 8000acc:	f000 fd02 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_GPIO_Init+0xf4>)
 8000ae8:	f000 fcf4 	bl	80014d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020800 	.word	0x40020800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4a:	2007      	movs	r0, #7
 8000b4c:	f000 fc8e 	bl	800146c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_I2C_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12c      	bne.n	8000bd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bac:	2304      	movs	r3, #4
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <HAL_I2C_MspInit+0x8c>)
 8000bb8:	f000 fc8c 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_I2C_MspInit+0x88>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c42:	f000 fb1d 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f002 f96f 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc27 	bl	80004f4 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb4:	08006c24 	.word	0x08006c24
  ldr r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cbc:	20000488 	.word	0x20000488

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cca:	f000 f9ed 	bl	80010a8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cce:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2178      	movs	r1, #120	@ 0x78
 8000cd6:	485b      	ldr	r0, [pc, #364]	@ (8000e44 <SSD1306_Init+0x180>)
 8000cd8:	f000 ffec 	bl	8001cb4 <HAL_I2C_IsDeviceReady>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e0a9      	b.n	8000e3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000ce6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000cea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cec:	e002      	b.n	8000cf4 <SSD1306_Init+0x30>
		p--;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cfa:	22ae      	movs	r2, #174	@ 0xae
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2078      	movs	r0, #120	@ 0x78
 8000d00:	f000 fa4e 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d04:	2220      	movs	r2, #32
 8000d06:	2100      	movs	r1, #0
 8000d08:	2078      	movs	r0, #120	@ 0x78
 8000d0a:	f000 fa49 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d0e:	2210      	movs	r2, #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	@ 0x78
 8000d14:	f000 fa44 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d18:	22b0      	movs	r2, #176	@ 0xb0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2078      	movs	r0, #120	@ 0x78
 8000d1e:	f000 fa3f 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d22:	22c8      	movs	r2, #200	@ 0xc8
 8000d24:	2100      	movs	r1, #0
 8000d26:	2078      	movs	r0, #120	@ 0x78
 8000d28:	f000 fa3a 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2078      	movs	r0, #120	@ 0x78
 8000d32:	f000 fa35 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d36:	2210      	movs	r2, #16
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2078      	movs	r0, #120	@ 0x78
 8000d3c:	f000 fa30 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d40:	2240      	movs	r2, #64	@ 0x40
 8000d42:	2100      	movs	r1, #0
 8000d44:	2078      	movs	r0, #120	@ 0x78
 8000d46:	f000 fa2b 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d4a:	2281      	movs	r2, #129	@ 0x81
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2078      	movs	r0, #120	@ 0x78
 8000d50:	f000 fa26 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d54:	22ff      	movs	r2, #255	@ 0xff
 8000d56:	2100      	movs	r1, #0
 8000d58:	2078      	movs	r0, #120	@ 0x78
 8000d5a:	f000 fa21 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d5e:	22a1      	movs	r2, #161	@ 0xa1
 8000d60:	2100      	movs	r1, #0
 8000d62:	2078      	movs	r0, #120	@ 0x78
 8000d64:	f000 fa1c 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d68:	22a6      	movs	r2, #166	@ 0xa6
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2078      	movs	r0, #120	@ 0x78
 8000d6e:	f000 fa17 	bl	80011a0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d72:	22a8      	movs	r2, #168	@ 0xa8
 8000d74:	2100      	movs	r1, #0
 8000d76:	2078      	movs	r0, #120	@ 0x78
 8000d78:	f000 fa12 	bl	80011a0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000d7c:	223f      	movs	r2, #63	@ 0x3f
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2078      	movs	r0, #120	@ 0x78
 8000d82:	f000 fa0d 	bl	80011a0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d86:	22a4      	movs	r2, #164	@ 0xa4
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2078      	movs	r0, #120	@ 0x78
 8000d8c:	f000 fa08 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d90:	22d3      	movs	r2, #211	@ 0xd3
 8000d92:	2100      	movs	r1, #0
 8000d94:	2078      	movs	r0, #120	@ 0x78
 8000d96:	f000 fa03 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2078      	movs	r0, #120	@ 0x78
 8000da0:	f000 f9fe 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000da4:	22d5      	movs	r2, #213	@ 0xd5
 8000da6:	2100      	movs	r1, #0
 8000da8:	2078      	movs	r0, #120	@ 0x78
 8000daa:	f000 f9f9 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000dae:	22f0      	movs	r2, #240	@ 0xf0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2078      	movs	r0, #120	@ 0x78
 8000db4:	f000 f9f4 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000db8:	22d9      	movs	r2, #217	@ 0xd9
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2078      	movs	r0, #120	@ 0x78
 8000dbe:	f000 f9ef 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dc2:	2222      	movs	r2, #34	@ 0x22
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	@ 0x78
 8000dc8:	f000 f9ea 	bl	80011a0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dcc:	22da      	movs	r2, #218	@ 0xda
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2078      	movs	r0, #120	@ 0x78
 8000dd2:	f000 f9e5 	bl	80011a0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000dd6:	2212      	movs	r2, #18
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 f9e0 	bl	80011a0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000de0:	22db      	movs	r2, #219	@ 0xdb
 8000de2:	2100      	movs	r1, #0
 8000de4:	2078      	movs	r0, #120	@ 0x78
 8000de6:	f000 f9db 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dea:	2220      	movs	r2, #32
 8000dec:	2100      	movs	r1, #0
 8000dee:	2078      	movs	r0, #120	@ 0x78
 8000df0:	f000 f9d6 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000df4:	228d      	movs	r2, #141	@ 0x8d
 8000df6:	2100      	movs	r1, #0
 8000df8:	2078      	movs	r0, #120	@ 0x78
 8000dfa:	f000 f9d1 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000dfe:	2214      	movs	r2, #20
 8000e00:	2100      	movs	r1, #0
 8000e02:	2078      	movs	r0, #120	@ 0x78
 8000e04:	f000 f9cc 	bl	80011a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e08:	22af      	movs	r2, #175	@ 0xaf
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f000 f9c7 	bl	80011a0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e12:	222e      	movs	r2, #46	@ 0x2e
 8000e14:	2100      	movs	r1, #0
 8000e16:	2078      	movs	r0, #120	@ 0x78
 8000e18:	f000 f9c2 	bl	80011a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f843 	bl	8000ea8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000e22:	f000 f813 	bl	8000e4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <SSD1306_Init+0x184>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <SSD1306_Init+0x184>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <SSD1306_Init+0x184>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000028 	.word	0x20000028
 8000e48:	2000047c 	.word	0x2000047c

08000e4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	e01d      	b.n	8000e94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3b50      	subs	r3, #80	@ 0x50
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f99c 	bl	80011a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2078      	movs	r0, #120	@ 0x78
 8000e6e:	f000 f997 	bl	80011a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e72:	2210      	movs	r2, #16
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f992 	bl	80011a0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	01db      	lsls	r3, r3, #7
 8000e80:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <SSD1306_UpdateScreen+0x58>)
 8000e82:	441a      	add	r2, r3
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	2078      	movs	r0, #120	@ 0x78
 8000e8a:	f000 f923 	bl	80010d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3301      	adds	r3, #1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d9de      	bls.n	8000e58 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000007c 	.word	0x2000007c

08000ea8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <SSD1306_Fill+0x14>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e000      	b.n	8000ebe <SSD1306_Fill+0x16>
 8000ebc:	23ff      	movs	r3, #255	@ 0xff
 8000ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <SSD1306_Fill+0x2c>)
 8000ec6:	f002 f853 	bl	8002f70 <memset>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000007c 	.word	0x2000007c

08000ed8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	70fb      	strb	r3, [r7, #3]
	if (
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eee:	d848      	bhi.n	8000f82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ef4:	d845      	bhi.n	8000f82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <SSD1306_DrawPixel+0xb8>)
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d11a      	bne.n	8000f48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f12:	88fa      	ldrh	r2, [r7, #6]
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	01db      	lsls	r3, r3, #7
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <SSD1306_DrawPixel+0xbc>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b259      	sxtb	r1, r3
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	01db      	lsls	r3, r3, #7
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2c9      	uxtb	r1, r1
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <SSD1306_DrawPixel+0xbc>)
 8000f44:	54d1      	strb	r1, [r2, r3]
 8000f46:	e01d      	b.n	8000f84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b298      	uxth	r0, r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	01db      	lsls	r3, r3, #7
 8000f54:	4413      	add	r3, r2
 8000f56:	4a0f      	ldr	r2, [pc, #60]	@ (8000f94 <SSD1306_DrawPixel+0xbc>)
 8000f58:	5cd3      	ldrb	r3, [r2, r3]
 8000f5a:	b25a      	sxtb	r2, r3
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b259      	sxtb	r1, r3
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	4603      	mov	r3, r0
 8000f76:	01db      	lsls	r3, r3, #7
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2c9      	uxtb	r1, r1
 8000f7c:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SSD1306_DrawPixel+0xbc>)
 8000f7e:	54d1      	strb	r1, [r2, r3]
 8000f80:	e000      	b.n	8000f84 <SSD1306_DrawPixel+0xac>
		return;
 8000f82:	bf00      	nop
	}
}
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000047c 	.word	0x2000047c
 8000f94:	2000007c 	.word	0x2000007c

08000f98 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	80fb      	strh	r3, [r7, #6]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fa8:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <SSD1306_GotoXY+0x28>)
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <SSD1306_GotoXY+0x28>)
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	8053      	strh	r3, [r2, #2]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	2000047c 	.word	0x2000047c

08000fc4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	81bb      	strh	r3, [r7, #12]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	3307      	adds	r3, #7
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da00      	bge.n	8000fe6 <SSD1306_DrawBitmap+0x22>
 8000fe4:	3307      	adds	r3, #7
 8000fe6:	10db      	asrs	r3, r3, #3
 8000fe8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	82bb      	strh	r3, [r7, #20]
 8000ff2:	e044      	b.n	800107e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	827b      	strh	r3, [r7, #18]
 8000ff8:	e02f      	b.n	800105a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ffa:	8a7b      	ldrh	r3, [r7, #18]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e012      	b.n	8001032 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800100c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001010:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001014:	fb03 f202 	mul.w	r2, r3, r2
 8001018:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da00      	bge.n	8001022 <SSD1306_DrawBitmap+0x5e>
 8001020:	3307      	adds	r3, #7
 8001022:	10db      	asrs	r3, r3, #3
 8001024:	b21b      	sxth	r3, r3
 8001026:	4413      	add	r3, r2
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da09      	bge.n	800104e <SSD1306_DrawBitmap+0x8a>
 800103a:	89fa      	ldrh	r2, [r7, #14]
 800103c:	8a7b      	ldrh	r3, [r7, #18]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	89b9      	ldrh	r1, [r7, #12]
 8001044:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff45 	bl	8000ed8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800104e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001052:	b29b      	uxth	r3, r3
 8001054:	3301      	adds	r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	827b      	strh	r3, [r7, #18]
 800105a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbc9      	blt.n	8000ffa <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001066:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800106a:	b29b      	uxth	r3, r3
 800106c:	3301      	adds	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	82bb      	strh	r3, [r7, #20]
 8001072:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001076:	b29b      	uxth	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	81bb      	strh	r3, [r7, #12]
 800107e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001082:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbb4      	blt.n	8000ff4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff05 	bl	8000ea8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800109e:	f7ff fed5 	bl	8000e4c <SSD1306_UpdateScreen>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <ssd1306_I2C_Init+0x28>)
 80010b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010b2:	e002      	b.n	80010ba <ssd1306_I2C_Init+0x12>
		p--;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f9      	bne.n	80010b4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	0003d090 	.word	0x0003d090

080010d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b0c7      	sub	sp, #284	@ 0x11c
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80010e2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80010e6:	600a      	str	r2, [r1, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80010f2:	4622      	mov	r2, r4
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010fa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80010fe:	4602      	mov	r2, r0
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001106:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800110a:	460a      	mov	r2, r1
 800110c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800110e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001116:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800111a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001128:	e015      	b.n	8001156 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800112a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800112e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001132:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	441a      	add	r2, r3
 800113a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800113e:	3301      	adds	r3, #1
 8001140:	7811      	ldrb	r1, [r2, #0]
 8001142:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001146:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800114a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800114c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001150:	3301      	adds	r3, #1
 8001152:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001156:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800115a:	b29b      	uxth	r3, r3
 800115c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001160:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d8df      	bhi.n	800112a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800116a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800116e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b299      	uxth	r1, r3
 8001176:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800117a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b29b      	uxth	r3, r3
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	200a      	movs	r0, #10
 800118a:	9000      	str	r0, [sp, #0]
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <ssd1306_I2C_WriteMulti+0xc8>)
 800118e:	f000 fc93 	bl	8001ab8 <HAL_I2C_Master_Transmit>
}
 8001192:	bf00      	nop
 8001194:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000028 	.word	0x20000028

080011a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	460b      	mov	r3, r1
 80011ac:	71bb      	strb	r3, [r7, #6]
 80011ae:	4613      	mov	r3, r2
 80011b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80011b6:	797b      	ldrb	r3, [r7, #5]
 80011b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	b299      	uxth	r1, r3
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	230a      	movs	r3, #10
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2302      	movs	r3, #2
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <ssd1306_I2C_Write+0x38>)
 80011ca:	f000 fc75 	bl	8001ab8 <HAL_I2C_Master_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000028 	.word	0x20000028

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f931 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fc7c 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f93b 	bl	80014ba <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f911 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000484 	.word	0x20000484

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000484 	.word	0x20000484

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff47 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff5c 	bl	8001350 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb0 	bl	8001428 <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	@ 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e165      	b.n	80017bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8154 	bne.w	80017b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ae 	beq.w	80017b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <HAL_GPIO_Init+0x300>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a5c      	ldr	r2, [pc, #368]	@ (80017d4 <HAL_GPIO_Init+0x300>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b5a      	ldr	r3, [pc, #360]	@ (80017d4 <HAL_GPIO_Init+0x300>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a58      	ldr	r2, [pc, #352]	@ (80017d8 <HAL_GPIO_Init+0x304>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	@ (80017dc <HAL_GPIO_Init+0x308>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4e      	ldr	r2, [pc, #312]	@ (80017e0 <HAL_GPIO_Init+0x30c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4d      	ldr	r2, [pc, #308]	@ (80017e4 <HAL_GPIO_Init+0x310>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	@ (80017e8 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4b      	ldr	r2, [pc, #300]	@ (80017ec <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x20a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4a      	ldr	r2, [pc, #296]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x206>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a49      	ldr	r2, [pc, #292]	@ (80017f4 <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x202>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00c      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e00a      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016da:	2305      	movs	r3, #5
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016de:	2304      	movs	r3, #4
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x21c>
 80016ee:	2300      	movs	r3, #0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001700:	4935      	ldr	r1, [pc, #212]	@ (80017d8 <HAL_GPIO_Init+0x304>)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170e:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001732:	4a31      	ldr	r2, [pc, #196]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001738:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175c:	4a26      	ldr	r2, [pc, #152]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001762:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_GPIO_Init+0x324>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	f67f ae96 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e12b      	b.n	8001a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff f980 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2224      	movs	r2, #36	@ 0x24
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001894:	f000 fe8a 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8001898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a81      	ldr	r2, [pc, #516]	@ (8001aa4 <HAL_I2C_Init+0x274>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d807      	bhi.n	80018b4 <HAL_I2C_Init+0x84>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4a80      	ldr	r2, [pc, #512]	@ (8001aa8 <HAL_I2C_Init+0x278>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	bf94      	ite	ls
 80018ac:	2301      	movls	r3, #1
 80018ae:	2300      	movhi	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	e006      	b.n	80018c2 <HAL_I2C_Init+0x92>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4a7d      	ldr	r2, [pc, #500]	@ (8001aac <HAL_I2C_Init+0x27c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	bf94      	ite	ls
 80018bc:	2301      	movls	r3, #1
 80018be:	2300      	movhi	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0e7      	b.n	8001a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4a78      	ldr	r2, [pc, #480]	@ (8001ab0 <HAL_I2C_Init+0x280>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0c9b      	lsrs	r3, r3, #18
 80018d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa4 <HAL_I2C_Init+0x274>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d802      	bhi.n	8001904 <HAL_I2C_Init+0xd4>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3301      	adds	r3, #1
 8001902:	e009      	b.n	8001918 <HAL_I2C_Init+0xe8>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	4a69      	ldr	r2, [pc, #420]	@ (8001ab4 <HAL_I2C_Init+0x284>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	3301      	adds	r3, #1
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	430b      	orrs	r3, r1
 800191e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800192a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	495c      	ldr	r1, [pc, #368]	@ (8001aa4 <HAL_I2C_Init+0x274>)
 8001934:	428b      	cmp	r3, r1
 8001936:	d819      	bhi.n	800196c <HAL_I2C_Init+0x13c>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e59      	subs	r1, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fbb1 f3f3 	udiv	r3, r1, r3
 8001946:	1c59      	adds	r1, r3, #1
 8001948:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800194c:	400b      	ands	r3, r1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <HAL_I2C_Init+0x138>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1e59      	subs	r1, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001966:	e051      	b.n	8001a0c <HAL_I2C_Init+0x1dc>
 8001968:	2304      	movs	r3, #4
 800196a:	e04f      	b.n	8001a0c <HAL_I2C_Init+0x1dc>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d111      	bne.n	8001998 <HAL_I2C_Init+0x168>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e012      	b.n	80019be <HAL_I2C_Init+0x18e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e58      	subs	r0, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	0099      	lsls	r1, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_Init+0x196>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e022      	b.n	8001a0c <HAL_I2C_Init+0x1dc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10e      	bne.n	80019ec <HAL_I2C_Init+0x1bc>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1e58      	subs	r0, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6859      	ldr	r1, [r3, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	440b      	add	r3, r1
 80019dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ea:	e00f      	b.n	8001a0c <HAL_I2C_Init+0x1dc>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e58      	subs	r0, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	0099      	lsls	r1, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	6809      	ldr	r1, [r1, #0]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6911      	ldr	r1, [r2, #16]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68d2      	ldr	r2, [r2, #12]
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	000186a0 	.word	0x000186a0
 8001aa8:	001e847f 	.word	0x001e847f
 8001aac:	003d08ff 	.word	0x003d08ff
 8001ab0:	431bde83 	.word	0x431bde83
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	817b      	strh	r3, [r7, #10]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff fbec 	bl	80012a8 <HAL_GetTick>
 8001ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	f040 80e0 	bne.w	8001ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2319      	movs	r3, #25
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4970      	ldr	r1, [pc, #448]	@ (8001cac <HAL_I2C_Master_Transmit+0x1f4>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fa92 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0d3      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_I2C_Master_Transmit+0x50>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e0cc      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d007      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2221      	movs	r2, #33	@ 0x21
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	893a      	ldrh	r2, [r7, #8]
 8001b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	@ (8001cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b70:	8979      	ldrh	r1, [r7, #10]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f9ca 	bl	8001f10 <I2C_MasterRequestWrite>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e08d      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b9c:	e066      	b.n	8001c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb50 	bl	8002248 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d107      	bne.n	8001bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06b      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d11b      	bne.n	8001c40 <HAL_I2C_Master_Transmit+0x188>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d017      	beq.n	8001c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	6a39      	ldr	r1, [r7, #32]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fb47 	bl	80022d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d107      	bne.n	8001c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01a      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d194      	bne.n	8001b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	00100002 	.word	0x00100002
 8001cb0:	ffff0000 	.word	0xffff0000

08001cb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff faf0 	bl	80012a8 <HAL_GetTick>
 8001cc8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	f040 8111 	bne.w	8001efe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2319      	movs	r3, #25
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4988      	ldr	r1, [pc, #544]	@ (8001f08 <HAL_I2C_IsDeviceReady+0x254>)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f994 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e104      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_IsDeviceReady+0x50>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0fd      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d007      	beq.n	8001d2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2224      	movs	r2, #36	@ 0x24
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a70      	ldr	r2, [pc, #448]	@ (8001f0c <HAL_I2C_IsDeviceReady+0x258>)
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f952 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d84:	d103      	bne.n	8001d8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0b6      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001da0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fa81 	bl	80012a8 <HAL_GetTick>
 8001da6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	bf0c      	ite	eq
 8001db6:	2301      	moveq	r3, #1
 8001db8:	2300      	movne	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001dd6:	e025      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dd8:	f7ff fa66 	bl	80012a8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d302      	bcc.n	8001dee <HAL_I2C_IsDeviceReady+0x13a>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	22a0      	movs	r2, #160	@ 0xa0
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e2e:	d005      	beq.n	8001e3c <HAL_I2C_IsDeviceReady+0x188>
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_I2C_IsDeviceReady+0x188>
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0cd      	beq.n	8001dd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d129      	bne.n	8001ea6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4921      	ldr	r1, [pc, #132]	@ (8001f08 <HAL_I2C_IsDeviceReady+0x254>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f8c6 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e036      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e02c      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ebe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	490f      	ldr	r1, [pc, #60]	@ (8001f08 <HAL_I2C_IsDeviceReady+0x254>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f8a2 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e012      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f4ff af32 	bcc.w	8001d4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	00100002 	.word	0x00100002
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d006      	beq.n	8001f3a <I2C_MasterRequestWrite+0x2a>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d003      	beq.n	8001f3a <I2C_MasterRequestWrite+0x2a>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f38:	d108      	bne.n	8001f4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e00b      	b.n	8001f64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	d107      	bne.n	8001f64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f84f 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8a:	d103      	bne.n	8001f94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e035      	b.n	8002004 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fa0:	d108      	bne.n	8001fb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	e01b      	b.n	8001fec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fb4:	897b      	ldrh	r3, [r7, #10]
 8001fb6:	11db      	asrs	r3, r3, #7
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f003 0306 	and.w	r3, r3, #6
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f063 030f 	orn	r3, r3, #15
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	490e      	ldr	r1, [pc, #56]	@ (800200c <I2C_MasterRequestWrite+0xfc>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f898 	bl	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e010      	b.n	8002004 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4907      	ldr	r1, [pc, #28]	@ (8002010 <I2C_MasterRequestWrite+0x100>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f888 	bl	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00010008 	.word	0x00010008
 8002010:	00010002 	.word	0x00010002

08002014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002024:	e048      	b.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d044      	beq.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7ff f93b 	bl	80012a8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d139      	bne.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0c1b      	lsrs	r3, r3, #16
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10d      	bne.n	800206a <I2C_WaitOnFlagUntilTimeout+0x56>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	43da      	mvns	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	e00c      	b.n	8002084 <I2C_WaitOnFlagUntilTimeout+0x70>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	43da      	mvns	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4013      	ands	r3, r2
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	429a      	cmp	r2, r3
 8002088:	d116      	bne.n	80020b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e023      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <I2C_WaitOnFlagUntilTimeout+0xca>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4013      	ands	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	e00c      	b.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	43da      	mvns	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d093      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002116:	e071      	b.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002126:	d123      	bne.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002136:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e067      	b.n	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d041      	beq.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002178:	f7ff f896 	bl	80012a8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d302      	bcc.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d136      	bne.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10c      	bne.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e00b      	b.n	80021ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	43da      	mvns	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4013      	ands	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e021      	b.n	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10c      	bne.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	43da      	mvns	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e00b      	b.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f af6d 	bne.w	8002118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002254:	e034      	b.n	80022c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f886 	bl	8002368 <I2C_IsAcknowledgeFailed>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e034      	b.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d028      	beq.n	80022c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7ff f81b 	bl	80012a8 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11d      	bne.n	80022c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b80      	cmp	r3, #128	@ 0x80
 8002290:	d016      	beq.n	80022c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ca:	2b80      	cmp	r3, #128	@ 0x80
 80022cc:	d1c3      	bne.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e4:	e034      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f83e 	bl	8002368 <I2C_IsAcknowledgeFailed>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e034      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d028      	beq.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe ffd3 	bl	80012a8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d11d      	bne.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d016      	beq.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d1c3      	bne.n	80022e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237e:	d11b      	bne.n	80023b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002388:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fef6 	bl	80012a8 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe fef2 	bl	80012a8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f841 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fe56 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	08006bfc 	.word	0x08006bfc
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	@ (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08006c0c 	.word	0x08006c0c

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0ae      	sub	sp, #184	@ 0xb8
 80025da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b0c      	cmp	r3, #12
 8002604:	f200 8206 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x440>
 8002608:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002645 	.word	0x08002645
 8002614:	08002a15 	.word	0x08002a15
 8002618:	08002a15 	.word	0x08002a15
 800261c:	08002a15 	.word	0x08002a15
 8002620:	0800264d 	.word	0x0800264d
 8002624:	08002a15 	.word	0x08002a15
 8002628:	08002a15 	.word	0x08002a15
 800262c:	08002a15 	.word	0x08002a15
 8002630:	08002655 	.word	0x08002655
 8002634:	08002a15 	.word	0x08002a15
 8002638:	08002a15 	.word	0x08002a15
 800263c:	08002a15 	.word	0x08002a15
 8002640:	08002845 	.word	0x08002845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4bb9      	ldr	r3, [pc, #740]	@ (800292c <HAL_RCC_GetSysClockFreq+0x358>)
 8002646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800264a:	e1e7      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264c:	4bb8      	ldr	r3, [pc, #736]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002652:	e1e3      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4bb4      	ldr	r3, [pc, #720]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002660:	4bb1      	ldr	r3, [pc, #708]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d071      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4bae      	ldr	r3, [pc, #696]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002678:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800268e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026c4:	4649      	mov	r1, r9
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4641      	mov	r1, r8
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4641      	mov	r1, r8
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4641      	mov	r1, r8
 80026d4:	1a51      	subs	r1, r2, r1
 80026d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026d8:	4649      	mov	r1, r9
 80026da:	eb63 0301 	sbc.w	r3, r3, r1
 80026de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026ec:	4649      	mov	r1, r9
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4641      	mov	r1, r8
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4641      	mov	r1, r8
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4622      	mov	r2, r4
 8002702:	189b      	adds	r3, r3, r2
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30
 8002706:	462b      	mov	r3, r5
 8002708:	460a      	mov	r2, r1
 800270a:	eb42 0303 	adc.w	r3, r2, r3
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800271c:	4629      	mov	r1, r5
 800271e:	024b      	lsls	r3, r1, #9
 8002720:	4621      	mov	r1, r4
 8002722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002726:	4621      	mov	r1, r4
 8002728:	024a      	lsls	r2, r1, #9
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800273c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002740:	f7fd fd60 	bl	8000204 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800274e:	e067      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800275c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800276a:	2300      	movs	r3, #0
 800276c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800276e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4621      	mov	r1, r4
 800278c:	1a51      	subs	r1, r2, r1
 800278e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002790:	4629      	mov	r1, r5
 8002792:	eb63 0301 	sbc.w	r3, r3, r1
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027a4:	4649      	mov	r1, r9
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ae:	4641      	mov	r1, r8
 80027b0:	018a      	lsls	r2, r1, #6
 80027b2:	4641      	mov	r1, r8
 80027b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027b8:	4649      	mov	r1, r9
 80027ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d2:	4692      	mov	sl, r2
 80027d4:	469b      	mov	fp, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb1a 0303 	adds.w	r3, sl, r3
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	462b      	mov	r3, r5
 80027e0:	eb4b 0303 	adc.w	r3, fp, r3
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002808:	2200      	movs	r2, #0
 800280a:	673b      	str	r3, [r7, #112]	@ 0x70
 800280c:	677a      	str	r2, [r7, #116]	@ 0x74
 800280e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002812:	f7fd fcf7 	bl	8000204 <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4613      	mov	r3, r2
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002820:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002842:	e0eb      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800284c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002850:	4b35      	ldr	r3, [pc, #212]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d06b      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285c:	4b32      	ldr	r3, [pc, #200]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002870:	2300      	movs	r3, #0
 8002872:	667b      	str	r3, [r7, #100]	@ 0x64
 8002874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002878:	4622      	mov	r2, r4
 800287a:	462b      	mov	r3, r5
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	0159      	lsls	r1, r3, #5
 8002886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288a:	0150      	lsls	r0, r2, #5
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4621      	mov	r1, r4
 8002892:	1a51      	subs	r1, r2, r1
 8002894:	61b9      	str	r1, [r7, #24]
 8002896:	4629      	mov	r1, r5
 8002898:	eb63 0301 	sbc.w	r3, r3, r1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028aa:	4659      	mov	r1, fp
 80028ac:	018b      	lsls	r3, r1, #6
 80028ae:	4651      	mov	r1, sl
 80028b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b4:	4651      	mov	r1, sl
 80028b6:	018a      	lsls	r2, r1, #6
 80028b8:	4651      	mov	r1, sl
 80028ba:	ebb2 0801 	subs.w	r8, r2, r1
 80028be:	4659      	mov	r1, fp
 80028c0:	eb63 0901 	sbc.w	r9, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d8:	4690      	mov	r8, r2
 80028da:	4699      	mov	r9, r3
 80028dc:	4623      	mov	r3, r4
 80028de:	eb18 0303 	adds.w	r3, r8, r3
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	462b      	mov	r3, r5
 80028e6:	eb49 0303 	adc.w	r3, r9, r3
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028f8:	4629      	mov	r1, r5
 80028fa:	024b      	lsls	r3, r1, #9
 80028fc:	4621      	mov	r1, r4
 80028fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002902:	4621      	mov	r1, r4
 8002904:	024a      	lsls	r2, r1, #9
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800290e:	2200      	movs	r2, #0
 8002910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002912:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002918:	f7fd fc74 	bl	8000204 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002926:	e065      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x420>
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400
 8002930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	2200      	movs	r2, #0
 800293c:	4618      	mov	r0, r3
 800293e:	4611      	mov	r1, r2
 8002940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002944:	653b      	str	r3, [r7, #80]	@ 0x50
 8002946:	2300      	movs	r3, #0
 8002948:	657b      	str	r3, [r7, #84]	@ 0x54
 800294a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4641      	mov	r1, r8
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	4649      	mov	r1, r9
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002980:	4659      	mov	r1, fp
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	4651      	mov	r1, sl
 8002986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298a:	4651      	mov	r1, sl
 800298c:	018a      	lsls	r2, r1, #6
 800298e:	4651      	mov	r1, sl
 8002990:	1a54      	subs	r4, r2, r1
 8002992:	4659      	mov	r1, fp
 8002994:	eb63 0501 	sbc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	464b      	mov	r3, r9
 80029b4:	eb45 0303 	adc.w	r3, r5, r3
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c6:	4629      	mov	r1, r5
 80029c8:	028b      	lsls	r3, r1, #10
 80029ca:	4621      	mov	r1, r4
 80029cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d0:	4621      	mov	r1, r4
 80029d2:	028a      	lsls	r2, r1, #10
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029dc:	2200      	movs	r2, #0
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e6:	f7fd fc0d 	bl	8000204 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4613      	mov	r3, r2
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0f1b      	lsrs	r3, r3, #28
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a12:	e003      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	37b8      	adds	r7, #184	@ 0xb8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400

08002a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e28d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8083 	beq.w	8002b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a54:	4b94      	ldr	r3, [pc, #592]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d019      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a60:	4b91      	ldr	r3, [pc, #580]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b88      	ldr	r3, [pc, #544]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b84      	ldr	r3, [pc, #528]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x124>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e25a      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x90>
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7b      	ldr	r2, [pc, #492]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xb4>
 8002ace:	4b76      	ldr	r3, [pc, #472]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b73      	ldr	r3, [pc, #460]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a72      	ldr	r2, [pc, #456]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fbce 	bl	80012a8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fbca 	bl	80012a8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e21f      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xdc>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fbba 	bl	80012a8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fbb6 	bl	80012a8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20b      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x104>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06f      	beq.n	8002c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b66:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b44      	ldr	r3, [pc, #272]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1d3      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4937      	ldr	r1, [pc, #220]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_RCC_OscConfig+0x278>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fb63 	bl	80012a8 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fb5f 	bl	80012a8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1b4      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4925      	ldr	r1, [pc, #148]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <HAL_RCC_OscConfig+0x278>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fb42 	bl	80012a8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fb3e 	bl	80012a8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e193      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d036      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb22 	bl	80012a8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fb1e 	bl	80012a8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e173      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x234>
 8002c86:	e01b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fb0b 	bl	80012a8 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e00e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fb07 	bl	80012a8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d907      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e15c      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	42470000 	.word	0x42470000
 8002cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8097 	beq.w	8002dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b79      	ldr	r3, [pc, #484]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fac7 	bl	80012a8 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fac3 	bl	80012a8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e118      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x31e>
 8002d44:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a65      	ldr	r2, [pc, #404]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	e01c      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x340>
 8002d5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	4a60      	ldr	r2, [pc, #384]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d66:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a59      	ldr	r2, [pc, #356]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d84:	4a56      	ldr	r2, [pc, #344]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fa88 	bl	80012a8 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa84 	bl	80012a8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0d7      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ee      	beq.n	8002d9c <HAL_RCC_OscConfig+0x368>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fa72 	bl	80012a8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fa6e 	bl	80012a8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0c1      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ad 	beq.w	8002f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e06:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d060      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d145      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fa42 	bl	80012a8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fa3e 	bl	80012a8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e093      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	491b      	ldr	r1, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fa13 	bl	80012a8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fa0f 	bl	80012a8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e064      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x452>
 8002ea4:	e05c      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe f9fc 	bl	80012a8 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f9f8 	bl	80012a8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x480>
 8002ed2:	e045      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e040      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <HAL_RCC_OscConfig+0x538>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d030      	beq.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d129      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d122      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d119      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <memset>:
 8002f70:	4402      	add	r2, r0
 8002f72:	4603      	mov	r3, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4d0d      	ldr	r5, [pc, #52]	@ (8002fb8 <__libc_init_array+0x38>)
 8002f84:	4c0d      	ldr	r4, [pc, #52]	@ (8002fbc <__libc_init_array+0x3c>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	4d0b      	ldr	r5, [pc, #44]	@ (8002fc0 <__libc_init_array+0x40>)
 8002f92:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc4 <__libc_init_array+0x44>)
 8002f94:	f000 f826 	bl	8002fe4 <_init>
 8002f98:	1b64      	subs	r4, r4, r5
 8002f9a:	10a4      	asrs	r4, r4, #2
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08006c1c 	.word	0x08006c1c
 8002fbc:	08006c1c 	.word	0x08006c1c
 8002fc0:	08006c1c 	.word	0x08006c1c
 8002fc4:	08006c20 	.word	0x08006c20

08002fc8 <memcpy>:
 8002fc8:	440a      	add	r2, r1
 8002fca:	4291      	cmp	r1, r2
 8002fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fd0:	d100      	bne.n	8002fd4 <memcpy+0xc>
 8002fd2:	4770      	bx	lr
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	d1f9      	bne.n	8002fd6 <memcpy+0xe>
 8002fe2:	bd10      	pop	{r4, pc}

08002fe4 <_init>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	bf00      	nop
 8002fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fea:	bc08      	pop	{r3}
 8002fec:	469e      	mov	lr, r3
 8002fee:	4770      	bx	lr

08002ff0 <_fini>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr
