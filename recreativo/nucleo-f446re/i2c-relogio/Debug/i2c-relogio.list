
i2c-relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044dc  080044dc  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  080044dc  080044dc  000054dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e4  080044e4  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080044ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000064  08004550  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08004550  0000662c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000867f  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  0000e713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00010028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067a  00000000  00000000  000108a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002171a  00000000  00000000  00010f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1ee  00000000  00000000  00032634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e10  00000000  00000000  0003e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  00107678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00109d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800370c 	.word	0x0800370c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800370c 	.word	0x0800370c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fd47 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f84d 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8e7 	bl	8000780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f000 f8b7 	bl	8000724 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 80005b6:	f000 fa79 	bl	8000aac <SSD1306_Init>
  char buffer[26] = {0};
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	829a      	strh	r2, [r3, #20]

  int cont_seconds = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  int cont_minutes = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  int cont_hours = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      SSD1306_Clear();
 80005da:	f000 fc8a 	bl	8000ef2 <SSD1306_Clear>
      SSD1306_GotoXY(20, 23);
 80005de:	2117      	movs	r1, #23
 80005e0:	2014      	movs	r0, #20
 80005e2:	f000 fbcd 	bl	8000d80 <SSD1306_GotoXY>

      cont_seconds++;
 80005e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e8:	3301      	adds	r3, #1
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24

      if (cont_seconds >= 60) {
 80005ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80005f0:	dd04      	ble.n	80005fc <main+0x5c>
	cont_minutes++;
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	3301      	adds	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
	cont_seconds = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if (cont_minutes >= 60) {
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000600:	dd04      	ble.n	800060c <main+0x6c>
	cont_hours++;
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3301      	adds	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
	cont_minutes = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
      }

      if (cont_hours >= 24)
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b17      	cmp	r3, #23
 8000610:	dd01      	ble.n	8000616 <main+0x76>
	cont_hours = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

      sprintf(buffer, "%02d:%02d:%02d",
 8000616:	4638      	mov	r0, r7
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	4907      	ldr	r1, [pc, #28]	@ (8000640 <main+0xa0>)
 8000622:	f002 fbd3 	bl	8002dcc <siprintf>
    		  cont_hours,
    		  cont_minutes,
    		  cont_seconds);

      SSD1306_Puts(buffer, &Font_11x18, 1);
 8000626:	463b      	mov	r3, r7
 8000628:	2201      	movs	r2, #1
 800062a:	4906      	ldr	r1, [pc, #24]	@ (8000644 <main+0xa4>)
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fc3b 	bl	8000ea8 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8000632:	f000 faff 	bl	8000c34 <SSD1306_UpdateScreen>


      HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f000 fd6f 	bl	800111c <HAL_Delay>
      SSD1306_Clear();
 800063e:	e7cc      	b.n	80005da <main+0x3a>
 8000640:	08003724 	.word	0x08003724
 8000644:	20000004 	.word	0x20000004

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fbd8 	bl	8002e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <SystemClock_Config+0xd4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <SystemClock_Config+0xd8>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f8da 	bl	8002890 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f8cb 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fd8e 	bl	8002224 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070e:	f000 f8b5 	bl	800087c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 ff93 	bl	800168c <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f886 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000080 	.word	0x20000080
 8000778:	40005400 	.word	0x40005400
 800077c:	00061a80 	.word	0x00061a80

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b35      	ldr	r3, [pc, #212]	@ (8000870 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a34      	ldr	r2, [pc, #208]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	481a      	ldr	r0, [pc, #104]	@ (8000874 <MX_GPIO_Init+0xf4>)
 800080c:	f000 ff24 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4814      	ldr	r0, [pc, #80]	@ (8000878 <MX_GPIO_Init+0xf8>)
 8000828:	f000 fd82 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083c:	2307      	movs	r3, #7
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0xf4>)
 8000848:	f000 fd72 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_GPIO_Init+0xf4>)
 8000864:	f000 fd64 	bl	8001330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020800 	.word	0x40020800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089c:	6453      	str	r3, [r2, #68]	@ 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c6:	2007      	movs	r0, #7
 80008c8:	f000 fcfe 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	@ (800095c <HAL_I2C_MspInit+0x84>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12c      	bne.n	8000954 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000916:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091c:	2312      	movs	r3, #18
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000928:	2304      	movs	r3, #4
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <HAL_I2C_MspInit+0x8c>)
 8000934:	f000 fcfc 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 8000942:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000946:	6413      	str	r3, [r2, #64]	@ 0x40
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_I2C_MspInit+0x88>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40005400 	.word	0x40005400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 fb8d 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f002 fa10 	bl	8002e1c <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20020000 	.word	0x20020000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	200000d4 	.word	0x200000d4
 8000a30:	20000630 	.word	0x20000630

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a5c:	f7ff ffea 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 f9cf 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fd89 	bl	80005a0 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a9c:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8000aa0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000aa4:	2000062c 	.word	0x2000062c

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000ab2:	f000 fa27 	bl	8000f04 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ab6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000aba:	2201      	movs	r2, #1
 8000abc:	2178      	movs	r1, #120	@ 0x78
 8000abe:	485b      	ldr	r0, [pc, #364]	@ (8000c2c <SSD1306_Init+0x180>)
 8000ac0:	f001 f826 	bl	8001b10 <HAL_I2C_IsDeviceReady>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e0a9      	b.n	8000c22 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000ace:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000ad2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ad4:	e002      	b.n	8000adc <SSD1306_Init+0x30>
		p--;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f9      	bne.n	8000ad6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ae2:	22ae      	movs	r2, #174	@ 0xae
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	@ 0x78
 8000ae8:	f000 fa88 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000aec:	2220      	movs	r2, #32
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	@ 0x78
 8000af2:	f000 fa83 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000af6:	2210      	movs	r2, #16
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	@ 0x78
 8000afc:	f000 fa7e 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b00:	22b0      	movs	r2, #176	@ 0xb0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2078      	movs	r0, #120	@ 0x78
 8000b06:	f000 fa79 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b0a:	22c8      	movs	r2, #200	@ 0xc8
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2078      	movs	r0, #120	@ 0x78
 8000b10:	f000 fa74 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2078      	movs	r0, #120	@ 0x78
 8000b1a:	f000 fa6f 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b1e:	2210      	movs	r2, #16
 8000b20:	2100      	movs	r1, #0
 8000b22:	2078      	movs	r0, #120	@ 0x78
 8000b24:	f000 fa6a 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b28:	2240      	movs	r2, #64	@ 0x40
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2078      	movs	r0, #120	@ 0x78
 8000b2e:	f000 fa65 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b32:	2281      	movs	r2, #129	@ 0x81
 8000b34:	2100      	movs	r1, #0
 8000b36:	2078      	movs	r0, #120	@ 0x78
 8000b38:	f000 fa60 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b3c:	22ff      	movs	r2, #255	@ 0xff
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2078      	movs	r0, #120	@ 0x78
 8000b42:	f000 fa5b 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b46:	22a1      	movs	r2, #161	@ 0xa1
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2078      	movs	r0, #120	@ 0x78
 8000b4c:	f000 fa56 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b50:	22a6      	movs	r2, #166	@ 0xa6
 8000b52:	2100      	movs	r1, #0
 8000b54:	2078      	movs	r0, #120	@ 0x78
 8000b56:	f000 fa51 	bl	8000ffc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b5a:	22a8      	movs	r2, #168	@ 0xa8
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2078      	movs	r0, #120	@ 0x78
 8000b60:	f000 fa4c 	bl	8000ffc <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000b64:	223f      	movs	r2, #63	@ 0x3f
 8000b66:	2100      	movs	r1, #0
 8000b68:	2078      	movs	r0, #120	@ 0x78
 8000b6a:	f000 fa47 	bl	8000ffc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b6e:	22a4      	movs	r2, #164	@ 0xa4
 8000b70:	2100      	movs	r1, #0
 8000b72:	2078      	movs	r0, #120	@ 0x78
 8000b74:	f000 fa42 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b78:	22d3      	movs	r2, #211	@ 0xd3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2078      	movs	r0, #120	@ 0x78
 8000b7e:	f000 fa3d 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2078      	movs	r0, #120	@ 0x78
 8000b88:	f000 fa38 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b8c:	22d5      	movs	r2, #213	@ 0xd5
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2078      	movs	r0, #120	@ 0x78
 8000b92:	f000 fa33 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b96:	22f0      	movs	r2, #240	@ 0xf0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2078      	movs	r0, #120	@ 0x78
 8000b9c:	f000 fa2e 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ba0:	22d9      	movs	r2, #217	@ 0xd9
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2078      	movs	r0, #120	@ 0x78
 8000ba6:	f000 fa29 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000baa:	2222      	movs	r2, #34	@ 0x22
 8000bac:	2100      	movs	r1, #0
 8000bae:	2078      	movs	r0, #120	@ 0x78
 8000bb0:	f000 fa24 	bl	8000ffc <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000bb4:	22da      	movs	r2, #218	@ 0xda
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2078      	movs	r0, #120	@ 0x78
 8000bba:	f000 fa1f 	bl	8000ffc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000bbe:	2212      	movs	r2, #18
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2078      	movs	r0, #120	@ 0x78
 8000bc4:	f000 fa1a 	bl	8000ffc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000bc8:	22db      	movs	r2, #219	@ 0xdb
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2078      	movs	r0, #120	@ 0x78
 8000bce:	f000 fa15 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2078      	movs	r0, #120	@ 0x78
 8000bd8:	f000 fa10 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bdc:	228d      	movs	r2, #141	@ 0x8d
 8000bde:	2100      	movs	r1, #0
 8000be0:	2078      	movs	r0, #120	@ 0x78
 8000be2:	f000 fa0b 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000be6:	2214      	movs	r2, #20
 8000be8:	2100      	movs	r1, #0
 8000bea:	2078      	movs	r0, #120	@ 0x78
 8000bec:	f000 fa06 	bl	8000ffc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000bf0:	22af      	movs	r2, #175	@ 0xaf
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2078      	movs	r0, #120	@ 0x78
 8000bf6:	f000 fa01 	bl	8000ffc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000bfa:	222e      	movs	r2, #46	@ 0x2e
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	@ 0x78
 8000c00:	f000 f9fc 	bl	8000ffc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f843 	bl	8000c90 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c0a:	f000 f813 	bl	8000c34 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <SSD1306_Init+0x184>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SSD1306_Init+0x184>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SSD1306_Init+0x184>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000080 	.word	0x20000080
 8000c30:	200004d8 	.word	0x200004d8

08000c34 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	e01d      	b.n	8000c7c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3b50      	subs	r3, #80	@ 0x50
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2078      	movs	r0, #120	@ 0x78
 8000c4c:	f000 f9d6 	bl	8000ffc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2078      	movs	r0, #120	@ 0x78
 8000c56:	f000 f9d1 	bl	8000ffc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c5a:	2210      	movs	r2, #16
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2078      	movs	r0, #120	@ 0x78
 8000c60:	f000 f9cc 	bl	8000ffc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	01db      	lsls	r3, r3, #7
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <SSD1306_UpdateScreen+0x58>)
 8000c6a:	441a      	add	r2, r3
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	2078      	movs	r0, #120	@ 0x78
 8000c72:	f000 f95d 	bl	8000f30 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d9de      	bls.n	8000c40 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000d8 	.word	0x200000d8

08000c90 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <SSD1306_Fill+0x14>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e000      	b.n	8000ca6 <SSD1306_Fill+0x16>
 8000ca4:	23ff      	movs	r3, #255	@ 0xff
 8000ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000caa:	4619      	mov	r1, r3
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <SSD1306_Fill+0x2c>)
 8000cae:	f002 f8ad 	bl	8002e0c <memset>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000d8 	.word	0x200000d8

08000cc0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	80bb      	strh	r3, [r7, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	70fb      	strb	r3, [r7, #3]
	if (
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd6:	d848      	bhi.n	8000d6a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cdc:	d845      	bhi.n	8000d6a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <SSD1306_DrawPixel+0xb8>)
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf0c      	ite	eq
 8000cec:	2301      	moveq	r3, #1
 8000cee:	2300      	movne	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d11a      	bne.n	8000d30 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	b298      	uxth	r0, r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	01db      	lsls	r3, r3, #7
 8000d06:	4413      	add	r3, r2
 8000d08:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <SSD1306_DrawPixel+0xbc>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b259      	sxtb	r1, r3
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	4603      	mov	r3, r0
 8000d24:	01db      	lsls	r3, r3, #7
 8000d26:	4413      	add	r3, r2
 8000d28:	b2c9      	uxtb	r1, r1
 8000d2a:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <SSD1306_DrawPixel+0xbc>)
 8000d2c:	54d1      	strb	r1, [r2, r3]
 8000d2e:	e01d      	b.n	8000d6c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d30:	88fa      	ldrh	r2, [r7, #6]
 8000d32:	88bb      	ldrh	r3, [r7, #4]
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	b298      	uxth	r0, r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	01db      	lsls	r3, r3, #7
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <SSD1306_DrawPixel+0xbc>)
 8000d40:	5cd3      	ldrb	r3, [r2, r3]
 8000d42:	b25a      	sxtb	r2, r3
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	4013      	ands	r3, r2
 8000d58:	b259      	sxtb	r1, r3
 8000d5a:	88fa      	ldrh	r2, [r7, #6]
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	01db      	lsls	r3, r3, #7
 8000d60:	4413      	add	r3, r2
 8000d62:	b2c9      	uxtb	r1, r1
 8000d64:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SSD1306_DrawPixel+0xbc>)
 8000d66:	54d1      	strb	r1, [r2, r3]
 8000d68:	e000      	b.n	8000d6c <SSD1306_DrawPixel+0xac>
		return;
 8000d6a:	bf00      	nop
	}
}
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200004d8 	.word	0x200004d8
 8000d7c:	200000d8 	.word	0x200000d8

08000d80 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	80fb      	strh	r3, [r7, #6]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SSD1306_GotoXY+0x28>)
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <SSD1306_GotoXY+0x28>)
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	8053      	strh	r3, [r2, #2]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	200004d8 	.word	0x200004d8

08000dac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
	if (
 8000dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dca:	dc07      	bgt.n	8000ddc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dda:	dd01      	ble.n	8000de0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e05d      	b.n	8000e9c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e04b      	b.n	8000e7e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	3b20      	subs	r3, #32
 8000dee:	6839      	ldr	r1, [r7, #0]
 8000df0:	7849      	ldrb	r1, [r1, #1]
 8000df2:	fb01 f303 	mul.w	r3, r1, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	e030      	b.n	8000e6c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d010      	beq.n	8000e3c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b298      	uxth	r0, r3
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e28:	885a      	ldrh	r2, [r3, #2]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff ff43 	bl	8000cc0 <SSD1306_DrawPixel>
 8000e3a:	e014      	b.n	8000e66 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b298      	uxth	r0, r3
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e4a:	885a      	ldrh	r2, [r3, #2]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b299      	uxth	r1, r3
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf0c      	ite	eq
 8000e5a:	2301      	moveq	r3, #1
 8000e5c:	2300      	movne	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	f7ff ff2d 	bl	8000cc0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d3c8      	bcc.n	8000e0a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	461a      	mov	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d3ad      	bcc.n	8000de6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <SSD1306_Putc+0xf8>)
 8000e98:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200004d8 	.word	0x200004d8

08000ea8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000eb6:	e012      	b.n	8000ede <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff73 	bl	8000dac <SSD1306_Putc>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d002      	beq.n	8000ed8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	e008      	b.n	8000eea <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1e8      	bne.n	8000eb8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff feca 	bl	8000c90 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000efc:	f7ff fe9a 	bl	8000c34 <SSD1306_UpdateScreen>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <ssd1306_I2C_Init+0x28>)
 8000f0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f0e:	e002      	b.n	8000f16 <ssd1306_I2C_Init+0x12>
		p--;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f9      	bne.n	8000f10 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0003d090 	.word	0x0003d090

08000f30 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b0c7      	sub	sp, #284	@ 0x11c
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000f3e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000f42:	600a      	str	r2, [r1, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f4a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f4e:	4622      	mov	r2, r4
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f56:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f66:	460a      	mov	r2, r1
 8000f68:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f72:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f76:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f84:	e015      	b.n	8000fb2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f8e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	441a      	add	r2, r3
 8000f96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	7811      	ldrb	r1, [r2, #0]
 8000f9e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fa2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000fa6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000fa8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fac:	3301      	adds	r3, #1
 8000fae:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000fb2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fbc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8df      	bhi.n	8000f86 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	9000      	str	r0, [sp, #0]
 8000fe8:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000fea:	f000 fc93 	bl	8001914 <HAL_I2C_Master_Transmit>
}
 8000fee:	bf00      	nop
 8000ff0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	20000080 	.word	0x20000080

08000ffc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	460b      	mov	r3, r1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	4613      	mov	r3, r2
 800100c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	b299      	uxth	r1, r3
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	230a      	movs	r3, #10
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2302      	movs	r3, #2
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <ssd1306_I2C_Write+0x38>)
 8001026:	f000 fc75 	bl	8001914 <HAL_I2C_Master_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000080 	.word	0x20000080

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f931 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fc0c 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f93b 	bl	8001316 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f911 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000010 	.word	0x20000010
 80010d8:	2000000c 	.word	0x2000000c

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000010 	.word	0x20000010
 8001100:	200004e0 	.word	0x200004e0

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200004e0 	.word	0x200004e0

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000010 	.word	0x20000010

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff47 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff5c 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffb0 	bl	8001284 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e165      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8154 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80ae 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a5c      	ldr	r2, [pc, #368]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <HAL_GPIO_Init+0x304>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001638 <HAL_GPIO_Init+0x308>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x21a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4e      	ldr	r2, [pc, #312]	@ (800163c <HAL_GPIO_Init+0x30c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x216>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4d      	ldr	r2, [pc, #308]	@ (8001640 <HAL_GPIO_Init+0x310>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x212>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4c      	ldr	r2, [pc, #304]	@ (8001644 <HAL_GPIO_Init+0x314>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_GPIO_Init+0x318>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x20a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4a      	ldr	r2, [pc, #296]	@ (800164c <HAL_GPIO_Init+0x31c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x206>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	@ (8001650 <HAL_GPIO_Init+0x320>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x202>
 800152e:	2306      	movs	r3, #6
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001532:	2307      	movs	r3, #7
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4935      	ldr	r1, [pc, #212]	@ (8001634 <HAL_GPIO_Init+0x304>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <HAL_GPIO_Init+0x324>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158e:	4a31      	ldr	r2, [pc, #196]	@ (8001654 <HAL_GPIO_Init+0x324>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001594:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <HAL_GPIO_Init+0x324>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b8:	4a26      	ldr	r2, [pc, #152]	@ (8001654 <HAL_GPIO_Init+0x324>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015be:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <HAL_GPIO_Init+0x324>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_GPIO_Init+0x324>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_GPIO_Init+0x324>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_GPIO_Init+0x324>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae96 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021400 	.word	0x40021400
 8001650:	40021800 	.word	0x40021800
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e12b      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff f910 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f0:	f000 fe8a 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a81      	ldr	r2, [pc, #516]	@ (8001900 <HAL_I2C_Init+0x274>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d807      	bhi.n	8001710 <HAL_I2C_Init+0x84>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a80      	ldr	r2, [pc, #512]	@ (8001904 <HAL_I2C_Init+0x278>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e006      	b.n	800171e <HAL_I2C_Init+0x92>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a7d      	ldr	r2, [pc, #500]	@ (8001908 <HAL_I2C_Init+0x27c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0e7      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a78      	ldr	r2, [pc, #480]	@ (800190c <HAL_I2C_Init+0x280>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d802      	bhi.n	8001760 <HAL_I2C_Init+0xd4>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	e009      	b.n	8001774 <HAL_I2C_Init+0xe8>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4a69      	ldr	r2, [pc, #420]	@ (8001910 <HAL_I2C_Init+0x284>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	3301      	adds	r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	495c      	ldr	r1, [pc, #368]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001790:	428b      	cmp	r3, r1
 8001792:	d819      	bhi.n	80017c8 <HAL_I2C_Init+0x13c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e59      	subs	r1, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017a8:	400b      	ands	r3, r1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_I2C_Init+0x138>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c2:	e051      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e04f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_I2C_Init+0x168>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e012      	b.n	800181a <HAL_I2C_Init+0x18e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x196>
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10e      	bne.n	8001848 <HAL_I2C_Init+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	fbb0 f3f3 	udiv	r3, r0, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6911      	ldr	r1, [r2, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	000186a0 	.word	0x000186a0
 8001904:	001e847f 	.word	0x001e847f
 8001908:	003d08ff 	.word	0x003d08ff
 800190c:	431bde83 	.word	0x431bde83
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	460b      	mov	r3, r1
 8001922:	817b      	strh	r3, [r7, #10]
 8001924:	4613      	mov	r3, r2
 8001926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fbec 	bl	8001104 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	f040 80e0 	bne.w	8001afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2319      	movs	r3, #25
 8001942:	2201      	movs	r2, #1
 8001944:	4970      	ldr	r1, [pc, #448]	@ (8001b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fa92 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	e0d3      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_I2C_Master_Transmit+0x50>
 8001960:	2302      	movs	r3, #2
 8001962:	e0cc      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d007      	beq.n	800198a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2210      	movs	r2, #16
 80019a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	893a      	ldrh	r2, [r7, #8]
 80019ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a50      	ldr	r2, [pc, #320]	@ (8001b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f9ca 	bl	8001d6c <I2C_MasterRequestWrite>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e08d      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f8:	e066      	b.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fb50 	bl	80020a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d107      	bne.n	8001a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d11b      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fb47 	bl	8002134 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01a      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d194      	bne.n	80019fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	00100002 	.word	0x00100002
 8001b0c:	ffff0000 	.word	0xffff0000

08001b10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff faf0 	bl	8001104 <HAL_GetTick>
 8001b24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	f040 8111 	bne.w	8001d5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2319      	movs	r3, #25
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4988      	ldr	r1, [pc, #544]	@ (8001d64 <HAL_I2C_IsDeviceReady+0x254>)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f994 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e104      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2C_IsDeviceReady+0x50>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e0fd      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d007      	beq.n	8001b86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2224      	movs	r2, #36	@ 0x24
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a70      	ldr	r2, [pc, #448]	@ (8001d68 <HAL_I2C_IsDeviceReady+0x258>)
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f952 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be0:	d103      	bne.n	8001bea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0b6      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa81 	bl	8001104 <HAL_GetTick>
 8001c02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c32:	e025      	b.n	8001c80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c34:	f7ff fa66 	bl	8001104 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d302      	bcc.n	8001c4a <HAL_I2C_IsDeviceReady+0x13a>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	22a0      	movs	r2, #160	@ 0xa0
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c8a:	d005      	beq.n	8001c98 <HAL_I2C_IsDeviceReady+0x188>
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_I2C_IsDeviceReady+0x188>
 8001c92:	7dbb      	ldrb	r3, [r7, #22]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0cd      	beq.n	8001c34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d129      	bne.n	8001d02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2319      	movs	r3, #25
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4921      	ldr	r1, [pc, #132]	@ (8001d64 <HAL_I2C_IsDeviceReady+0x254>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f8c6 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e036      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e02c      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2319      	movs	r3, #25
 8001d22:	2201      	movs	r2, #1
 8001d24:	490f      	ldr	r1, [pc, #60]	@ (8001d64 <HAL_I2C_IsDeviceReady+0x254>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8a2 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e012      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f4ff af32 	bcc.w	8001baa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	00100002 	.word	0x00100002
 8001d68:	ffff0000 	.word	0xffff0000

08001d6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d006      	beq.n	8001d96 <I2C_MasterRequestWrite+0x2a>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d003      	beq.n	8001d96 <I2C_MasterRequestWrite+0x2a>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d94:	d108      	bne.n	8001da8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e00b      	b.n	8001dc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d107      	bne.n	8001dc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f84f 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de6:	d103      	bne.n	8001df0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e035      	b.n	8001e60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dfc:	d108      	bne.n	8001e10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	e01b      	b.n	8001e48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e10:	897b      	ldrh	r3, [r7, #10]
 8001e12:	11db      	asrs	r3, r3, #7
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0306 	and.w	r3, r3, #6
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f063 030f 	orn	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <I2C_MasterRequestWrite+0xfc>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f898 	bl	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e010      	b.n	8001e60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e3e:	897b      	ldrh	r3, [r7, #10]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4907      	ldr	r1, [pc, #28]	@ (8001e6c <I2C_MasterRequestWrite+0x100>)
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f888 	bl	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	00010008 	.word	0x00010008
 8001e6c:	00010002 	.word	0x00010002

08001e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e80:	e048      	b.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d044      	beq.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7ff f93b 	bl	8001104 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d139      	bne.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10d      	bne.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	e00c      	b.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d116      	bne.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e023      	b.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	e00c      	b.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d093      	beq.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f72:	e071      	b.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d123      	bne.n	8001fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e067      	b.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d041      	beq.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd4:	f7ff f896 	bl	8001104 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d302      	bcc.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d136      	bne.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10c      	bne.n	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4013      	ands	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e00b      	b.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	43da      	mvns	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4013      	ands	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e021      	b.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10c      	bne.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e00b      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f af6d 	bne.w	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b0:	e034      	b.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f886 	bl	80021c4 <I2C_IsAcknowledgeFailed>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e034      	b.n	800212c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d028      	beq.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7ff f81b 	bl	8001104 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d11d      	bne.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ea:	2b80      	cmp	r3, #128	@ 0x80
 80020ec:	d016      	beq.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	2b80      	cmp	r3, #128	@ 0x80
 8002128:	d1c3      	bne.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002140:	e034      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f83e 	bl	80021c4 <I2C_IsAcknowledgeFailed>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e034      	b.n	80021bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d028      	beq.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7fe ffd3 	bl	8001104 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11d      	bne.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b04      	cmp	r3, #4
 800217c:	d016      	beq.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e007      	b.n	80021bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d1c3      	bne.n	8002142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021da:	d11b      	bne.n	8002214 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0cc      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d90c      	bls.n	8002260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b65      	ldr	r3, [pc, #404]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a58      	ldr	r2, [pc, #352]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a52      	ldr	r2, [pc, #328]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800229a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d044      	beq.n	8002344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d119      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e067      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b37      	ldr	r3, [pc, #220]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4934      	ldr	r1, [pc, #208]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002314:	f7fe fef6 	bl	8001104 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7fe fef2 	bl	8001104 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d20c      	bcs.n	800236c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f841 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fe56 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00
 80023e0:	40023800 	.word	0x40023800
 80023e4:	08003734 	.word	0x08003734
 80023e8:	20000000 	.word	0x20000000
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	@ (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08003744 	.word	0x08003744

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002434:	b0ae      	sub	sp, #184	@ 0xb8
 8002436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002456:	4bcb      	ldr	r3, [pc, #812]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b0c      	cmp	r3, #12
 8002460:	f200 8206 	bhi.w	8002870 <HAL_RCC_GetSysClockFreq+0x440>
 8002464:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	080024a1 	.word	0x080024a1
 8002470:	08002871 	.word	0x08002871
 8002474:	08002871 	.word	0x08002871
 8002478:	08002871 	.word	0x08002871
 800247c:	080024a9 	.word	0x080024a9
 8002480:	08002871 	.word	0x08002871
 8002484:	08002871 	.word	0x08002871
 8002488:	08002871 	.word	0x08002871
 800248c:	080024b1 	.word	0x080024b1
 8002490:	08002871 	.word	0x08002871
 8002494:	08002871 	.word	0x08002871
 8002498:	08002871 	.word	0x08002871
 800249c:	080026a1 	.word	0x080026a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4bb9      	ldr	r3, [pc, #740]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x358>)
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024a6:	e1e7      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a8:	4bb8      	ldr	r3, [pc, #736]	@ (800278c <HAL_RCC_GetSysClockFreq+0x35c>)
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ae:	e1e3      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b0:	4bb4      	ldr	r3, [pc, #720]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024bc:	4bb1      	ldr	r3, [pc, #708]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d071      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c8:	4bae      	ldr	r3, [pc, #696]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024d4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80024d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024ee:	4622      	mov	r2, r4
 80024f0:	462b      	mov	r3, r5
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	0159      	lsls	r1, r3, #5
 80024fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002500:	0150      	lsls	r0, r2, #5
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4621      	mov	r1, r4
 8002508:	1a51      	subs	r1, r2, r1
 800250a:	6439      	str	r1, [r7, #64]	@ 0x40
 800250c:	4629      	mov	r1, r5
 800250e:	eb63 0301 	sbc.w	r3, r3, r1
 8002512:	647b      	str	r3, [r7, #68]	@ 0x44
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002520:	4649      	mov	r1, r9
 8002522:	018b      	lsls	r3, r1, #6
 8002524:	4641      	mov	r1, r8
 8002526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800252a:	4641      	mov	r1, r8
 800252c:	018a      	lsls	r2, r1, #6
 800252e:	4641      	mov	r1, r8
 8002530:	1a51      	subs	r1, r2, r1
 8002532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002534:	4649      	mov	r1, r9
 8002536:	eb63 0301 	sbc.w	r3, r3, r1
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002548:	4649      	mov	r1, r9
 800254a:	00cb      	lsls	r3, r1, #3
 800254c:	4641      	mov	r1, r8
 800254e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002552:	4641      	mov	r1, r8
 8002554:	00ca      	lsls	r2, r1, #3
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	4603      	mov	r3, r0
 800255c:	4622      	mov	r2, r4
 800255e:	189b      	adds	r3, r3, r2
 8002560:	633b      	str	r3, [r7, #48]	@ 0x30
 8002562:	462b      	mov	r3, r5
 8002564:	460a      	mov	r2, r1
 8002566:	eb42 0303 	adc.w	r3, r2, r3
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002578:	4629      	mov	r1, r5
 800257a:	024b      	lsls	r3, r1, #9
 800257c:	4621      	mov	r1, r4
 800257e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002582:	4621      	mov	r1, r4
 8002584:	024a      	lsls	r2, r1, #9
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002594:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002598:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800259c:	f7fd fe88 	bl	80002b0 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025aa:	e067      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ac:	4b75      	ldr	r3, [pc, #468]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025c6:	2300      	movs	r3, #0
 80025c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002600:	4649      	mov	r1, r9
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4641      	mov	r1, r8
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4641      	mov	r1, r8
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4641      	mov	r1, r8
 8002610:	ebb2 0a01 	subs.w	sl, r2, r1
 8002614:	4649      	mov	r1, r9
 8002616:	eb63 0b01 	sbc.w	fp, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002626:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800262a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800262e:	4692      	mov	sl, r2
 8002630:	469b      	mov	fp, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb1a 0303 	adds.w	r3, sl, r3
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	462b      	mov	r3, r5
 800263c:	eb4b 0303 	adc.w	r3, fp, r3
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800264e:	4629      	mov	r1, r5
 8002650:	028b      	lsls	r3, r1, #10
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002658:	4621      	mov	r1, r4
 800265a:	028a      	lsls	r2, r1, #10
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002664:	2200      	movs	r2, #0
 8002666:	673b      	str	r3, [r7, #112]	@ 0x70
 8002668:	677a      	str	r2, [r7, #116]	@ 0x74
 800266a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800266e:	f7fd fe1f 	bl	80002b0 <__aeabi_uldivmod>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4613      	mov	r3, r2
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800267c:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800268e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800269e:	e0eb      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d06b      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b8:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	2200      	movs	r2, #0
 80026c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80026cc:	2300      	movs	r3, #0
 80026ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80026d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026d4:	4622      	mov	r2, r4
 80026d6:	462b      	mov	r3, r5
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	0159      	lsls	r1, r3, #5
 80026e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e6:	0150      	lsls	r0, r2, #5
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4621      	mov	r1, r4
 80026ee:	1a51      	subs	r1, r2, r1
 80026f0:	61b9      	str	r1, [r7, #24]
 80026f2:	4629      	mov	r1, r5
 80026f4:	eb63 0301 	sbc.w	r3, r3, r1
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002706:	4659      	mov	r1, fp
 8002708:	018b      	lsls	r3, r1, #6
 800270a:	4651      	mov	r1, sl
 800270c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002710:	4651      	mov	r1, sl
 8002712:	018a      	lsls	r2, r1, #6
 8002714:	4651      	mov	r1, sl
 8002716:	ebb2 0801 	subs.w	r8, r2, r1
 800271a:	4659      	mov	r1, fp
 800271c:	eb63 0901 	sbc.w	r9, r3, r1
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800272c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002730:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002734:	4690      	mov	r8, r2
 8002736:	4699      	mov	r9, r3
 8002738:	4623      	mov	r3, r4
 800273a:	eb18 0303 	adds.w	r3, r8, r3
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	462b      	mov	r3, r5
 8002742:	eb49 0303 	adc.w	r3, r9, r3
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002754:	4629      	mov	r1, r5
 8002756:	024b      	lsls	r3, r1, #9
 8002758:	4621      	mov	r1, r4
 800275a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800275e:	4621      	mov	r1, r4
 8002760:	024a      	lsls	r2, r1, #9
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800276a:	2200      	movs	r2, #0
 800276c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800276e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002770:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002774:	f7fd fd9c 	bl	80002b0 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002782:	e065      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x420>
 8002784:	40023800 	.word	0x40023800
 8002788:	00f42400 	.word	0x00f42400
 800278c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x458>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	2200      	movs	r2, #0
 8002798:	4618      	mov	r0, r3
 800279a:	4611      	mov	r1, r2
 800279c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027a2:	2300      	movs	r3, #0
 80027a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80027a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80027aa:	4642      	mov	r2, r8
 80027ac:	464b      	mov	r3, r9
 80027ae:	f04f 0000 	mov.w	r0, #0
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	0159      	lsls	r1, r3, #5
 80027b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027bc:	0150      	lsls	r0, r2, #5
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4641      	mov	r1, r8
 80027c4:	1a51      	subs	r1, r2, r1
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	4649      	mov	r1, r9
 80027ca:	eb63 0301 	sbc.w	r3, r3, r1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027dc:	4659      	mov	r1, fp
 80027de:	018b      	lsls	r3, r1, #6
 80027e0:	4651      	mov	r1, sl
 80027e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e6:	4651      	mov	r1, sl
 80027e8:	018a      	lsls	r2, r1, #6
 80027ea:	4651      	mov	r1, sl
 80027ec:	1a54      	subs	r4, r2, r1
 80027ee:	4659      	mov	r1, fp
 80027f0:	eb63 0501 	sbc.w	r5, r3, r1
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	00eb      	lsls	r3, r5, #3
 80027fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002802:	00e2      	lsls	r2, r4, #3
 8002804:	4614      	mov	r4, r2
 8002806:	461d      	mov	r5, r3
 8002808:	4643      	mov	r3, r8
 800280a:	18e3      	adds	r3, r4, r3
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	464b      	mov	r3, r9
 8002810:	eb45 0303 	adc.w	r3, r5, r3
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002822:	4629      	mov	r1, r5
 8002824:	028b      	lsls	r3, r1, #10
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800282c:	4621      	mov	r1, r4
 800282e:	028a      	lsls	r2, r1, #10
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002838:	2200      	movs	r2, #0
 800283a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800283c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800283e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002842:	f7fd fd35 	bl	80002b0 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4613      	mov	r3, r2
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x458>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0f1b      	lsrs	r3, r3, #28
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800285e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800286e:	e003      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800287c:	4618      	mov	r0, r3
 800287e:	37b8      	adds	r7, #184	@ 0xb8
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400

08002890 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e28d      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8083 	beq.w	80029b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028b0:	4b94      	ldr	r3, [pc, #592]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d019      	beq.n	80028f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028bc:	4b91      	ldr	r3, [pc, #580]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d4:	d00c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d112      	bne.n	8002908 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e2:	4b88      	ldr	r3, [pc, #544]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ee:	d10b      	bne.n	8002908 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4b84      	ldr	r3, [pc, #528]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05b      	beq.n	80029b4 <HAL_RCC_OscConfig+0x124>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d157      	bne.n	80029b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e25a      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x90>
 8002912:	4b7c      	ldr	r3, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7b      	ldr	r2, [pc, #492]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e01d      	b.n	800295c <HAL_RCC_OscConfig+0xcc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0xb4>
 800292a:	4b76      	ldr	r3, [pc, #472]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a75      	ldr	r2, [pc, #468]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b73      	ldr	r3, [pc, #460]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a72      	ldr	r2, [pc, #456]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0xcc>
 8002944:	4b6f      	ldr	r3, [pc, #444]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6e      	ldr	r2, [pc, #440]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 800294a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b6c      	ldr	r3, [pc, #432]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6b      	ldr	r2, [pc, #428]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800295a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fbce 	bl	8001104 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7fe fbca 	bl	8001104 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	@ 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e21f      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0xdc>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fbba 	bl	8001104 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fbb6 	bl	8001104 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	@ 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e20b      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	4b57      	ldr	r3, [pc, #348]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x104>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d06f      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029c2:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d017      	beq.n	80029fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d105      	bne.n	80029e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029da:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f2:	4b44      	ldr	r3, [pc, #272]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x186>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1d3      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4937      	ldr	r1, [pc, #220]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_OscConfig+0x278>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fb63 	bl	8001104 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fe fb5f 	bl	8001104 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1b4      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4925      	ldr	r1, [pc, #148]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <HAL_RCC_OscConfig+0x278>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fb42 	bl	8001104 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fe fb3e 	bl	8001104 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e193      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d036      	beq.n	8002b1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fb22 	bl	8001104 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fb1e 	bl	8001104 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e173      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x234>
 8002ae2:	e01b      	b.n	8002b1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe fb0b 	bl	8001104 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	e00e      	b.n	8002b10 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe fb07 	bl	8001104 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d907      	bls.n	8002b10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e15c      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	42470000 	.word	0x42470000
 8002b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b8a      	ldr	r3, [pc, #552]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ea      	bne.n	8002af2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8097 	beq.w	8002c58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b83      	ldr	r3, [pc, #524]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a7e      	ldr	r2, [pc, #504]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b79      	ldr	r3, [pc, #484]	@ (8002d40 <HAL_RCC_OscConfig+0x4b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b76      	ldr	r3, [pc, #472]	@ (8002d40 <HAL_RCC_OscConfig+0x4b0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a75      	ldr	r2, [pc, #468]	@ (8002d40 <HAL_RCC_OscConfig+0x4b0>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fac7 	bl	8001104 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe fac3 	bl	8001104 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e118      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_RCC_OscConfig+0x4b0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x31e>
 8002ba0:	4b66      	ldr	r3, [pc, #408]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a65      	ldr	r2, [pc, #404]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	e01c      	b.n	8002be8 <HAL_RCC_OscConfig+0x358>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x340>
 8002bb6:	4b61      	ldr	r3, [pc, #388]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	4a60      	ldr	r2, [pc, #384]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	4a5d      	ldr	r2, [pc, #372]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x358>
 8002bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a59      	ldr	r2, [pc, #356]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	4b57      	ldr	r3, [pc, #348]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	4a56      	ldr	r2, [pc, #344]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fa88 	bl	8001104 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fa84 	bl	8001104 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0d7      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x368>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fa72 	bl	8001104 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa6e 	bl	8001104 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0c1      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	4b40      	ldr	r3, [pc, #256]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ee      	bne.n	8002c24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ad 	beq.w	8002dbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c62:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d060      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d145      	bne.n	8002d02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b33      	ldr	r3, [pc, #204]	@ (8002d44 <HAL_RCC_OscConfig+0x4b4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa42 	bl	8001104 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fa3e 	bl	8001104 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e093      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	491b      	ldr	r1, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x4b4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fa13 	bl	8001104 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe fa0f 	bl	8001104 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e064      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x452>
 8002d00:	e05c      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x4b4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f9fc 	bl	8001104 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe f9f8 	bl	8001104 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e04d      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
 8002d2e:	e045      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e040      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <HAL_RCC_OscConfig+0x538>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d030      	beq.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d129      	bne.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d122      	bne.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d119      	bne.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d10f      	bne.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <siprintf>:
 8002dcc:	b40e      	push	{r1, r2, r3}
 8002dce:	b500      	push	{lr}
 8002dd0:	b09c      	sub	sp, #112	@ 0x70
 8002dd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002dd4:	9002      	str	r0, [sp, #8]
 8002dd6:	9006      	str	r0, [sp, #24]
 8002dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ddc:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <siprintf+0x38>)
 8002dde:	9107      	str	r1, [sp, #28]
 8002de0:	9104      	str	r1, [sp, #16]
 8002de2:	4909      	ldr	r1, [pc, #36]	@ (8002e08 <siprintf+0x3c>)
 8002de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002de8:	9105      	str	r1, [sp, #20]
 8002dea:	6800      	ldr	r0, [r0, #0]
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	a902      	add	r1, sp, #8
 8002df0:	f000 f994 	bl	800311c <_svfiprintf_r>
 8002df4:	9b02      	ldr	r3, [sp, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	b01c      	add	sp, #112	@ 0x70
 8002dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e00:	b003      	add	sp, #12
 8002e02:	4770      	bx	lr
 8002e04:	20000014 	.word	0x20000014
 8002e08:	ffff0208 	.word	0xffff0208

08002e0c <memset>:
 8002e0c:	4402      	add	r2, r0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d100      	bne.n	8002e16 <memset+0xa>
 8002e14:	4770      	bx	lr
 8002e16:	f803 1b01 	strb.w	r1, [r3], #1
 8002e1a:	e7f9      	b.n	8002e10 <memset+0x4>

08002e1c <__errno>:
 8002e1c:	4b01      	ldr	r3, [pc, #4]	@ (8002e24 <__errno+0x8>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000014 	.word	0x20000014

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2600      	movs	r6, #0
 8002e34:	42a6      	cmp	r6, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4d0b      	ldr	r5, [pc, #44]	@ (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f000 fc66 	bl	800370c <_init>
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2600      	movs	r6, #0
 8002e46:	42a6      	cmp	r6, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e50:	4798      	blx	r3
 8002e52:	3601      	adds	r6, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5a:	4798      	blx	r3
 8002e5c:	3601      	adds	r6, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	080044e4 	.word	0x080044e4
 8002e64:	080044e4 	.word	0x080044e4
 8002e68:	080044e4 	.word	0x080044e4
 8002e6c:	080044e8 	.word	0x080044e8

08002e70 <__retarget_lock_acquire_recursive>:
 8002e70:	4770      	bx	lr

08002e72 <__retarget_lock_release_recursive>:
 8002e72:	4770      	bx	lr

08002e74 <_free_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4605      	mov	r5, r0
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	d041      	beq.n	8002f00 <_free_r+0x8c>
 8002e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e80:	1f0c      	subs	r4, r1, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfb8      	it	lt
 8002e86:	18e4      	addlt	r4, r4, r3
 8002e88:	f000 f8e0 	bl	800304c <__malloc_lock>
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <_free_r+0x90>)
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	b933      	cbnz	r3, 8002ea0 <_free_r+0x2c>
 8002e92:	6063      	str	r3, [r4, #4]
 8002e94:	6014      	str	r4, [r2, #0]
 8002e96:	4628      	mov	r0, r5
 8002e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e9c:	f000 b8dc 	b.w	8003058 <__malloc_unlock>
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d908      	bls.n	8002eb6 <_free_r+0x42>
 8002ea4:	6820      	ldr	r0, [r4, #0]
 8002ea6:	1821      	adds	r1, r4, r0
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	bf01      	itttt	eq
 8002eac:	6819      	ldreq	r1, [r3, #0]
 8002eae:	685b      	ldreq	r3, [r3, #4]
 8002eb0:	1809      	addeq	r1, r1, r0
 8002eb2:	6021      	streq	r1, [r4, #0]
 8002eb4:	e7ed      	b.n	8002e92 <_free_r+0x1e>
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	b10b      	cbz	r3, 8002ec0 <_free_r+0x4c>
 8002ebc:	42a3      	cmp	r3, r4
 8002ebe:	d9fa      	bls.n	8002eb6 <_free_r+0x42>
 8002ec0:	6811      	ldr	r1, [r2, #0]
 8002ec2:	1850      	adds	r0, r2, r1
 8002ec4:	42a0      	cmp	r0, r4
 8002ec6:	d10b      	bne.n	8002ee0 <_free_r+0x6c>
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	4401      	add	r1, r0
 8002ecc:	1850      	adds	r0, r2, r1
 8002ece:	4283      	cmp	r3, r0
 8002ed0:	6011      	str	r1, [r2, #0]
 8002ed2:	d1e0      	bne.n	8002e96 <_free_r+0x22>
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	4408      	add	r0, r1
 8002edc:	6010      	str	r0, [r2, #0]
 8002ede:	e7da      	b.n	8002e96 <_free_r+0x22>
 8002ee0:	d902      	bls.n	8002ee8 <_free_r+0x74>
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	602b      	str	r3, [r5, #0]
 8002ee6:	e7d6      	b.n	8002e96 <_free_r+0x22>
 8002ee8:	6820      	ldr	r0, [r4, #0]
 8002eea:	1821      	adds	r1, r4, r0
 8002eec:	428b      	cmp	r3, r1
 8002eee:	bf04      	itt	eq
 8002ef0:	6819      	ldreq	r1, [r3, #0]
 8002ef2:	685b      	ldreq	r3, [r3, #4]
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	bf04      	itt	eq
 8002ef8:	1809      	addeq	r1, r1, r0
 8002efa:	6021      	streq	r1, [r4, #0]
 8002efc:	6054      	str	r4, [r2, #4]
 8002efe:	e7ca      	b.n	8002e96 <_free_r+0x22>
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
 8002f02:	bf00      	nop
 8002f04:	20000628 	.word	0x20000628

08002f08 <sbrk_aligned>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8002f48 <sbrk_aligned+0x40>)
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	6831      	ldr	r1, [r6, #0]
 8002f10:	4605      	mov	r5, r0
 8002f12:	b911      	cbnz	r1, 8002f1a <sbrk_aligned+0x12>
 8002f14:	f000 fba6 	bl	8003664 <_sbrk_r>
 8002f18:	6030      	str	r0, [r6, #0]
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 fba1 	bl	8003664 <_sbrk_r>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	d103      	bne.n	8002f2e <sbrk_aligned+0x26>
 8002f26:	f04f 34ff 	mov.w	r4, #4294967295
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	1cc4      	adds	r4, r0, #3
 8002f30:	f024 0403 	bic.w	r4, r4, #3
 8002f34:	42a0      	cmp	r0, r4
 8002f36:	d0f8      	beq.n	8002f2a <sbrk_aligned+0x22>
 8002f38:	1a21      	subs	r1, r4, r0
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f000 fb92 	bl	8003664 <_sbrk_r>
 8002f40:	3001      	adds	r0, #1
 8002f42:	d1f2      	bne.n	8002f2a <sbrk_aligned+0x22>
 8002f44:	e7ef      	b.n	8002f26 <sbrk_aligned+0x1e>
 8002f46:	bf00      	nop
 8002f48:	20000624 	.word	0x20000624

08002f4c <_malloc_r>:
 8002f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f50:	1ccd      	adds	r5, r1, #3
 8002f52:	f025 0503 	bic.w	r5, r5, #3
 8002f56:	3508      	adds	r5, #8
 8002f58:	2d0c      	cmp	r5, #12
 8002f5a:	bf38      	it	cc
 8002f5c:	250c      	movcc	r5, #12
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	4606      	mov	r6, r0
 8002f62:	db01      	blt.n	8002f68 <_malloc_r+0x1c>
 8002f64:	42a9      	cmp	r1, r5
 8002f66:	d904      	bls.n	8002f72 <_malloc_r+0x26>
 8002f68:	230c      	movs	r3, #12
 8002f6a:	6033      	str	r3, [r6, #0]
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003048 <_malloc_r+0xfc>
 8002f76:	f000 f869 	bl	800304c <__malloc_lock>
 8002f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f7e:	461c      	mov	r4, r3
 8002f80:	bb44      	cbnz	r4, 8002fd4 <_malloc_r+0x88>
 8002f82:	4629      	mov	r1, r5
 8002f84:	4630      	mov	r0, r6
 8002f86:	f7ff ffbf 	bl	8002f08 <sbrk_aligned>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	d158      	bne.n	8003042 <_malloc_r+0xf6>
 8002f90:	f8d8 4000 	ldr.w	r4, [r8]
 8002f94:	4627      	mov	r7, r4
 8002f96:	2f00      	cmp	r7, #0
 8002f98:	d143      	bne.n	8003022 <_malloc_r+0xd6>
 8002f9a:	2c00      	cmp	r4, #0
 8002f9c:	d04b      	beq.n	8003036 <_malloc_r+0xea>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	eb04 0903 	add.w	r9, r4, r3
 8002fa8:	f000 fb5c 	bl	8003664 <_sbrk_r>
 8002fac:	4581      	cmp	r9, r0
 8002fae:	d142      	bne.n	8003036 <_malloc_r+0xea>
 8002fb0:	6821      	ldr	r1, [r4, #0]
 8002fb2:	1a6d      	subs	r5, r5, r1
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f7ff ffa6 	bl	8002f08 <sbrk_aligned>
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	d03a      	beq.n	8003036 <_malloc_r+0xea>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	442b      	add	r3, r5
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	bb62      	cbnz	r2, 8003028 <_malloc_r+0xdc>
 8002fce:	f8c8 7000 	str.w	r7, [r8]
 8002fd2:	e00f      	b.n	8002ff4 <_malloc_r+0xa8>
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	1b52      	subs	r2, r2, r5
 8002fd8:	d420      	bmi.n	800301c <_malloc_r+0xd0>
 8002fda:	2a0b      	cmp	r2, #11
 8002fdc:	d917      	bls.n	800300e <_malloc_r+0xc2>
 8002fde:	1961      	adds	r1, r4, r5
 8002fe0:	42a3      	cmp	r3, r4
 8002fe2:	6025      	str	r5, [r4, #0]
 8002fe4:	bf18      	it	ne
 8002fe6:	6059      	strne	r1, [r3, #4]
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	bf08      	it	eq
 8002fec:	f8c8 1000 	streq.w	r1, [r8]
 8002ff0:	5162      	str	r2, [r4, r5]
 8002ff2:	604b      	str	r3, [r1, #4]
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f000 f82f 	bl	8003058 <__malloc_unlock>
 8002ffa:	f104 000b 	add.w	r0, r4, #11
 8002ffe:	1d23      	adds	r3, r4, #4
 8003000:	f020 0007 	bic.w	r0, r0, #7
 8003004:	1ac2      	subs	r2, r0, r3
 8003006:	bf1c      	itt	ne
 8003008:	1a1b      	subne	r3, r3, r0
 800300a:	50a3      	strne	r3, [r4, r2]
 800300c:	e7af      	b.n	8002f6e <_malloc_r+0x22>
 800300e:	6862      	ldr	r2, [r4, #4]
 8003010:	42a3      	cmp	r3, r4
 8003012:	bf0c      	ite	eq
 8003014:	f8c8 2000 	streq.w	r2, [r8]
 8003018:	605a      	strne	r2, [r3, #4]
 800301a:	e7eb      	b.n	8002ff4 <_malloc_r+0xa8>
 800301c:	4623      	mov	r3, r4
 800301e:	6864      	ldr	r4, [r4, #4]
 8003020:	e7ae      	b.n	8002f80 <_malloc_r+0x34>
 8003022:	463c      	mov	r4, r7
 8003024:	687f      	ldr	r7, [r7, #4]
 8003026:	e7b6      	b.n	8002f96 <_malloc_r+0x4a>
 8003028:	461a      	mov	r2, r3
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	42a3      	cmp	r3, r4
 800302e:	d1fb      	bne.n	8003028 <_malloc_r+0xdc>
 8003030:	2300      	movs	r3, #0
 8003032:	6053      	str	r3, [r2, #4]
 8003034:	e7de      	b.n	8002ff4 <_malloc_r+0xa8>
 8003036:	230c      	movs	r3, #12
 8003038:	6033      	str	r3, [r6, #0]
 800303a:	4630      	mov	r0, r6
 800303c:	f000 f80c 	bl	8003058 <__malloc_unlock>
 8003040:	e794      	b.n	8002f6c <_malloc_r+0x20>
 8003042:	6005      	str	r5, [r0, #0]
 8003044:	e7d6      	b.n	8002ff4 <_malloc_r+0xa8>
 8003046:	bf00      	nop
 8003048:	20000628 	.word	0x20000628

0800304c <__malloc_lock>:
 800304c:	4801      	ldr	r0, [pc, #4]	@ (8003054 <__malloc_lock+0x8>)
 800304e:	f7ff bf0f 	b.w	8002e70 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	20000620 	.word	0x20000620

08003058 <__malloc_unlock>:
 8003058:	4801      	ldr	r0, [pc, #4]	@ (8003060 <__malloc_unlock+0x8>)
 800305a:	f7ff bf0a 	b.w	8002e72 <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	20000620 	.word	0x20000620

08003064 <__ssputs_r>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	688e      	ldr	r6, [r1, #8]
 800306a:	461f      	mov	r7, r3
 800306c:	42be      	cmp	r6, r7
 800306e:	680b      	ldr	r3, [r1, #0]
 8003070:	4682      	mov	sl, r0
 8003072:	460c      	mov	r4, r1
 8003074:	4690      	mov	r8, r2
 8003076:	d82d      	bhi.n	80030d4 <__ssputs_r+0x70>
 8003078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800307c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003080:	d026      	beq.n	80030d0 <__ssputs_r+0x6c>
 8003082:	6965      	ldr	r5, [r4, #20]
 8003084:	6909      	ldr	r1, [r1, #16]
 8003086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800308a:	eba3 0901 	sub.w	r9, r3, r1
 800308e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003092:	1c7b      	adds	r3, r7, #1
 8003094:	444b      	add	r3, r9
 8003096:	106d      	asrs	r5, r5, #1
 8003098:	429d      	cmp	r5, r3
 800309a:	bf38      	it	cc
 800309c:	461d      	movcc	r5, r3
 800309e:	0553      	lsls	r3, r2, #21
 80030a0:	d527      	bpl.n	80030f2 <__ssputs_r+0x8e>
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7ff ff52 	bl	8002f4c <_malloc_r>
 80030a8:	4606      	mov	r6, r0
 80030aa:	b360      	cbz	r0, 8003106 <__ssputs_r+0xa2>
 80030ac:	6921      	ldr	r1, [r4, #16]
 80030ae:	464a      	mov	r2, r9
 80030b0:	f000 fae8 	bl	8003684 <memcpy>
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030be:	81a3      	strh	r3, [r4, #12]
 80030c0:	6126      	str	r6, [r4, #16]
 80030c2:	6165      	str	r5, [r4, #20]
 80030c4:	444e      	add	r6, r9
 80030c6:	eba5 0509 	sub.w	r5, r5, r9
 80030ca:	6026      	str	r6, [r4, #0]
 80030cc:	60a5      	str	r5, [r4, #8]
 80030ce:	463e      	mov	r6, r7
 80030d0:	42be      	cmp	r6, r7
 80030d2:	d900      	bls.n	80030d6 <__ssputs_r+0x72>
 80030d4:	463e      	mov	r6, r7
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	4632      	mov	r2, r6
 80030da:	4641      	mov	r1, r8
 80030dc:	f000 faa8 	bl	8003630 <memmove>
 80030e0:	68a3      	ldr	r3, [r4, #8]
 80030e2:	1b9b      	subs	r3, r3, r6
 80030e4:	60a3      	str	r3, [r4, #8]
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	4433      	add	r3, r6
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	2000      	movs	r0, #0
 80030ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f2:	462a      	mov	r2, r5
 80030f4:	f000 fad4 	bl	80036a0 <_realloc_r>
 80030f8:	4606      	mov	r6, r0
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d1e0      	bne.n	80030c0 <__ssputs_r+0x5c>
 80030fe:	6921      	ldr	r1, [r4, #16]
 8003100:	4650      	mov	r0, sl
 8003102:	f7ff feb7 	bl	8002e74 <_free_r>
 8003106:	230c      	movs	r3, #12
 8003108:	f8ca 3000 	str.w	r3, [sl]
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	e7e9      	b.n	80030ee <__ssputs_r+0x8a>
	...

0800311c <_svfiprintf_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	4698      	mov	r8, r3
 8003122:	898b      	ldrh	r3, [r1, #12]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	b09d      	sub	sp, #116	@ 0x74
 8003128:	4607      	mov	r7, r0
 800312a:	460d      	mov	r5, r1
 800312c:	4614      	mov	r4, r2
 800312e:	d510      	bpl.n	8003152 <_svfiprintf_r+0x36>
 8003130:	690b      	ldr	r3, [r1, #16]
 8003132:	b973      	cbnz	r3, 8003152 <_svfiprintf_r+0x36>
 8003134:	2140      	movs	r1, #64	@ 0x40
 8003136:	f7ff ff09 	bl	8002f4c <_malloc_r>
 800313a:	6028      	str	r0, [r5, #0]
 800313c:	6128      	str	r0, [r5, #16]
 800313e:	b930      	cbnz	r0, 800314e <_svfiprintf_r+0x32>
 8003140:	230c      	movs	r3, #12
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	b01d      	add	sp, #116	@ 0x74
 800314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314e:	2340      	movs	r3, #64	@ 0x40
 8003150:	616b      	str	r3, [r5, #20]
 8003152:	2300      	movs	r3, #0
 8003154:	9309      	str	r3, [sp, #36]	@ 0x24
 8003156:	2320      	movs	r3, #32
 8003158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800315c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003160:	2330      	movs	r3, #48	@ 0x30
 8003162:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003300 <_svfiprintf_r+0x1e4>
 8003166:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800316a:	f04f 0901 	mov.w	r9, #1
 800316e:	4623      	mov	r3, r4
 8003170:	469a      	mov	sl, r3
 8003172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003176:	b10a      	cbz	r2, 800317c <_svfiprintf_r+0x60>
 8003178:	2a25      	cmp	r2, #37	@ 0x25
 800317a:	d1f9      	bne.n	8003170 <_svfiprintf_r+0x54>
 800317c:	ebba 0b04 	subs.w	fp, sl, r4
 8003180:	d00b      	beq.n	800319a <_svfiprintf_r+0x7e>
 8003182:	465b      	mov	r3, fp
 8003184:	4622      	mov	r2, r4
 8003186:	4629      	mov	r1, r5
 8003188:	4638      	mov	r0, r7
 800318a:	f7ff ff6b 	bl	8003064 <__ssputs_r>
 800318e:	3001      	adds	r0, #1
 8003190:	f000 80a7 	beq.w	80032e2 <_svfiprintf_r+0x1c6>
 8003194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003196:	445a      	add	r2, fp
 8003198:	9209      	str	r2, [sp, #36]	@ 0x24
 800319a:	f89a 3000 	ldrb.w	r3, [sl]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 809f 	beq.w	80032e2 <_svfiprintf_r+0x1c6>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f04f 32ff 	mov.w	r2, #4294967295
 80031aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ae:	f10a 0a01 	add.w	sl, sl, #1
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	9307      	str	r3, [sp, #28]
 80031b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80031bc:	4654      	mov	r4, sl
 80031be:	2205      	movs	r2, #5
 80031c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c4:	484e      	ldr	r0, [pc, #312]	@ (8003300 <_svfiprintf_r+0x1e4>)
 80031c6:	f7fd f823 	bl	8000210 <memchr>
 80031ca:	9a04      	ldr	r2, [sp, #16]
 80031cc:	b9d8      	cbnz	r0, 8003206 <_svfiprintf_r+0xea>
 80031ce:	06d0      	lsls	r0, r2, #27
 80031d0:	bf44      	itt	mi
 80031d2:	2320      	movmi	r3, #32
 80031d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031d8:	0711      	lsls	r1, r2, #28
 80031da:	bf44      	itt	mi
 80031dc:	232b      	movmi	r3, #43	@ 0x2b
 80031de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031e2:	f89a 3000 	ldrb.w	r3, [sl]
 80031e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031e8:	d015      	beq.n	8003216 <_svfiprintf_r+0xfa>
 80031ea:	9a07      	ldr	r2, [sp, #28]
 80031ec:	4654      	mov	r4, sl
 80031ee:	2000      	movs	r0, #0
 80031f0:	f04f 0c0a 	mov.w	ip, #10
 80031f4:	4621      	mov	r1, r4
 80031f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031fa:	3b30      	subs	r3, #48	@ 0x30
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d94b      	bls.n	8003298 <_svfiprintf_r+0x17c>
 8003200:	b1b0      	cbz	r0, 8003230 <_svfiprintf_r+0x114>
 8003202:	9207      	str	r2, [sp, #28]
 8003204:	e014      	b.n	8003230 <_svfiprintf_r+0x114>
 8003206:	eba0 0308 	sub.w	r3, r0, r8
 800320a:	fa09 f303 	lsl.w	r3, r9, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	9304      	str	r3, [sp, #16]
 8003212:	46a2      	mov	sl, r4
 8003214:	e7d2      	b.n	80031bc <_svfiprintf_r+0xa0>
 8003216:	9b03      	ldr	r3, [sp, #12]
 8003218:	1d19      	adds	r1, r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	9103      	str	r1, [sp, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	bfbb      	ittet	lt
 8003222:	425b      	neglt	r3, r3
 8003224:	f042 0202 	orrlt.w	r2, r2, #2
 8003228:	9307      	strge	r3, [sp, #28]
 800322a:	9307      	strlt	r3, [sp, #28]
 800322c:	bfb8      	it	lt
 800322e:	9204      	strlt	r2, [sp, #16]
 8003230:	7823      	ldrb	r3, [r4, #0]
 8003232:	2b2e      	cmp	r3, #46	@ 0x2e
 8003234:	d10a      	bne.n	800324c <_svfiprintf_r+0x130>
 8003236:	7863      	ldrb	r3, [r4, #1]
 8003238:	2b2a      	cmp	r3, #42	@ 0x2a
 800323a:	d132      	bne.n	80032a2 <_svfiprintf_r+0x186>
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9203      	str	r2, [sp, #12]
 8003244:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003248:	3402      	adds	r4, #2
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003310 <_svfiprintf_r+0x1f4>
 8003250:	7821      	ldrb	r1, [r4, #0]
 8003252:	2203      	movs	r2, #3
 8003254:	4650      	mov	r0, sl
 8003256:	f7fc ffdb 	bl	8000210 <memchr>
 800325a:	b138      	cbz	r0, 800326c <_svfiprintf_r+0x150>
 800325c:	9b04      	ldr	r3, [sp, #16]
 800325e:	eba0 000a 	sub.w	r0, r0, sl
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	4082      	lsls	r2, r0
 8003266:	4313      	orrs	r3, r2
 8003268:	3401      	adds	r4, #1
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003270:	4824      	ldr	r0, [pc, #144]	@ (8003304 <_svfiprintf_r+0x1e8>)
 8003272:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003276:	2206      	movs	r2, #6
 8003278:	f7fc ffca 	bl	8000210 <memchr>
 800327c:	2800      	cmp	r0, #0
 800327e:	d036      	beq.n	80032ee <_svfiprintf_r+0x1d2>
 8003280:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <_svfiprintf_r+0x1ec>)
 8003282:	bb1b      	cbnz	r3, 80032cc <_svfiprintf_r+0x1b0>
 8003284:	9b03      	ldr	r3, [sp, #12]
 8003286:	3307      	adds	r3, #7
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	3308      	adds	r3, #8
 800328e:	9303      	str	r3, [sp, #12]
 8003290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003292:	4433      	add	r3, r6
 8003294:	9309      	str	r3, [sp, #36]	@ 0x24
 8003296:	e76a      	b.n	800316e <_svfiprintf_r+0x52>
 8003298:	fb0c 3202 	mla	r2, ip, r2, r3
 800329c:	460c      	mov	r4, r1
 800329e:	2001      	movs	r0, #1
 80032a0:	e7a8      	b.n	80031f4 <_svfiprintf_r+0xd8>
 80032a2:	2300      	movs	r3, #0
 80032a4:	3401      	adds	r4, #1
 80032a6:	9305      	str	r3, [sp, #20]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f04f 0c0a 	mov.w	ip, #10
 80032ae:	4620      	mov	r0, r4
 80032b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b4:	3a30      	subs	r2, #48	@ 0x30
 80032b6:	2a09      	cmp	r2, #9
 80032b8:	d903      	bls.n	80032c2 <_svfiprintf_r+0x1a6>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c6      	beq.n	800324c <_svfiprintf_r+0x130>
 80032be:	9105      	str	r1, [sp, #20]
 80032c0:	e7c4      	b.n	800324c <_svfiprintf_r+0x130>
 80032c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80032c6:	4604      	mov	r4, r0
 80032c8:	2301      	movs	r3, #1
 80032ca:	e7f0      	b.n	80032ae <_svfiprintf_r+0x192>
 80032cc:	ab03      	add	r3, sp, #12
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	462a      	mov	r2, r5
 80032d2:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <_svfiprintf_r+0x1f0>)
 80032d4:	a904      	add	r1, sp, #16
 80032d6:	4638      	mov	r0, r7
 80032d8:	f3af 8000 	nop.w
 80032dc:	1c42      	adds	r2, r0, #1
 80032de:	4606      	mov	r6, r0
 80032e0:	d1d6      	bne.n	8003290 <_svfiprintf_r+0x174>
 80032e2:	89ab      	ldrh	r3, [r5, #12]
 80032e4:	065b      	lsls	r3, r3, #25
 80032e6:	f53f af2d 	bmi.w	8003144 <_svfiprintf_r+0x28>
 80032ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032ec:	e72c      	b.n	8003148 <_svfiprintf_r+0x2c>
 80032ee:	ab03      	add	r3, sp, #12
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	462a      	mov	r2, r5
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <_svfiprintf_r+0x1f0>)
 80032f6:	a904      	add	r1, sp, #16
 80032f8:	4638      	mov	r0, r7
 80032fa:	f000 f879 	bl	80033f0 <_printf_i>
 80032fe:	e7ed      	b.n	80032dc <_svfiprintf_r+0x1c0>
 8003300:	080044a8 	.word	0x080044a8
 8003304:	080044b2 	.word	0x080044b2
 8003308:	00000000 	.word	0x00000000
 800330c:	08003065 	.word	0x08003065
 8003310:	080044ae 	.word	0x080044ae

08003314 <_printf_common>:
 8003314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	4616      	mov	r6, r2
 800331a:	4698      	mov	r8, r3
 800331c:	688a      	ldr	r2, [r1, #8]
 800331e:	690b      	ldr	r3, [r1, #16]
 8003320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003324:	4293      	cmp	r3, r2
 8003326:	bfb8      	it	lt
 8003328:	4613      	movlt	r3, r2
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003330:	4607      	mov	r7, r0
 8003332:	460c      	mov	r4, r1
 8003334:	b10a      	cbz	r2, 800333a <_printf_common+0x26>
 8003336:	3301      	adds	r3, #1
 8003338:	6033      	str	r3, [r6, #0]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	0699      	lsls	r1, r3, #26
 800333e:	bf42      	ittt	mi
 8003340:	6833      	ldrmi	r3, [r6, #0]
 8003342:	3302      	addmi	r3, #2
 8003344:	6033      	strmi	r3, [r6, #0]
 8003346:	6825      	ldr	r5, [r4, #0]
 8003348:	f015 0506 	ands.w	r5, r5, #6
 800334c:	d106      	bne.n	800335c <_printf_common+0x48>
 800334e:	f104 0a19 	add.w	sl, r4, #25
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	6832      	ldr	r2, [r6, #0]
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	42ab      	cmp	r3, r5
 800335a:	dc26      	bgt.n	80033aa <_printf_common+0x96>
 800335c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	3b00      	subs	r3, #0
 8003364:	bf18      	it	ne
 8003366:	2301      	movne	r3, #1
 8003368:	0692      	lsls	r2, r2, #26
 800336a:	d42b      	bmi.n	80033c4 <_printf_common+0xb0>
 800336c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003370:	4641      	mov	r1, r8
 8003372:	4638      	mov	r0, r7
 8003374:	47c8      	blx	r9
 8003376:	3001      	adds	r0, #1
 8003378:	d01e      	beq.n	80033b8 <_printf_common+0xa4>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	6922      	ldr	r2, [r4, #16]
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf02      	ittt	eq
 8003386:	68e5      	ldreq	r5, [r4, #12]
 8003388:	6833      	ldreq	r3, [r6, #0]
 800338a:	1aed      	subeq	r5, r5, r3
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	bf0c      	ite	eq
 8003390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003394:	2500      	movne	r5, #0
 8003396:	4293      	cmp	r3, r2
 8003398:	bfc4      	itt	gt
 800339a:	1a9b      	subgt	r3, r3, r2
 800339c:	18ed      	addgt	r5, r5, r3
 800339e:	2600      	movs	r6, #0
 80033a0:	341a      	adds	r4, #26
 80033a2:	42b5      	cmp	r5, r6
 80033a4:	d11a      	bne.n	80033dc <_printf_common+0xc8>
 80033a6:	2000      	movs	r0, #0
 80033a8:	e008      	b.n	80033bc <_printf_common+0xa8>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4652      	mov	r2, sl
 80033ae:	4641      	mov	r1, r8
 80033b0:	4638      	mov	r0, r7
 80033b2:	47c8      	blx	r9
 80033b4:	3001      	adds	r0, #1
 80033b6:	d103      	bne.n	80033c0 <_printf_common+0xac>
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c0:	3501      	adds	r5, #1
 80033c2:	e7c6      	b.n	8003352 <_printf_common+0x3e>
 80033c4:	18e1      	adds	r1, r4, r3
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	2030      	movs	r0, #48	@ 0x30
 80033ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033ce:	4422      	add	r2, r4
 80033d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033d8:	3302      	adds	r3, #2
 80033da:	e7c7      	b.n	800336c <_printf_common+0x58>
 80033dc:	2301      	movs	r3, #1
 80033de:	4622      	mov	r2, r4
 80033e0:	4641      	mov	r1, r8
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c8      	blx	r9
 80033e6:	3001      	adds	r0, #1
 80033e8:	d0e6      	beq.n	80033b8 <_printf_common+0xa4>
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7d9      	b.n	80033a2 <_printf_common+0x8e>
	...

080033f0 <_printf_i>:
 80033f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	7e0f      	ldrb	r7, [r1, #24]
 80033f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033f8:	2f78      	cmp	r7, #120	@ 0x78
 80033fa:	4691      	mov	r9, r2
 80033fc:	4680      	mov	r8, r0
 80033fe:	460c      	mov	r4, r1
 8003400:	469a      	mov	sl, r3
 8003402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003406:	d807      	bhi.n	8003418 <_printf_i+0x28>
 8003408:	2f62      	cmp	r7, #98	@ 0x62
 800340a:	d80a      	bhi.n	8003422 <_printf_i+0x32>
 800340c:	2f00      	cmp	r7, #0
 800340e:	f000 80d2 	beq.w	80035b6 <_printf_i+0x1c6>
 8003412:	2f58      	cmp	r7, #88	@ 0x58
 8003414:	f000 80b9 	beq.w	800358a <_printf_i+0x19a>
 8003418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800341c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003420:	e03a      	b.n	8003498 <_printf_i+0xa8>
 8003422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003426:	2b15      	cmp	r3, #21
 8003428:	d8f6      	bhi.n	8003418 <_printf_i+0x28>
 800342a:	a101      	add	r1, pc, #4	@ (adr r1, 8003430 <_printf_i+0x40>)
 800342c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003430:	08003489 	.word	0x08003489
 8003434:	0800349d 	.word	0x0800349d
 8003438:	08003419 	.word	0x08003419
 800343c:	08003419 	.word	0x08003419
 8003440:	08003419 	.word	0x08003419
 8003444:	08003419 	.word	0x08003419
 8003448:	0800349d 	.word	0x0800349d
 800344c:	08003419 	.word	0x08003419
 8003450:	08003419 	.word	0x08003419
 8003454:	08003419 	.word	0x08003419
 8003458:	08003419 	.word	0x08003419
 800345c:	0800359d 	.word	0x0800359d
 8003460:	080034c7 	.word	0x080034c7
 8003464:	08003557 	.word	0x08003557
 8003468:	08003419 	.word	0x08003419
 800346c:	08003419 	.word	0x08003419
 8003470:	080035bf 	.word	0x080035bf
 8003474:	08003419 	.word	0x08003419
 8003478:	080034c7 	.word	0x080034c7
 800347c:	08003419 	.word	0x08003419
 8003480:	08003419 	.word	0x08003419
 8003484:	0800355f 	.word	0x0800355f
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6032      	str	r2, [r6, #0]
 8003490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003498:	2301      	movs	r3, #1
 800349a:	e09d      	b.n	80035d8 <_printf_i+0x1e8>
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	6820      	ldr	r0, [r4, #0]
 80034a0:	1d19      	adds	r1, r3, #4
 80034a2:	6031      	str	r1, [r6, #0]
 80034a4:	0606      	lsls	r6, r0, #24
 80034a6:	d501      	bpl.n	80034ac <_printf_i+0xbc>
 80034a8:	681d      	ldr	r5, [r3, #0]
 80034aa:	e003      	b.n	80034b4 <_printf_i+0xc4>
 80034ac:	0645      	lsls	r5, r0, #25
 80034ae:	d5fb      	bpl.n	80034a8 <_printf_i+0xb8>
 80034b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	da03      	bge.n	80034c0 <_printf_i+0xd0>
 80034b8:	232d      	movs	r3, #45	@ 0x2d
 80034ba:	426d      	negs	r5, r5
 80034bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034c0:	4859      	ldr	r0, [pc, #356]	@ (8003628 <_printf_i+0x238>)
 80034c2:	230a      	movs	r3, #10
 80034c4:	e011      	b.n	80034ea <_printf_i+0xfa>
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	0608      	lsls	r0, r1, #24
 80034cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80034d0:	d402      	bmi.n	80034d8 <_printf_i+0xe8>
 80034d2:	0649      	lsls	r1, r1, #25
 80034d4:	bf48      	it	mi
 80034d6:	b2ad      	uxthmi	r5, r5
 80034d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80034da:	4853      	ldr	r0, [pc, #332]	@ (8003628 <_printf_i+0x238>)
 80034dc:	6033      	str	r3, [r6, #0]
 80034de:	bf14      	ite	ne
 80034e0:	230a      	movne	r3, #10
 80034e2:	2308      	moveq	r3, #8
 80034e4:	2100      	movs	r1, #0
 80034e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034ea:	6866      	ldr	r6, [r4, #4]
 80034ec:	60a6      	str	r6, [r4, #8]
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	bfa2      	ittt	ge
 80034f2:	6821      	ldrge	r1, [r4, #0]
 80034f4:	f021 0104 	bicge.w	r1, r1, #4
 80034f8:	6021      	strge	r1, [r4, #0]
 80034fa:	b90d      	cbnz	r5, 8003500 <_printf_i+0x110>
 80034fc:	2e00      	cmp	r6, #0
 80034fe:	d04b      	beq.n	8003598 <_printf_i+0x1a8>
 8003500:	4616      	mov	r6, r2
 8003502:	fbb5 f1f3 	udiv	r1, r5, r3
 8003506:	fb03 5711 	mls	r7, r3, r1, r5
 800350a:	5dc7      	ldrb	r7, [r0, r7]
 800350c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003510:	462f      	mov	r7, r5
 8003512:	42bb      	cmp	r3, r7
 8003514:	460d      	mov	r5, r1
 8003516:	d9f4      	bls.n	8003502 <_printf_i+0x112>
 8003518:	2b08      	cmp	r3, #8
 800351a:	d10b      	bne.n	8003534 <_printf_i+0x144>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	07df      	lsls	r7, r3, #31
 8003520:	d508      	bpl.n	8003534 <_printf_i+0x144>
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	6861      	ldr	r1, [r4, #4]
 8003526:	4299      	cmp	r1, r3
 8003528:	bfde      	ittt	le
 800352a:	2330      	movle	r3, #48	@ 0x30
 800352c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003534:	1b92      	subs	r2, r2, r6
 8003536:	6122      	str	r2, [r4, #16]
 8003538:	f8cd a000 	str.w	sl, [sp]
 800353c:	464b      	mov	r3, r9
 800353e:	aa03      	add	r2, sp, #12
 8003540:	4621      	mov	r1, r4
 8003542:	4640      	mov	r0, r8
 8003544:	f7ff fee6 	bl	8003314 <_printf_common>
 8003548:	3001      	adds	r0, #1
 800354a:	d14a      	bne.n	80035e2 <_printf_i+0x1f2>
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	b004      	add	sp, #16
 8003552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	f043 0320 	orr.w	r3, r3, #32
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	4833      	ldr	r0, [pc, #204]	@ (800362c <_printf_i+0x23c>)
 8003560:	2778      	movs	r7, #120	@ 0x78
 8003562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6831      	ldr	r1, [r6, #0]
 800356a:	061f      	lsls	r7, r3, #24
 800356c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003570:	d402      	bmi.n	8003578 <_printf_i+0x188>
 8003572:	065f      	lsls	r7, r3, #25
 8003574:	bf48      	it	mi
 8003576:	b2ad      	uxthmi	r5, r5
 8003578:	6031      	str	r1, [r6, #0]
 800357a:	07d9      	lsls	r1, r3, #31
 800357c:	bf44      	itt	mi
 800357e:	f043 0320 	orrmi.w	r3, r3, #32
 8003582:	6023      	strmi	r3, [r4, #0]
 8003584:	b11d      	cbz	r5, 800358e <_printf_i+0x19e>
 8003586:	2310      	movs	r3, #16
 8003588:	e7ac      	b.n	80034e4 <_printf_i+0xf4>
 800358a:	4827      	ldr	r0, [pc, #156]	@ (8003628 <_printf_i+0x238>)
 800358c:	e7e9      	b.n	8003562 <_printf_i+0x172>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	f023 0320 	bic.w	r3, r3, #32
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	e7f6      	b.n	8003586 <_printf_i+0x196>
 8003598:	4616      	mov	r6, r2
 800359a:	e7bd      	b.n	8003518 <_printf_i+0x128>
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	6961      	ldr	r1, [r4, #20]
 80035a2:	1d18      	adds	r0, r3, #4
 80035a4:	6030      	str	r0, [r6, #0]
 80035a6:	062e      	lsls	r6, r5, #24
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	d501      	bpl.n	80035b0 <_printf_i+0x1c0>
 80035ac:	6019      	str	r1, [r3, #0]
 80035ae:	e002      	b.n	80035b6 <_printf_i+0x1c6>
 80035b0:	0668      	lsls	r0, r5, #25
 80035b2:	d5fb      	bpl.n	80035ac <_printf_i+0x1bc>
 80035b4:	8019      	strh	r1, [r3, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	4616      	mov	r6, r2
 80035bc:	e7bc      	b.n	8003538 <_printf_i+0x148>
 80035be:	6833      	ldr	r3, [r6, #0]
 80035c0:	1d1a      	adds	r2, r3, #4
 80035c2:	6032      	str	r2, [r6, #0]
 80035c4:	681e      	ldr	r6, [r3, #0]
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	2100      	movs	r1, #0
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7fc fe20 	bl	8000210 <memchr>
 80035d0:	b108      	cbz	r0, 80035d6 <_printf_i+0x1e6>
 80035d2:	1b80      	subs	r0, r0, r6
 80035d4:	6060      	str	r0, [r4, #4]
 80035d6:	6863      	ldr	r3, [r4, #4]
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	2300      	movs	r3, #0
 80035dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e0:	e7aa      	b.n	8003538 <_printf_i+0x148>
 80035e2:	6923      	ldr	r3, [r4, #16]
 80035e4:	4632      	mov	r2, r6
 80035e6:	4649      	mov	r1, r9
 80035e8:	4640      	mov	r0, r8
 80035ea:	47d0      	blx	sl
 80035ec:	3001      	adds	r0, #1
 80035ee:	d0ad      	beq.n	800354c <_printf_i+0x15c>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	079b      	lsls	r3, r3, #30
 80035f4:	d413      	bmi.n	800361e <_printf_i+0x22e>
 80035f6:	68e0      	ldr	r0, [r4, #12]
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	4298      	cmp	r0, r3
 80035fc:	bfb8      	it	lt
 80035fe:	4618      	movlt	r0, r3
 8003600:	e7a6      	b.n	8003550 <_printf_i+0x160>
 8003602:	2301      	movs	r3, #1
 8003604:	4632      	mov	r2, r6
 8003606:	4649      	mov	r1, r9
 8003608:	4640      	mov	r0, r8
 800360a:	47d0      	blx	sl
 800360c:	3001      	adds	r0, #1
 800360e:	d09d      	beq.n	800354c <_printf_i+0x15c>
 8003610:	3501      	adds	r5, #1
 8003612:	68e3      	ldr	r3, [r4, #12]
 8003614:	9903      	ldr	r1, [sp, #12]
 8003616:	1a5b      	subs	r3, r3, r1
 8003618:	42ab      	cmp	r3, r5
 800361a:	dcf2      	bgt.n	8003602 <_printf_i+0x212>
 800361c:	e7eb      	b.n	80035f6 <_printf_i+0x206>
 800361e:	2500      	movs	r5, #0
 8003620:	f104 0619 	add.w	r6, r4, #25
 8003624:	e7f5      	b.n	8003612 <_printf_i+0x222>
 8003626:	bf00      	nop
 8003628:	080044b9 	.word	0x080044b9
 800362c:	080044ca 	.word	0x080044ca

08003630 <memmove>:
 8003630:	4288      	cmp	r0, r1
 8003632:	b510      	push	{r4, lr}
 8003634:	eb01 0402 	add.w	r4, r1, r2
 8003638:	d902      	bls.n	8003640 <memmove+0x10>
 800363a:	4284      	cmp	r4, r0
 800363c:	4623      	mov	r3, r4
 800363e:	d807      	bhi.n	8003650 <memmove+0x20>
 8003640:	1e43      	subs	r3, r0, #1
 8003642:	42a1      	cmp	r1, r4
 8003644:	d008      	beq.n	8003658 <memmove+0x28>
 8003646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800364a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800364e:	e7f8      	b.n	8003642 <memmove+0x12>
 8003650:	4402      	add	r2, r0
 8003652:	4601      	mov	r1, r0
 8003654:	428a      	cmp	r2, r1
 8003656:	d100      	bne.n	800365a <memmove+0x2a>
 8003658:	bd10      	pop	{r4, pc}
 800365a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800365e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003662:	e7f7      	b.n	8003654 <memmove+0x24>

08003664 <_sbrk_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4d06      	ldr	r5, [pc, #24]	@ (8003680 <_sbrk_r+0x1c>)
 8003668:	2300      	movs	r3, #0
 800366a:	4604      	mov	r4, r0
 800366c:	4608      	mov	r0, r1
 800366e:	602b      	str	r3, [r5, #0]
 8003670:	f7fd f9aa 	bl	80009c8 <_sbrk>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d102      	bne.n	800367e <_sbrk_r+0x1a>
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	b103      	cbz	r3, 800367e <_sbrk_r+0x1a>
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	2000061c 	.word	0x2000061c

08003684 <memcpy>:
 8003684:	440a      	add	r2, r1
 8003686:	4291      	cmp	r1, r2
 8003688:	f100 33ff 	add.w	r3, r0, #4294967295
 800368c:	d100      	bne.n	8003690 <memcpy+0xc>
 800368e:	4770      	bx	lr
 8003690:	b510      	push	{r4, lr}
 8003692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800369a:	4291      	cmp	r1, r2
 800369c:	d1f9      	bne.n	8003692 <memcpy+0xe>
 800369e:	bd10      	pop	{r4, pc}

080036a0 <_realloc_r>:
 80036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a4:	4680      	mov	r8, r0
 80036a6:	4615      	mov	r5, r2
 80036a8:	460c      	mov	r4, r1
 80036aa:	b921      	cbnz	r1, 80036b6 <_realloc_r+0x16>
 80036ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	4611      	mov	r1, r2
 80036b2:	f7ff bc4b 	b.w	8002f4c <_malloc_r>
 80036b6:	b92a      	cbnz	r2, 80036c4 <_realloc_r+0x24>
 80036b8:	f7ff fbdc 	bl	8002e74 <_free_r>
 80036bc:	2400      	movs	r4, #0
 80036be:	4620      	mov	r0, r4
 80036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c4:	f000 f81a 	bl	80036fc <_malloc_usable_size_r>
 80036c8:	4285      	cmp	r5, r0
 80036ca:	4606      	mov	r6, r0
 80036cc:	d802      	bhi.n	80036d4 <_realloc_r+0x34>
 80036ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80036d2:	d8f4      	bhi.n	80036be <_realloc_r+0x1e>
 80036d4:	4629      	mov	r1, r5
 80036d6:	4640      	mov	r0, r8
 80036d8:	f7ff fc38 	bl	8002f4c <_malloc_r>
 80036dc:	4607      	mov	r7, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d0ec      	beq.n	80036bc <_realloc_r+0x1c>
 80036e2:	42b5      	cmp	r5, r6
 80036e4:	462a      	mov	r2, r5
 80036e6:	4621      	mov	r1, r4
 80036e8:	bf28      	it	cs
 80036ea:	4632      	movcs	r2, r6
 80036ec:	f7ff ffca 	bl	8003684 <memcpy>
 80036f0:	4621      	mov	r1, r4
 80036f2:	4640      	mov	r0, r8
 80036f4:	f7ff fbbe 	bl	8002e74 <_free_r>
 80036f8:	463c      	mov	r4, r7
 80036fa:	e7e0      	b.n	80036be <_realloc_r+0x1e>

080036fc <_malloc_usable_size_r>:
 80036fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003700:	1f18      	subs	r0, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfbc      	itt	lt
 8003706:	580b      	ldrlt	r3, [r1, r0]
 8003708:	18c0      	addlt	r0, r0, r3
 800370a:	4770      	bx	lr

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
