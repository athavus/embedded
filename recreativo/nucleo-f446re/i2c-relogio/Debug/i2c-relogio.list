
i2c-relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e0  080060e0  000080d8  2**0
                  CONTENTS
  4 .ARM          00000008  080060e0  080060e0  000070e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e8  080060e8  000080d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000070e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  080060f0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200000d8  080061c8  000080d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  080061c8  000086cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008df7  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  00010eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f3  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022404  00000000  00000000  000139fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb68  00000000  00000000  00035dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca9a0  00000000  00000000  00042967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  0010d34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00110898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800567c 	.word	0x0800567c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	0800567c 	.word	0x0800567c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9b5 	b.w	800066c <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fdd1 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f847 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8e1 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000682:	f000 f8b1 	bl	80007e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8000686:	f000 fb03 	bl	8000c90 <SSD1306_Init>
  char buffer[20] = {0};
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 SSD1306_Clear();
 800069c:	f000 fd1b 	bl	80010d6 <SSD1306_Clear>
	 SSD1306_GotoXY(0, 20);
 80006a0:	2114      	movs	r1, #20
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fc5e 	bl	8000f64 <SSD1306_GotoXY>
	 time_t s= 1;
 80006a8:	f04f 0201 	mov.w	r2, #1
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e9c7 2300 	strd	r2, r3, [r7]

	 struct tm* current_time;

	 s = time(NULL);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f002 feb7 	bl	8003428 <time>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	e9c7 2300 	strd	r2, r3, [r7]

	 current_time = localtime(&s);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fda3 	bl	8003210 <localtime>
 80006ca:	61f8      	str	r0, [r7, #28]

	 sprintf(buffer, "%02d:%02d:%02d",
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	6859      	ldr	r1, [r3, #4]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f107 0008 	add.w	r0, r7, #8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	460b      	mov	r3, r1
 80006e0:	4908      	ldr	r1, [pc, #32]	@ (8000704 <main+0x94>)
 80006e2:	f002 fd27 	bl	8003134 <siprintf>
				current_time->tm_hour,
				current_time->tm_min,
				current_time->tm_sec);

	 SSD1306_Puts(buffer, &Font_7x10, 1);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2201      	movs	r2, #1
 80006ec:	4906      	ldr	r1, [pc, #24]	@ (8000708 <main+0x98>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fccc 	bl	800108c <SSD1306_Puts>
	 SSD1306_UpdateScreen();
 80006f4:	f000 fb90 	bl	8000e18 <SSD1306_UpdateScreen>

	 HAL_Delay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fc:	f000 fe00 	bl	8001300 <HAL_Delay>
  {
 8000700:	bf00      	nop
 8000702:	e7cb      	b.n	800069c <main+0x2c>
 8000704:	08005694 	.word	0x08005694
 8000708:	20000008 	.word	0x20000008

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	@ 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fd6f 	bl	80031fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <SystemClock_Config+0xd4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a22      	ldr	r2, [pc, #136]	@ (80007e4 <SystemClock_Config+0xd8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000784:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800078a:	2304      	movs	r3, #4
 800078c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f96a 	bl	8002a74 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007a6:	f000 f8cb 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fe1e 	bl	8002408 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007d2:	f000 f8b5 	bl	8000940 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	@ (800083c <MX_I2C1_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2C1_Init+0x50>)
 80007f4:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_I2C1_Init+0x58>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_I2C1_Init+0x50>)
 8000806:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_I2C1_Init+0x50>)
 8000826:	f001 f823 	bl	8001870 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f886 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000f4 	.word	0x200000f4
 800083c:	40005400 	.word	0x40005400
 8000840:	00061a80 	.word	0x00061a80

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <MX_GPIO_Init+0xf0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a34      	ldr	r2, [pc, #208]	@ (8000934 <MX_GPIO_Init+0xf0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <MX_GPIO_Init+0xf0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_GPIO_Init+0xf0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a2d      	ldr	r2, [pc, #180]	@ (8000934 <MX_GPIO_Init+0xf0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b2b      	ldr	r3, [pc, #172]	@ (8000934 <MX_GPIO_Init+0xf0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_GPIO_Init+0xf0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a26      	ldr	r2, [pc, #152]	@ (8000934 <MX_GPIO_Init+0xf0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_GPIO_Init+0xf0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_GPIO_Init+0xf0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <MX_GPIO_Init+0xf0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_GPIO_Init+0xf0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	481a      	ldr	r0, [pc, #104]	@ (8000938 <MX_GPIO_Init+0xf4>)
 80008d0:	f000 ffb4 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4814      	ldr	r0, [pc, #80]	@ (800093c <MX_GPIO_Init+0xf8>)
 80008ec:	f000 fe12 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f0:	230c      	movs	r3, #12
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000900:	2307      	movs	r3, #7
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480b      	ldr	r0, [pc, #44]	@ (8000938 <MX_GPIO_Init+0xf4>)
 800090c:	f000 fe02 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_GPIO_Init+0xf4>)
 8000928:	f000 fdf4 	bl	8001514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020800 	.word	0x40020800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fd8e 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_I2C_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ec:	2304      	movs	r3, #4
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <HAL_I2C_MspInit+0x8c>)
 80009f8:	f000 fd8c 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 fc1d 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_kill>:

int _kill(int pid, int sig)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa4:	f003 f812 	bl	8003acc <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2216      	movs	r2, #22
 8000aac:	601a      	str	r2, [r3, #0]
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_exit>:

void _exit (int status)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffe7 	bl	8000a9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <_exit+0x12>

08000ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 ff76 	bl	8003acc <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	2000014c 	.word	0x2000014c
 8000c14:	200006d0 	.word	0x200006d0

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 ff35 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fcff 	bl	8000670 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000c80:	080060f0 	.word	0x080060f0
  ldr r2, =_sbss
 8000c84:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000c88:	200006cc 	.word	0x200006cc

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c96:	f000 fa27 	bl	80010e8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c9a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2178      	movs	r1, #120	@ 0x78
 8000ca2:	485b      	ldr	r0, [pc, #364]	@ (8000e10 <SSD1306_Init+0x180>)
 8000ca4:	f001 f826 	bl	8001cf4 <HAL_I2C_IsDeviceReady>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e0a9      	b.n	8000e06 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000cb2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000cb6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cb8:	e002      	b.n	8000cc0 <SSD1306_Init+0x30>
		p--;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f9      	bne.n	8000cba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cc6:	22ae      	movs	r2, #174	@ 0xae
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	@ 0x78
 8000ccc:	f000 fa88 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2078      	movs	r0, #120	@ 0x78
 8000cd6:	f000 fa83 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cda:	2210      	movs	r2, #16
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2078      	movs	r0, #120	@ 0x78
 8000ce0:	f000 fa7e 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ce4:	22b0      	movs	r2, #176	@ 0xb0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2078      	movs	r0, #120	@ 0x78
 8000cea:	f000 fa79 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000cee:	22c8      	movs	r2, #200	@ 0xc8
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2078      	movs	r0, #120	@ 0x78
 8000cf4:	f000 fa74 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2078      	movs	r0, #120	@ 0x78
 8000cfe:	f000 fa6f 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d02:	2210      	movs	r2, #16
 8000d04:	2100      	movs	r1, #0
 8000d06:	2078      	movs	r0, #120	@ 0x78
 8000d08:	f000 fa6a 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d0c:	2240      	movs	r2, #64	@ 0x40
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2078      	movs	r0, #120	@ 0x78
 8000d12:	f000 fa65 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d16:	2281      	movs	r2, #129	@ 0x81
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	@ 0x78
 8000d1c:	f000 fa60 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d20:	22ff      	movs	r2, #255	@ 0xff
 8000d22:	2100      	movs	r1, #0
 8000d24:	2078      	movs	r0, #120	@ 0x78
 8000d26:	f000 fa5b 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d2a:	22a1      	movs	r2, #161	@ 0xa1
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2078      	movs	r0, #120	@ 0x78
 8000d30:	f000 fa56 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d34:	22a6      	movs	r2, #166	@ 0xa6
 8000d36:	2100      	movs	r1, #0
 8000d38:	2078      	movs	r0, #120	@ 0x78
 8000d3a:	f000 fa51 	bl	80011e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000d3e:	22a8      	movs	r2, #168	@ 0xa8
 8000d40:	2100      	movs	r1, #0
 8000d42:	2078      	movs	r0, #120	@ 0x78
 8000d44:	f000 fa4c 	bl	80011e0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000d48:	223f      	movs	r2, #63	@ 0x3f
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2078      	movs	r0, #120	@ 0x78
 8000d4e:	f000 fa47 	bl	80011e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d52:	22a4      	movs	r2, #164	@ 0xa4
 8000d54:	2100      	movs	r1, #0
 8000d56:	2078      	movs	r0, #120	@ 0x78
 8000d58:	f000 fa42 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d5c:	22d3      	movs	r2, #211	@ 0xd3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2078      	movs	r0, #120	@ 0x78
 8000d62:	f000 fa3d 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f000 fa38 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d70:	22d5      	movs	r2, #213	@ 0xd5
 8000d72:	2100      	movs	r1, #0
 8000d74:	2078      	movs	r0, #120	@ 0x78
 8000d76:	f000 fa33 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d7a:	22f0      	movs	r2, #240	@ 0xf0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2078      	movs	r0, #120	@ 0x78
 8000d80:	f000 fa2e 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d84:	22d9      	movs	r2, #217	@ 0xd9
 8000d86:	2100      	movs	r1, #0
 8000d88:	2078      	movs	r0, #120	@ 0x78
 8000d8a:	f000 fa29 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d8e:	2222      	movs	r2, #34	@ 0x22
 8000d90:	2100      	movs	r1, #0
 8000d92:	2078      	movs	r0, #120	@ 0x78
 8000d94:	f000 fa24 	bl	80011e0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d98:	22da      	movs	r2, #218	@ 0xda
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2078      	movs	r0, #120	@ 0x78
 8000d9e:	f000 fa1f 	bl	80011e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000da2:	2212      	movs	r2, #18
 8000da4:	2100      	movs	r1, #0
 8000da6:	2078      	movs	r0, #120	@ 0x78
 8000da8:	f000 fa1a 	bl	80011e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000dac:	22db      	movs	r2, #219	@ 0xdb
 8000dae:	2100      	movs	r1, #0
 8000db0:	2078      	movs	r0, #120	@ 0x78
 8000db2:	f000 fa15 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000db6:	2220      	movs	r2, #32
 8000db8:	2100      	movs	r1, #0
 8000dba:	2078      	movs	r0, #120	@ 0x78
 8000dbc:	f000 fa10 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000dc0:	228d      	movs	r2, #141	@ 0x8d
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2078      	movs	r0, #120	@ 0x78
 8000dc6:	f000 fa0b 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000dca:	2214      	movs	r2, #20
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2078      	movs	r0, #120	@ 0x78
 8000dd0:	f000 fa06 	bl	80011e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000dd4:	22af      	movs	r2, #175	@ 0xaf
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2078      	movs	r0, #120	@ 0x78
 8000dda:	f000 fa01 	bl	80011e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000dde:	222e      	movs	r2, #46	@ 0x2e
 8000de0:	2100      	movs	r1, #0
 8000de2:	2078      	movs	r0, #120	@ 0x78
 8000de4:	f000 f9fc 	bl	80011e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f843 	bl	8000e74 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000dee:	f000 f813 	bl	8000e18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <SSD1306_Init+0x184>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SSD1306_Init+0x184>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <SSD1306_Init+0x184>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000f4 	.word	0x200000f4
 8000e14:	20000550 	.word	0x20000550

08000e18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e01d      	b.n	8000e60 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	3b50      	subs	r3, #80	@ 0x50
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	@ 0x78
 8000e30:	f000 f9d6 	bl	80011e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2078      	movs	r0, #120	@ 0x78
 8000e3a:	f000 f9d1 	bl	80011e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e3e:	2210      	movs	r2, #16
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	@ 0x78
 8000e44:	f000 f9cc 	bl	80011e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	01db      	lsls	r3, r3, #7
 8000e4c:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <SSD1306_UpdateScreen+0x58>)
 8000e4e:	441a      	add	r2, r3
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	2140      	movs	r1, #64	@ 0x40
 8000e54:	2078      	movs	r0, #120	@ 0x78
 8000e56:	f000 f95d 	bl	8001114 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9de      	bls.n	8000e24 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000150 	.word	0x20000150

08000e74 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <SSD1306_Fill+0x14>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e000      	b.n	8000e8a <SSD1306_Fill+0x16>
 8000e88:	23ff      	movs	r3, #255	@ 0xff
 8000e8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <SSD1306_Fill+0x2c>)
 8000e92:	f002 f9b4 	bl	80031fe <memset>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000150 	.word	0x20000150

08000ea4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	70fb      	strb	r3, [r7, #3]
	if (
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eba:	d848      	bhi.n	8000f4e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ec0:	d845      	bhi.n	8000f4e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <SSD1306_DrawPixel+0xb8>)
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d11a      	bne.n	8000f14 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	b298      	uxth	r0, r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	01db      	lsls	r3, r3, #7
 8000eea:	4413      	add	r3, r2
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <SSD1306_DrawPixel+0xbc>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b259      	sxtb	r1, r3
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	01db      	lsls	r3, r3, #7
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2c9      	uxtb	r1, r1
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <SSD1306_DrawPixel+0xbc>)
 8000f10:	54d1      	strb	r1, [r2, r3]
 8000f12:	e01d      	b.n	8000f50 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	b298      	uxth	r0, r3
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	01db      	lsls	r3, r3, #7
 8000f20:	4413      	add	r3, r2
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <SSD1306_DrawPixel+0xbc>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	b259      	sxtb	r1, r3
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	4603      	mov	r3, r0
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	4413      	add	r3, r2
 8000f46:	b2c9      	uxtb	r1, r1
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <SSD1306_DrawPixel+0xbc>)
 8000f4a:	54d1      	strb	r1, [r2, r3]
 8000f4c:	e000      	b.n	8000f50 <SSD1306_DrawPixel+0xac>
		return;
 8000f4e:	bf00      	nop
	}
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000550 	.word	0x20000550
 8000f60:	20000150 	.word	0x20000150

08000f64 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	80fb      	strh	r3, [r7, #6]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f74:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SSD1306_GotoXY+0x28>)
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <SSD1306_GotoXY+0x28>)
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	8053      	strh	r3, [r2, #2]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000550 	.word	0x20000550

08000f90 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fa0:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <SSD1306_Putc+0xf8>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
	if (
 8000fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fae:	dc07      	bgt.n	8000fc0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fb0:	4b35      	ldr	r3, [pc, #212]	@ (8001088 <SSD1306_Putc+0xf8>)
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fbe:	dd01      	ble.n	8000fc4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e05d      	b.n	8001080 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e04b      	b.n	8001062 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	7849      	ldrb	r1, [r1, #1]
 8000fd6:	fb01 f303 	mul.w	r3, r1, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	e030      	b.n	8001050 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d010      	beq.n	8001020 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <SSD1306_Putc+0xf8>)
 8001000:	881a      	ldrh	r2, [r3, #0]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b298      	uxth	r0, r3
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <SSD1306_Putc+0xf8>)
 800100c:	885a      	ldrh	r2, [r3, #2]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4413      	add	r3, r2
 8001014:	b29b      	uxth	r3, r3
 8001016:	79ba      	ldrb	r2, [r7, #6]
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff ff43 	bl	8000ea4 <SSD1306_DrawPixel>
 800101e:	e014      	b.n	800104a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <SSD1306_Putc+0xf8>)
 8001022:	881a      	ldrh	r2, [r3, #0]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b298      	uxth	r0, r3
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <SSD1306_Putc+0xf8>)
 800102e:	885a      	ldrh	r2, [r3, #2]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b299      	uxth	r1, r3
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	f7ff ff2d 	bl	8000ea4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4293      	cmp	r3, r2
 800105a:	d3c8      	bcc.n	8000fee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	461a      	mov	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4293      	cmp	r3, r2
 800106c:	d3ad      	bcc.n	8000fca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <SSD1306_Putc+0xf8>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	4413      	add	r3, r2
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <SSD1306_Putc+0xf8>)
 800107c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000550 	.word	0x20000550

0800108c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800109a:	e012      	b.n	80010c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff73 	bl	8000f90 <SSD1306_Putc>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d002      	beq.n	80010bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	e008      	b.n	80010ce <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e8      	bne.n	800109c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	781b      	ldrb	r3, [r3, #0]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff feca 	bl	8000e74 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80010e0:	f7ff fe9a 	bl	8000e18 <SSD1306_UpdateScreen>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <ssd1306_I2C_Init+0x28>)
 80010f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010f2:	e002      	b.n	80010fa <ssd1306_I2C_Init+0x12>
		p--;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f9      	bne.n	80010f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	0003d090 	.word	0x0003d090

08001114 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b0c7      	sub	sp, #284	@ 0x11c
 8001118:	af02      	add	r7, sp, #8
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001122:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001126:	600a      	str	r2, [r1, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800112e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001132:	4622      	mov	r2, r4
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800113a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800113e:	4602      	mov	r2, r0
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800114a:	460a      	mov	r2, r1
 800114c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800114e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001156:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800115a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001168:	e015      	b.n	8001196 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800116a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800116e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001172:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	441a      	add	r2, r3
 800117a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800117e:	3301      	adds	r3, #1
 8001180:	7811      	ldrb	r1, [r2, #0]
 8001182:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001186:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800118a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800118c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001190:	3301      	adds	r3, #1
 8001192:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001196:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800119a:	b29b      	uxth	r3, r3
 800119c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011a0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80011a4:	8812      	ldrh	r2, [r2, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d8df      	bhi.n	800116a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80011aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	200a      	movs	r0, #10
 80011ca:	9000      	str	r0, [sp, #0]
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <ssd1306_I2C_WriteMulti+0xc8>)
 80011ce:	f000 fc93 	bl	8001af8 <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	460b      	mov	r3, r1
 80011ec:	71bb      	strb	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	230a      	movs	r3, #10
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2302      	movs	r3, #2
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <ssd1306_I2C_Write+0x38>)
 800120a:	f000 fc75 	bl	8001af8 <HAL_I2C_Master_Transmit>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000f4 	.word	0x200000f4

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f931 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fb7c 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f93b 	bl	80014fa <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f911 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000014 	.word	0x20000014
 80012bc:	20000010 	.word	0x20000010

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000014 	.word	0x20000014
 80012e4:	20000558 	.word	0x20000558

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000558 	.word	0x20000558

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000014 	.word	0x20000014

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff47 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff5c 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffb0 	bl	8001468 <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e165      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8154 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80ae 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_GPIO_Init+0x300>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_GPIO_Init+0x300>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001814 <HAL_GPIO_Init+0x300>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a58      	ldr	r2, [pc, #352]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	@ (800181c <HAL_GPIO_Init+0x308>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001820 <HAL_GPIO_Init+0x30c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001824 <HAL_GPIO_Init+0x310>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001828 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	@ (800182c <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x20a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x206>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	@ (8001834 <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x202>
 8001712:	2306      	movs	r3, #6
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001716:	2307      	movs	r3, #7
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x21c>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3a      	ldr	r3, [pc, #232]	@ (8001838 <HAL_GPIO_Init+0x324>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <HAL_GPIO_Init+0x324>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <HAL_GPIO_Init+0x324>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <HAL_GPIO_Init+0x324>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_GPIO_Init+0x324>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <HAL_GPIO_Init+0x324>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_GPIO_Init+0x324>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a11      	ldr	r2, [pc, #68]	@ (8001838 <HAL_GPIO_Init+0x324>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae96 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e12b      	b.n	8001ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff f880 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	@ 0x24
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d4:	f000 fe8a 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a81      	ldr	r2, [pc, #516]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d807      	bhi.n	80018f4 <HAL_I2C_Init+0x84>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a80      	ldr	r2, [pc, #512]	@ (8001ae8 <HAL_I2C_Init+0x278>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e006      	b.n	8001902 <HAL_I2C_Init+0x92>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a7d      	ldr	r2, [pc, #500]	@ (8001aec <HAL_I2C_Init+0x27c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0e7      	b.n	8001ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a78      	ldr	r2, [pc, #480]	@ (8001af0 <HAL_I2C_Init+0x280>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d802      	bhi.n	8001944 <HAL_I2C_Init+0xd4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	e009      	b.n	8001958 <HAL_I2C_Init+0xe8>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4a69      	ldr	r2, [pc, #420]	@ (8001af4 <HAL_I2C_Init+0x284>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800196a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	495c      	ldr	r1, [pc, #368]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d819      	bhi.n	80019ac <HAL_I2C_Init+0x13c>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e59      	subs	r1, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fbb1 f3f3 	udiv	r3, r1, r3
 8001986:	1c59      	adds	r1, r3, #1
 8001988:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800198c:	400b      	ands	r3, r1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_I2C_Init+0x138>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e59      	subs	r1, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a6:	e051      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e04f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_I2C_Init+0x168>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	e012      	b.n	80019fe <HAL_I2C_Init+0x18e>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Init+0x196>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e022      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <HAL_I2C_Init+0x1bc>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e58      	subs	r0, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	6809      	ldr	r1, [r1, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6911      	ldr	r1, [r2, #16]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	000186a0 	.word	0x000186a0
 8001ae8:	001e847f 	.word	0x001e847f
 8001aec:	003d08ff 	.word	0x003d08ff
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	461a      	mov	r2, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	817b      	strh	r3, [r7, #10]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff fbec 	bl	80012e8 <HAL_GetTick>
 8001b10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	f040 80e0 	bne.w	8001ce0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2319      	movs	r3, #25
 8001b26:	2201      	movs	r2, #1
 8001b28:	4970      	ldr	r1, [pc, #448]	@ (8001cec <HAL_I2C_Master_Transmit+0x1f4>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fa92 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0d3      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_I2C_Master_Transmit+0x50>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e0cc      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d007      	beq.n	8001b6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2221      	movs	r2, #33	@ 0x21
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	893a      	ldrh	r2, [r7, #8]
 8001b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4a50      	ldr	r2, [pc, #320]	@ (8001cf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bb0:	8979      	ldrh	r1, [r7, #10]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f9ca 	bl	8001f50 <I2C_MasterRequestWrite>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e08d      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bdc:	e066      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fb50 	bl	8002288 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06b      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d11b      	bne.n	8001c80 <HAL_I2C_Master_Transmit+0x188>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d017      	beq.n	8001c80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	6a39      	ldr	r1, [r7, #32]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fb47 	bl	8002318 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e01a      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d194      	bne.n	8001bde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	00100002 	.word	0x00100002
 8001cf0:	ffff0000 	.word	0xffff0000

08001cf4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	460b      	mov	r3, r1
 8001d02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff faf0 	bl	80012e8 <HAL_GetTick>
 8001d08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	f040 8111 	bne.w	8001f3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2319      	movs	r3, #25
 8001d22:	2201      	movs	r2, #1
 8001d24:	4988      	ldr	r1, [pc, #544]	@ (8001f48 <HAL_I2C_IsDeviceReady+0x254>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f994 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e104      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2C_IsDeviceReady+0x50>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0fd      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d007      	beq.n	8001d6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2224      	movs	r2, #36	@ 0x24
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a70      	ldr	r2, [pc, #448]	@ (8001f4c <HAL_I2C_IsDeviceReady+0x258>)
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f952 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc4:	d103      	bne.n	8001dce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b6      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dd2:	897b      	ldrh	r3, [r7, #10]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001de0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa81 	bl	80012e8 <HAL_GetTick>
 8001de6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e16:	e025      	b.n	8001e64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e18:	f7ff fa66 	bl	80012e8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d302      	bcc.n	8001e2e <HAL_I2C_IsDeviceReady+0x13a>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	22a0      	movs	r2, #160	@ 0xa0
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e6e:	d005      	beq.n	8001e7c <HAL_I2C_IsDeviceReady+0x188>
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_I2C_IsDeviceReady+0x188>
 8001e76:	7dbb      	ldrb	r3, [r7, #22]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0cd      	beq.n	8001e18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d129      	bne.n	8001ee6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2319      	movs	r3, #25
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4921      	ldr	r1, [pc, #132]	@ (8001f48 <HAL_I2C_IsDeviceReady+0x254>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f8c6 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e036      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e02c      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001efe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	490f      	ldr	r1, [pc, #60]	@ (8001f48 <HAL_I2C_IsDeviceReady+0x254>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f8a2 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e012      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f4ff af32 	bcc.w	8001d8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	00100002 	.word	0x00100002
 8001f4c:	ffff0000 	.word	0xffff0000

08001f50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d006      	beq.n	8001f7a <I2C_MasterRequestWrite+0x2a>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d003      	beq.n	8001f7a <I2C_MasterRequestWrite+0x2a>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f78:	d108      	bne.n	8001f8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e00b      	b.n	8001fa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d107      	bne.n	8001fa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f84f 	bl	8002054 <I2C_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fca:	d103      	bne.n	8001fd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e035      	b.n	8002044 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fe0:	d108      	bne.n	8001ff4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	e01b      	b.n	800202c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ff4:	897b      	ldrh	r3, [r7, #10]
 8001ff6:	11db      	asrs	r3, r3, #7
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0306 	and.w	r3, r3, #6
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f063 030f 	orn	r3, r3, #15
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	490e      	ldr	r1, [pc, #56]	@ (800204c <I2C_MasterRequestWrite+0xfc>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f898 	bl	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e010      	b.n	8002044 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4907      	ldr	r1, [pc, #28]	@ (8002050 <I2C_MasterRequestWrite+0x100>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f888 	bl	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	00010008 	.word	0x00010008
 8002050:	00010002 	.word	0x00010002

08002054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002064:	e048      	b.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d044      	beq.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206e:	f7ff f93b 	bl	80012e8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d302      	bcc.n	8002084 <I2C_WaitOnFlagUntilTimeout+0x30>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d139      	bne.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10d      	bne.n	80020aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	e00c      	b.n	80020c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d116      	bne.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e023      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	0c1b      	lsrs	r3, r3, #16
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10d      	bne.n	800211e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	43da      	mvns	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	e00c      	b.n	8002138 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	43da      	mvns	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	429a      	cmp	r2, r3
 800213c:	d093      	beq.n	8002066 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002156:	e071      	b.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002166:	d123      	bne.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002176:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f043 0204 	orr.w	r2, r3, #4
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e067      	b.n	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d041      	beq.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b8:	f7ff f896 	bl	80012e8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d302      	bcc.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d136      	bne.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4013      	ands	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e00b      	b.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	43da      	mvns	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e021      	b.n	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10c      	bne.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e00b      	b.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f af6d 	bne.w	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002294:	e034      	b.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f886 	bl	80023a8 <I2C_IsAcknowledgeFailed>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e034      	b.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d028      	beq.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f81b 	bl	80012e8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ce:	2b80      	cmp	r3, #128	@ 0x80
 80022d0:	d016      	beq.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b80      	cmp	r3, #128	@ 0x80
 800230c:	d1c3      	bne.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002324:	e034      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f83e 	bl	80023a8 <I2C_IsAcknowledgeFailed>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e034      	b.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d028      	beq.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7fe ffd3 	bl	80012e8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11d      	bne.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d016      	beq.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e007      	b.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d1c3      	bne.n	8002326 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d11b      	bne.n	80023f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	f043 0204 	orr.w	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cc      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d90c      	bls.n	8002444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e067      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4934      	ldr	r1, [pc, #208]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fef6 	bl	80012e8 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe fef2 	bl	80012e8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20c      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f841 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fe56 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	080056b0 	.word	0x080056b0
 80025cc:	20000004 	.word	0x20000004
 80025d0:	20000010 	.word	0x20000010

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	@ (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	080056c0 	.word	0x080056c0

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002618:	b0ae      	sub	sp, #184	@ 0xb8
 800261a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263a:	4bcb      	ldr	r3, [pc, #812]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b0c      	cmp	r3, #12
 8002644:	f200 8206 	bhi.w	8002a54 <HAL_RCC_GetSysClockFreq+0x440>
 8002648:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <HAL_RCC_GetSysClockFreq+0x3c>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002685 	.word	0x08002685
 8002654:	08002a55 	.word	0x08002a55
 8002658:	08002a55 	.word	0x08002a55
 800265c:	08002a55 	.word	0x08002a55
 8002660:	0800268d 	.word	0x0800268d
 8002664:	08002a55 	.word	0x08002a55
 8002668:	08002a55 	.word	0x08002a55
 800266c:	08002a55 	.word	0x08002a55
 8002670:	08002695 	.word	0x08002695
 8002674:	08002a55 	.word	0x08002a55
 8002678:	08002a55 	.word	0x08002a55
 800267c:	08002a55 	.word	0x08002a55
 8002680:	08002885 	.word	0x08002885
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4bb9      	ldr	r3, [pc, #740]	@ (800296c <HAL_RCC_GetSysClockFreq+0x358>)
 8002686:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800268a:	e1e7      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4bb8      	ldr	r3, [pc, #736]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x35c>)
 800268e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002692:	e1e3      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002694:	4bb4      	ldr	r3, [pc, #720]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800269c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d071      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ac:	4bae      	ldr	r3, [pc, #696]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026d2:	4622      	mov	r2, r4
 80026d4:	462b      	mov	r3, r5
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f04f 0100 	mov.w	r1, #0
 80026de:	0159      	lsls	r1, r3, #5
 80026e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e4:	0150      	lsls	r0, r2, #5
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4621      	mov	r1, r4
 80026ec:	1a51      	subs	r1, r2, r1
 80026ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80026f0:	4629      	mov	r1, r5
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002704:	4649      	mov	r1, r9
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	4641      	mov	r1, r8
 800270a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800270e:	4641      	mov	r1, r8
 8002710:	018a      	lsls	r2, r1, #6
 8002712:	4641      	mov	r1, r8
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002718:	4649      	mov	r1, r9
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800272c:	4649      	mov	r1, r9
 800272e:	00cb      	lsls	r3, r1, #3
 8002730:	4641      	mov	r1, r8
 8002732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002736:	4641      	mov	r1, r8
 8002738:	00ca      	lsls	r2, r1, #3
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	4603      	mov	r3, r0
 8002740:	4622      	mov	r2, r4
 8002742:	189b      	adds	r3, r3, r2
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
 8002746:	462b      	mov	r3, r5
 8002748:	460a      	mov	r2, r1
 800274a:	eb42 0303 	adc.w	r3, r2, r3
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800275c:	4629      	mov	r1, r5
 800275e:	024b      	lsls	r3, r1, #9
 8002760:	4621      	mov	r1, r4
 8002762:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002766:	4621      	mov	r1, r4
 8002768:	024a      	lsls	r2, r1, #9
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800277c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002780:	f7fd fdfe 	bl	8000380 <__aeabi_uldivmod>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4613      	mov	r3, r2
 800278a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800278e:	e067      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4b75      	ldr	r3, [pc, #468]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800279c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80027a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027aa:	2300      	movs	r3, #0
 80027ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027b2:	4622      	mov	r2, r4
 80027b4:	462b      	mov	r3, r5
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4621      	mov	r1, r4
 80027cc:	1a51      	subs	r1, r2, r1
 80027ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027e4:	4649      	mov	r1, r9
 80027e6:	018b      	lsls	r3, r1, #6
 80027e8:	4641      	mov	r1, r8
 80027ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ee:	4641      	mov	r1, r8
 80027f0:	018a      	lsls	r2, r1, #6
 80027f2:	4641      	mov	r1, r8
 80027f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027f8:	4649      	mov	r1, r9
 80027fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800280a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800280e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002812:	4692      	mov	sl, r2
 8002814:	469b      	mov	fp, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb1a 0303 	adds.w	r3, sl, r3
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	462b      	mov	r3, r5
 8002820:	eb4b 0303 	adc.w	r3, fp, r3
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002832:	4629      	mov	r1, r5
 8002834:	028b      	lsls	r3, r1, #10
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800283c:	4621      	mov	r1, r4
 800283e:	028a      	lsls	r2, r1, #10
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002848:	2200      	movs	r2, #0
 800284a:	673b      	str	r3, [r7, #112]	@ 0x70
 800284c:	677a      	str	r2, [r7, #116]	@ 0x74
 800284e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002852:	f7fd fd95 	bl	8000380 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4613      	mov	r3, r2
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002860:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002882:	e0eb      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800288c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002890:	4b35      	ldr	r3, [pc, #212]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d06b      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4b32      	ldr	r3, [pc, #200]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	2200      	movs	r2, #0
 80028a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80028b0:	2300      	movs	r3, #0
 80028b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80028b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028b8:	4622      	mov	r2, r4
 80028ba:	462b      	mov	r3, r5
 80028bc:	f04f 0000 	mov.w	r0, #0
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	0159      	lsls	r1, r3, #5
 80028c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ca:	0150      	lsls	r0, r2, #5
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4621      	mov	r1, r4
 80028d2:	1a51      	subs	r1, r2, r1
 80028d4:	61b9      	str	r1, [r7, #24]
 80028d6:	4629      	mov	r1, r5
 80028d8:	eb63 0301 	sbc.w	r3, r3, r1
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028ea:	4659      	mov	r1, fp
 80028ec:	018b      	lsls	r3, r1, #6
 80028ee:	4651      	mov	r1, sl
 80028f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f4:	4651      	mov	r1, sl
 80028f6:	018a      	lsls	r2, r1, #6
 80028f8:	4651      	mov	r1, sl
 80028fa:	ebb2 0801 	subs.w	r8, r2, r1
 80028fe:	4659      	mov	r1, fp
 8002900:	eb63 0901 	sbc.w	r9, r3, r1
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002910:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002914:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	4623      	mov	r3, r4
 800291e:	eb18 0303 	adds.w	r3, r8, r3
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	462b      	mov	r3, r5
 8002926:	eb49 0303 	adc.w	r3, r9, r3
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	024b      	lsls	r3, r1, #9
 800293c:	4621      	mov	r1, r4
 800293e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002942:	4621      	mov	r1, r4
 8002944:	024a      	lsls	r2, r1, #9
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800294e:	2200      	movs	r2, #0
 8002950:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002952:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002954:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002958:	f7fd fd12 	bl	8000380 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002966:	e065      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x420>
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002974:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	2200      	movs	r2, #0
 800297c:	4618      	mov	r0, r3
 800297e:	4611      	mov	r1, r2
 8002980:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002984:	653b      	str	r3, [r7, #80]	@ 0x50
 8002986:	2300      	movs	r3, #0
 8002988:	657b      	str	r3, [r7, #84]	@ 0x54
 800298a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800298e:	4642      	mov	r2, r8
 8002990:	464b      	mov	r3, r9
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f04f 0100 	mov.w	r1, #0
 800299a:	0159      	lsls	r1, r3, #5
 800299c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a0:	0150      	lsls	r0, r2, #5
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4641      	mov	r1, r8
 80029a8:	1a51      	subs	r1, r2, r1
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	4649      	mov	r1, r9
 80029ae:	eb63 0301 	sbc.w	r3, r3, r1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029c0:	4659      	mov	r1, fp
 80029c2:	018b      	lsls	r3, r1, #6
 80029c4:	4651      	mov	r1, sl
 80029c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ca:	4651      	mov	r1, sl
 80029cc:	018a      	lsls	r2, r1, #6
 80029ce:	4651      	mov	r1, sl
 80029d0:	1a54      	subs	r4, r2, r1
 80029d2:	4659      	mov	r1, fp
 80029d4:	eb63 0501 	sbc.w	r5, r3, r1
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	00eb      	lsls	r3, r5, #3
 80029e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e6:	00e2      	lsls	r2, r4, #3
 80029e8:	4614      	mov	r4, r2
 80029ea:	461d      	mov	r5, r3
 80029ec:	4643      	mov	r3, r8
 80029ee:	18e3      	adds	r3, r4, r3
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	464b      	mov	r3, r9
 80029f4:	eb45 0303 	adc.w	r3, r5, r3
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a06:	4629      	mov	r1, r5
 8002a08:	028b      	lsls	r3, r1, #10
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a10:	4621      	mov	r1, r4
 8002a12:	028a      	lsls	r2, r1, #10
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a26:	f7fd fcab 	bl	8000380 <__aeabi_uldivmod>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0f1b      	lsrs	r3, r3, #28
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a52:	e003      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	37b8      	adds	r7, #184	@ 0xb8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400

08002a74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e28d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8083 	beq.w	8002b9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a94:	4b94      	ldr	r3, [pc, #592]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d019      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aa0:	4b91      	ldr	r3, [pc, #580]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b88      	ldr	r3, [pc, #544]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b84      	ldr	r3, [pc, #528]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x124>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e25a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x90>
 8002af6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7b      	ldr	r2, [pc, #492]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xcc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xb4>
 8002b0e:	4b76      	ldr	r3, [pc, #472]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a75      	ldr	r2, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b73      	ldr	r3, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a72      	ldr	r2, [pc, #456]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xcc>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fbce 	bl	80012e8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fbca 	bl	80012e8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e21f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xdc>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fbba 	bl	80012e8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fbb6 	bl	80012e8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e20b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b57      	ldr	r3, [pc, #348]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x104>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06f      	beq.n	8002c86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ba6:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x186>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1d3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4937      	ldr	r1, [pc, #220]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <HAL_RCC_OscConfig+0x278>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fb63 	bl	80012e8 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fb5f 	bl	80012e8 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1b4      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4925      	ldr	r1, [pc, #148]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <HAL_RCC_OscConfig+0x278>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fb42 	bl	80012e8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fb3e 	bl	80012e8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e193      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d036      	beq.n	8002d00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fb22 	bl	80012e8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fb1e 	bl	80012e8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e173      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x234>
 8002cc6:	e01b      	b.n	8002d00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc8:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fb0b 	bl	80012e8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	e00e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fb07 	bl	80012e8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d907      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e15c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	42470000 	.word	0x42470000
 8002cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b8a      	ldr	r3, [pc, #552]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ea      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8097 	beq.w	8002e3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b83      	ldr	r3, [pc, #524]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a7e      	ldr	r2, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b79      	ldr	r3, [pc, #484]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fac7 	bl	80012e8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe fac3 	bl	80012e8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e118      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <HAL_RCC_OscConfig+0x4b0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x31e>
 8002d84:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	e01c      	b.n	8002dcc <HAL_RCC_OscConfig+0x358>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x340>
 8002d9a:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a60      	ldr	r2, [pc, #384]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a5d      	ldr	r2, [pc, #372]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0x358>
 8002db4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a59      	ldr	r2, [pc, #356]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f023 0304 	bic.w	r3, r3, #4
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fa88 	bl	80012e8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fa84 	bl	80012e8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0d7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCC_OscConfig+0x368>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fa72 	bl	80012e8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fa6e 	bl	80012e8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0c1      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	4b40      	ldr	r3, [pc, #256]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	4a3a      	ldr	r2, [pc, #232]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80ad 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e46:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d060      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d145      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fa42 	bl	80012e8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe fa3e 	bl	80012e8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e093      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fa13 	bl	80012e8 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fa0f 	bl	80012e8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e064      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x452>
 8002ee4:	e05c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_OscConfig+0x4b4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe f9fc 	bl	80012e8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f9f8 	bl	80012e8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x480>
 8002f12:	e045      	b.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e040      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <HAL_RCC_OscConfig+0x538>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d030      	beq.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d129      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d122      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d119      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <std>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	6183      	str	r3, [r0, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2208      	movs	r2, #8
 8002fcc:	305c      	adds	r0, #92	@ 0x5c
 8002fce:	f000 f916 	bl	80031fe <memset>
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <std+0x58>)
 8002fd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <std+0x5c>)
 8002fd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <std+0x60>)
 8002fdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <std+0x64>)
 8002fe0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <std+0x68>)
 8002fe4:	6224      	str	r4, [r4, #32]
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d006      	beq.n	8002ff8 <std+0x48>
 8002fea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fee:	4294      	cmp	r4, r2
 8002ff0:	d002      	beq.n	8002ff8 <std+0x48>
 8002ff2:	33d0      	adds	r3, #208	@ 0xd0
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d105      	bne.n	8003004 <std+0x54>
 8002ff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f000 bd8e 	b.w	8003b20 <__retarget_lock_init_recursive>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	bf00      	nop
 8003008:	08003175 	.word	0x08003175
 800300c:	0800319b 	.word	0x0800319b
 8003010:	080031d3 	.word	0x080031d3
 8003014:	080031f7 	.word	0x080031f7
 8003018:	2000055c 	.word	0x2000055c

0800301c <stdio_exit_handler>:
 800301c:	4a02      	ldr	r2, [pc, #8]	@ (8003028 <stdio_exit_handler+0xc>)
 800301e:	4903      	ldr	r1, [pc, #12]	@ (800302c <stdio_exit_handler+0x10>)
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <stdio_exit_handler+0x14>)
 8003022:	f000 b869 	b.w	80030f8 <_fwalk_sglue>
 8003026:	bf00      	nop
 8003028:	20000018 	.word	0x20000018
 800302c:	080045d9 	.word	0x080045d9
 8003030:	20000030 	.word	0x20000030

08003034 <cleanup_stdio>:
 8003034:	6841      	ldr	r1, [r0, #4]
 8003036:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <cleanup_stdio+0x34>)
 8003038:	4299      	cmp	r1, r3
 800303a:	b510      	push	{r4, lr}
 800303c:	4604      	mov	r4, r0
 800303e:	d001      	beq.n	8003044 <cleanup_stdio+0x10>
 8003040:	f001 faca 	bl	80045d8 <_fflush_r>
 8003044:	68a1      	ldr	r1, [r4, #8]
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <cleanup_stdio+0x38>)
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <cleanup_stdio+0x1e>
 800304c:	4620      	mov	r0, r4
 800304e:	f001 fac3 	bl	80045d8 <_fflush_r>
 8003052:	68e1      	ldr	r1, [r4, #12]
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <cleanup_stdio+0x3c>)
 8003056:	4299      	cmp	r1, r3
 8003058:	d004      	beq.n	8003064 <cleanup_stdio+0x30>
 800305a:	4620      	mov	r0, r4
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003060:	f001 baba 	b.w	80045d8 <_fflush_r>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	bf00      	nop
 8003068:	2000055c 	.word	0x2000055c
 800306c:	200005c4 	.word	0x200005c4
 8003070:	2000062c 	.word	0x2000062c

08003074 <global_stdio_init.part.0>:
 8003074:	b510      	push	{r4, lr}
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <global_stdio_init.part.0+0x30>)
 8003078:	4c0b      	ldr	r4, [pc, #44]	@ (80030a8 <global_stdio_init.part.0+0x34>)
 800307a:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <global_stdio_init.part.0+0x38>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4620      	mov	r0, r4
 8003080:	2200      	movs	r2, #0
 8003082:	2104      	movs	r1, #4
 8003084:	f7ff ff94 	bl	8002fb0 <std>
 8003088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800308c:	2201      	movs	r2, #1
 800308e:	2109      	movs	r1, #9
 8003090:	f7ff ff8e 	bl	8002fb0 <std>
 8003094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003098:	2202      	movs	r2, #2
 800309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309e:	2112      	movs	r1, #18
 80030a0:	f7ff bf86 	b.w	8002fb0 <std>
 80030a4:	20000694 	.word	0x20000694
 80030a8:	2000055c 	.word	0x2000055c
 80030ac:	0800301d 	.word	0x0800301d

080030b0 <__sfp_lock_acquire>:
 80030b0:	4801      	ldr	r0, [pc, #4]	@ (80030b8 <__sfp_lock_acquire+0x8>)
 80030b2:	f000 bd37 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 80030b6:	bf00      	nop
 80030b8:	200006c3 	.word	0x200006c3

080030bc <__sfp_lock_release>:
 80030bc:	4801      	ldr	r0, [pc, #4]	@ (80030c4 <__sfp_lock_release+0x8>)
 80030be:	f000 bd33 	b.w	8003b28 <__retarget_lock_release_recursive>
 80030c2:	bf00      	nop
 80030c4:	200006c3 	.word	0x200006c3

080030c8 <__sinit>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4604      	mov	r4, r0
 80030cc:	f7ff fff0 	bl	80030b0 <__sfp_lock_acquire>
 80030d0:	6a23      	ldr	r3, [r4, #32]
 80030d2:	b11b      	cbz	r3, 80030dc <__sinit+0x14>
 80030d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d8:	f7ff bff0 	b.w	80030bc <__sfp_lock_release>
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <__sinit+0x28>)
 80030de:	6223      	str	r3, [r4, #32]
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__sinit+0x2c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f5      	bne.n	80030d4 <__sinit+0xc>
 80030e8:	f7ff ffc4 	bl	8003074 <global_stdio_init.part.0>
 80030ec:	e7f2      	b.n	80030d4 <__sinit+0xc>
 80030ee:	bf00      	nop
 80030f0:	08003035 	.word	0x08003035
 80030f4:	20000694 	.word	0x20000694

080030f8 <_fwalk_sglue>:
 80030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030fc:	4607      	mov	r7, r0
 80030fe:	4688      	mov	r8, r1
 8003100:	4614      	mov	r4, r2
 8003102:	2600      	movs	r6, #0
 8003104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003108:	f1b9 0901 	subs.w	r9, r9, #1
 800310c:	d505      	bpl.n	800311a <_fwalk_sglue+0x22>
 800310e:	6824      	ldr	r4, [r4, #0]
 8003110:	2c00      	cmp	r4, #0
 8003112:	d1f7      	bne.n	8003104 <_fwalk_sglue+0xc>
 8003114:	4630      	mov	r0, r6
 8003116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800311a:	89ab      	ldrh	r3, [r5, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d907      	bls.n	8003130 <_fwalk_sglue+0x38>
 8003120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003124:	3301      	adds	r3, #1
 8003126:	d003      	beq.n	8003130 <_fwalk_sglue+0x38>
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	47c0      	blx	r8
 800312e:	4306      	orrs	r6, r0
 8003130:	3568      	adds	r5, #104	@ 0x68
 8003132:	e7e9      	b.n	8003108 <_fwalk_sglue+0x10>

08003134 <siprintf>:
 8003134:	b40e      	push	{r1, r2, r3}
 8003136:	b500      	push	{lr}
 8003138:	b09c      	sub	sp, #112	@ 0x70
 800313a:	ab1d      	add	r3, sp, #116	@ 0x74
 800313c:	9002      	str	r0, [sp, #8]
 800313e:	9006      	str	r0, [sp, #24]
 8003140:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003144:	4809      	ldr	r0, [pc, #36]	@ (800316c <siprintf+0x38>)
 8003146:	9107      	str	r1, [sp, #28]
 8003148:	9104      	str	r1, [sp, #16]
 800314a:	4909      	ldr	r1, [pc, #36]	@ (8003170 <siprintf+0x3c>)
 800314c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	a902      	add	r1, sp, #8
 8003158:	f000 ff30 	bl	8003fbc <_svfiprintf_r>
 800315c:	9b02      	ldr	r3, [sp, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	b01c      	add	sp, #112	@ 0x70
 8003164:	f85d eb04 	ldr.w	lr, [sp], #4
 8003168:	b003      	add	sp, #12
 800316a:	4770      	bx	lr
 800316c:	2000002c 	.word	0x2000002c
 8003170:	ffff0208 	.word	0xffff0208

08003174 <__sread>:
 8003174:	b510      	push	{r4, lr}
 8003176:	460c      	mov	r4, r1
 8003178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800317c:	f000 fc82 	bl	8003a84 <_read_r>
 8003180:	2800      	cmp	r0, #0
 8003182:	bfab      	itete	ge
 8003184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003186:	89a3      	ldrhlt	r3, [r4, #12]
 8003188:	181b      	addge	r3, r3, r0
 800318a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800318e:	bfac      	ite	ge
 8003190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003192:	81a3      	strhlt	r3, [r4, #12]
 8003194:	bd10      	pop	{r4, pc}

08003196 <__seofread>:
 8003196:	2000      	movs	r0, #0
 8003198:	4770      	bx	lr

0800319a <__swrite>:
 800319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319e:	461f      	mov	r7, r3
 80031a0:	898b      	ldrh	r3, [r1, #12]
 80031a2:	05db      	lsls	r3, r3, #23
 80031a4:	4605      	mov	r5, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4616      	mov	r6, r2
 80031aa:	d505      	bpl.n	80031b8 <__swrite+0x1e>
 80031ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b0:	2302      	movs	r3, #2
 80031b2:	2200      	movs	r2, #0
 80031b4:	f000 fc54 	bl	8003a60 <_lseek_r>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	4632      	mov	r2, r6
 80031c6:	463b      	mov	r3, r7
 80031c8:	4628      	mov	r0, r5
 80031ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ce:	f000 bc6b 	b.w	8003aa8 <_write_r>

080031d2 <__sseek>:
 80031d2:	b510      	push	{r4, lr}
 80031d4:	460c      	mov	r4, r1
 80031d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031da:	f000 fc41 	bl	8003a60 <_lseek_r>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	bf15      	itete	ne
 80031e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031ee:	81a3      	strheq	r3, [r4, #12]
 80031f0:	bf18      	it	ne
 80031f2:	81a3      	strhne	r3, [r4, #12]
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <__sclose>:
 80031f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fa:	f000 bc0f 	b.w	8003a1c <_close_r>

080031fe <memset>:
 80031fe:	4402      	add	r2, r0
 8003200:	4603      	mov	r3, r0
 8003202:	4293      	cmp	r3, r2
 8003204:	d100      	bne.n	8003208 <memset+0xa>
 8003206:	4770      	bx	lr
 8003208:	f803 1b01 	strb.w	r1, [r3], #1
 800320c:	e7f9      	b.n	8003202 <memset+0x4>
	...

08003210 <localtime>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <localtime+0x30>)
 8003214:	681d      	ldr	r5, [r3, #0]
 8003216:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003218:	4604      	mov	r4, r0
 800321a:	b953      	cbnz	r3, 8003232 <localtime+0x22>
 800321c:	2024      	movs	r0, #36	@ 0x24
 800321e:	f000 fd39 	bl	8003c94 <malloc>
 8003222:	4602      	mov	r2, r0
 8003224:	6368      	str	r0, [r5, #52]	@ 0x34
 8003226:	b920      	cbnz	r0, 8003232 <localtime+0x22>
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <localtime+0x34>)
 800322a:	4807      	ldr	r0, [pc, #28]	@ (8003248 <localtime+0x38>)
 800322c:	2132      	movs	r1, #50	@ 0x32
 800322e:	f000 fc85 	bl	8003b3c <__assert_func>
 8003232:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8003234:	4620      	mov	r0, r4
 8003236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800323a:	f000 b807 	b.w	800324c <localtime_r>
 800323e:	bf00      	nop
 8003240:	2000002c 	.word	0x2000002c
 8003244:	08005e34 	.word	0x08005e34
 8003248:	08005e4b 	.word	0x08005e4b

0800324c <localtime_r>:
 800324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003250:	460c      	mov	r4, r1
 8003252:	4680      	mov	r8, r0
 8003254:	f001 fa50 	bl	80046f8 <__gettzinfo>
 8003258:	4621      	mov	r1, r4
 800325a:	4605      	mov	r5, r0
 800325c:	4640      	mov	r0, r8
 800325e:	f001 fa4f 	bl	8004700 <gmtime_r>
 8003262:	6943      	ldr	r3, [r0, #20]
 8003264:	0799      	lsls	r1, r3, #30
 8003266:	4604      	mov	r4, r0
 8003268:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 800326c:	d106      	bne.n	800327c <localtime_r+0x30>
 800326e:	2264      	movs	r2, #100	@ 0x64
 8003270:	fb97 f3f2 	sdiv	r3, r7, r2
 8003274:	fb02 7313 	mls	r3, r2, r3, r7
 8003278:	2b00      	cmp	r3, #0
 800327a:	d170      	bne.n	800335e <localtime_r+0x112>
 800327c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003280:	fb97 f3f2 	sdiv	r3, r7, r2
 8003284:	fb02 7313 	mls	r3, r2, r3, r7
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	4e64      	ldr	r6, [pc, #400]	@ (8003420 <localtime_r+0x1d4>)
 8003290:	2230      	movs	r2, #48	@ 0x30
 8003292:	fb02 6603 	mla	r6, r2, r3, r6
 8003296:	f000 f98d 	bl	80035b4 <__tz_lock>
 800329a:	f000 f997 	bl	80035cc <_tzset_unlocked>
 800329e:	4b61      	ldr	r3, [pc, #388]	@ (8003424 <localtime_r+0x1d8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d06a      	beq.n	800337c <localtime_r+0x130>
 80032a6:	686b      	ldr	r3, [r5, #4]
 80032a8:	42bb      	cmp	r3, r7
 80032aa:	d15a      	bne.n	8003362 <localtime_r+0x116>
 80032ac:	682f      	ldr	r7, [r5, #0]
 80032ae:	e9d8 2300 	ldrd	r2, r3, [r8]
 80032b2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80032b6:	2f00      	cmp	r7, #0
 80032b8:	d15b      	bne.n	8003372 <localtime_r+0x126>
 80032ba:	4282      	cmp	r2, r0
 80032bc:	eb73 0101 	sbcs.w	r1, r3, r1
 80032c0:	db5e      	blt.n	8003380 <localtime_r+0x134>
 80032c2:	2301      	movs	r3, #1
 80032c4:	6223      	str	r3, [r4, #32]
 80032c6:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80032c8:	6861      	ldr	r1, [r4, #4]
 80032ca:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80032ce:	fb93 f0f2 	sdiv	r0, r3, r2
 80032d2:	fb02 3310 	mls	r3, r2, r0, r3
 80032d6:	223c      	movs	r2, #60	@ 0x3c
 80032d8:	fb93 f5f2 	sdiv	r5, r3, r2
 80032dc:	fb02 3215 	mls	r2, r2, r5, r3
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	68a2      	ldr	r2, [r4, #8]
 80032e6:	6023      	str	r3, [r4, #0]
 80032e8:	1b49      	subs	r1, r1, r5
 80032ea:	1a12      	subs	r2, r2, r0
 80032ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80032ee:	6061      	str	r1, [r4, #4]
 80032f0:	60a2      	str	r2, [r4, #8]
 80032f2:	dd51      	ble.n	8003398 <localtime_r+0x14c>
 80032f4:	3101      	adds	r1, #1
 80032f6:	6061      	str	r1, [r4, #4]
 80032f8:	3b3c      	subs	r3, #60	@ 0x3c
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	6863      	ldr	r3, [r4, #4]
 80032fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8003300:	dd50      	ble.n	80033a4 <localtime_r+0x158>
 8003302:	3201      	adds	r2, #1
 8003304:	60a2      	str	r2, [r4, #8]
 8003306:	3b3c      	subs	r3, #60	@ 0x3c
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	2b17      	cmp	r3, #23
 800330e:	dd4f      	ble.n	80033b0 <localtime_r+0x164>
 8003310:	69e2      	ldr	r2, [r4, #28]
 8003312:	3201      	adds	r2, #1
 8003314:	61e2      	str	r2, [r4, #28]
 8003316:	69a2      	ldr	r2, [r4, #24]
 8003318:	3201      	adds	r2, #1
 800331a:	2a07      	cmp	r2, #7
 800331c:	bfa8      	it	ge
 800331e:	2200      	movge	r2, #0
 8003320:	61a2      	str	r2, [r4, #24]
 8003322:	68e2      	ldr	r2, [r4, #12]
 8003324:	3b18      	subs	r3, #24
 8003326:	3201      	adds	r2, #1
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	6923      	ldr	r3, [r4, #16]
 800332c:	60e2      	str	r2, [r4, #12]
 800332e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003332:	428a      	cmp	r2, r1
 8003334:	dd0e      	ble.n	8003354 <localtime_r+0x108>
 8003336:	2b0b      	cmp	r3, #11
 8003338:	eba2 0201 	sub.w	r2, r2, r1
 800333c:	60e2      	str	r2, [r4, #12]
 800333e:	f103 0201 	add.w	r2, r3, #1
 8003342:	bf09      	itett	eq
 8003344:	6963      	ldreq	r3, [r4, #20]
 8003346:	6122      	strne	r2, [r4, #16]
 8003348:	2200      	moveq	r2, #0
 800334a:	3301      	addeq	r3, #1
 800334c:	bf02      	ittt	eq
 800334e:	6122      	streq	r2, [r4, #16]
 8003350:	6163      	streq	r3, [r4, #20]
 8003352:	61e2      	streq	r2, [r4, #28]
 8003354:	f000 f934 	bl	80035c0 <__tz_unlock>
 8003358:	4620      	mov	r0, r4
 800335a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800335e:	2301      	movs	r3, #1
 8003360:	e795      	b.n	800328e <localtime_r+0x42>
 8003362:	4638      	mov	r0, r7
 8003364:	f000 f87c 	bl	8003460 <__tzcalc_limits>
 8003368:	2800      	cmp	r0, #0
 800336a:	d19f      	bne.n	80032ac <localtime_r+0x60>
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	e004      	b.n	800337c <localtime_r+0x130>
 8003372:	4282      	cmp	r2, r0
 8003374:	eb73 0101 	sbcs.w	r1, r3, r1
 8003378:	da02      	bge.n	8003380 <localtime_r+0x134>
 800337a:	2300      	movs	r3, #0
 800337c:	6223      	str	r3, [r4, #32]
 800337e:	e009      	b.n	8003394 <localtime_r+0x148>
 8003380:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8003384:	4282      	cmp	r2, r0
 8003386:	418b      	sbcs	r3, r1
 8003388:	bfb4      	ite	lt
 800338a:	2301      	movlt	r3, #1
 800338c:	2300      	movge	r3, #0
 800338e:	6223      	str	r3, [r4, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d198      	bne.n	80032c6 <localtime_r+0x7a>
 8003394:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003396:	e797      	b.n	80032c8 <localtime_r+0x7c>
 8003398:	2b00      	cmp	r3, #0
 800339a:	daaf      	bge.n	80032fc <localtime_r+0xb0>
 800339c:	3901      	subs	r1, #1
 800339e:	6061      	str	r1, [r4, #4]
 80033a0:	333c      	adds	r3, #60	@ 0x3c
 80033a2:	e7aa      	b.n	80032fa <localtime_r+0xae>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dab0      	bge.n	800330a <localtime_r+0xbe>
 80033a8:	3a01      	subs	r2, #1
 80033aa:	60a2      	str	r2, [r4, #8]
 80033ac:	333c      	adds	r3, #60	@ 0x3c
 80033ae:	e7ab      	b.n	8003308 <localtime_r+0xbc>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dacf      	bge.n	8003354 <localtime_r+0x108>
 80033b4:	69e2      	ldr	r2, [r4, #28]
 80033b6:	3a01      	subs	r2, #1
 80033b8:	61e2      	str	r2, [r4, #28]
 80033ba:	69a2      	ldr	r2, [r4, #24]
 80033bc:	3a01      	subs	r2, #1
 80033be:	bf48      	it	mi
 80033c0:	2206      	movmi	r2, #6
 80033c2:	61a2      	str	r2, [r4, #24]
 80033c4:	68e2      	ldr	r2, [r4, #12]
 80033c6:	3318      	adds	r3, #24
 80033c8:	3a01      	subs	r2, #1
 80033ca:	60e2      	str	r2, [r4, #12]
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	d1c0      	bne.n	8003354 <localtime_r+0x108>
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	d405      	bmi.n	80033e4 <localtime_r+0x198>
 80033d8:	6123      	str	r3, [r4, #16]
 80033da:	6923      	ldr	r3, [r4, #16]
 80033dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80033e0:	60e3      	str	r3, [r4, #12]
 80033e2:	e7b7      	b.n	8003354 <localtime_r+0x108>
 80033e4:	230b      	movs	r3, #11
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	6162      	str	r2, [r4, #20]
 80033ee:	0792      	lsls	r2, r2, #30
 80033f0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80033f4:	d105      	bne.n	8003402 <localtime_r+0x1b6>
 80033f6:	2164      	movs	r1, #100	@ 0x64
 80033f8:	fb93 f2f1 	sdiv	r2, r3, r1
 80033fc:	fb01 3212 	mls	r2, r1, r2, r3
 8003400:	b962      	cbnz	r2, 800341c <localtime_r+0x1d0>
 8003402:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003406:	fb93 f1f2 	sdiv	r1, r3, r2
 800340a:	fb02 3311 	mls	r3, r2, r1, r3
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003418:	61e3      	str	r3, [r4, #28]
 800341a:	e7de      	b.n	80033da <localtime_r+0x18e>
 800341c:	2301      	movs	r3, #1
 800341e:	e7f9      	b.n	8003414 <localtime_r+0x1c8>
 8003420:	08005ea4 	.word	0x08005ea4
 8003424:	200006b8 	.word	0x200006b8

08003428 <time>:
 8003428:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <time+0x34>)
 800342c:	f04f 36ff 	mov.w	r6, #4294967295
 8003430:	f04f 37ff 	mov.w	r7, #4294967295
 8003434:	4669      	mov	r1, sp
 8003436:	4604      	mov	r4, r0
 8003438:	2200      	movs	r2, #0
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	e9cd 6700 	strd	r6, r7, [sp]
 8003440:	f000 fafc 	bl	8003a3c <_gettimeofday_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	bfb8      	it	lt
 8003448:	e9cd 6700 	strdlt	r6, r7, [sp]
 800344c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003450:	b10c      	cbz	r4, 8003456 <time+0x2e>
 8003452:	e9c4 0100 	strd	r0, r1, [r4]
 8003456:	b004      	add	sp, #16
 8003458:	bdd0      	pop	{r4, r6, r7, pc}
 800345a:	bf00      	nop
 800345c:	2000002c 	.word	0x2000002c

08003460 <__tzcalc_limits>:
 8003460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	4604      	mov	r4, r0
 8003466:	f001 f947 	bl	80046f8 <__gettzinfo>
 800346a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800346e:	429c      	cmp	r4, r3
 8003470:	f340 8099 	ble.w	80035a6 <__tzcalc_limits+0x146>
 8003474:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8003478:	19e5      	adds	r5, r4, r7
 800347a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800347e:	f240 126d 	movw	r2, #365	@ 0x16d
 8003482:	10ad      	asrs	r5, r5, #2
 8003484:	fb02 5503 	mla	r5, r2, r3, r5
 8003488:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800348c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8003490:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8003494:	4f45      	ldr	r7, [pc, #276]	@ (80035ac <__tzcalc_limits+0x14c>)
 8003496:	fb93 f3f2 	sdiv	r3, r3, r2
 800349a:	441d      	add	r5, r3
 800349c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80034a0:	eb04 030c 	add.w	r3, r4, ip
 80034a4:	6044      	str	r4, [r0, #4]
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034aa:	4601      	mov	r1, r0
 80034ac:	441d      	add	r5, r3
 80034ae:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 80034b2:	7a0b      	ldrb	r3, [r1, #8]
 80034b4:	694a      	ldr	r2, [r1, #20]
 80034b6:	2b4a      	cmp	r3, #74	@ 0x4a
 80034b8:	d133      	bne.n	8003522 <__tzcalc_limits+0xc2>
 80034ba:	07a6      	lsls	r6, r4, #30
 80034bc:	eb05 0302 	add.w	r3, r5, r2
 80034c0:	d106      	bne.n	80034d0 <__tzcalc_limits+0x70>
 80034c2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80034c6:	fb94 f6fe 	sdiv	r6, r4, lr
 80034ca:	fb0e 4616 	mls	r6, lr, r6, r4
 80034ce:	b936      	cbnz	r6, 80034de <__tzcalc_limits+0x7e>
 80034d0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80034d4:	fb94 f6fe 	sdiv	r6, r4, lr
 80034d8:	fb0e 4616 	mls	r6, lr, r6, r4
 80034dc:	b9fe      	cbnz	r6, 800351e <__tzcalc_limits+0xbe>
 80034de:	2a3b      	cmp	r2, #59	@ 0x3b
 80034e0:	bfd4      	ite	le
 80034e2:	2200      	movle	r2, #0
 80034e4:	2201      	movgt	r2, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	3b01      	subs	r3, #1
 80034ea:	698a      	ldr	r2, [r1, #24]
 80034ec:	17d6      	asrs	r6, r2, #31
 80034ee:	fbc3 2607 	smlal	r2, r6, r3, r7
 80034f2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80034f4:	18d2      	adds	r2, r2, r3
 80034f6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 80034fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80034fe:	3128      	adds	r1, #40	@ 0x28
 8003500:	458c      	cmp	ip, r1
 8003502:	d1d6      	bne.n	80034b2 <__tzcalc_limits+0x52>
 8003504:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8003508:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800350c:	428c      	cmp	r4, r1
 800350e:	4193      	sbcs	r3, r2
 8003510:	bfb4      	ite	lt
 8003512:	2301      	movlt	r3, #1
 8003514:	2300      	movge	r3, #0
 8003516:	6003      	str	r3, [r0, #0]
 8003518:	2001      	movs	r0, #1
 800351a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351e:	2200      	movs	r2, #0
 8003520:	e7e1      	b.n	80034e6 <__tzcalc_limits+0x86>
 8003522:	2b44      	cmp	r3, #68	@ 0x44
 8003524:	d101      	bne.n	800352a <__tzcalc_limits+0xca>
 8003526:	18ab      	adds	r3, r5, r2
 8003528:	e7df      	b.n	80034ea <__tzcalc_limits+0x8a>
 800352a:	07a3      	lsls	r3, r4, #30
 800352c:	d105      	bne.n	800353a <__tzcalc_limits+0xda>
 800352e:	2664      	movs	r6, #100	@ 0x64
 8003530:	fb94 f3f6 	sdiv	r3, r4, r6
 8003534:	fb06 4313 	mls	r3, r6, r3, r4
 8003538:	bb7b      	cbnz	r3, 800359a <__tzcalc_limits+0x13a>
 800353a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800353e:	fb94 f6f3 	sdiv	r6, r4, r3
 8003542:	fb03 4616 	mls	r6, r3, r6, r4
 8003546:	fab6 f686 	clz	r6, r6
 800354a:	0976      	lsrs	r6, r6, #5
 800354c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 80035b0 <__tzcalc_limits+0x150>
 8003550:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8003554:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8003558:	462b      	mov	r3, r5
 800355a:	f04f 0800 	mov.w	r8, #0
 800355e:	fb0a e606 	mla	r6, sl, r6, lr
 8003562:	f108 0801 	add.w	r8, r8, #1
 8003566:	45c1      	cmp	r9, r8
 8003568:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800356c:	dc17      	bgt.n	800359e <__tzcalc_limits+0x13e>
 800356e:	f103 0804 	add.w	r8, r3, #4
 8003572:	2607      	movs	r6, #7
 8003574:	fb98 f6f6 	sdiv	r6, r8, r6
 8003578:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800357c:	eba8 0606 	sub.w	r6, r8, r6
 8003580:	1b92      	subs	r2, r2, r6
 8003582:	690e      	ldr	r6, [r1, #16]
 8003584:	f106 36ff 	add.w	r6, r6, #4294967295
 8003588:	bf48      	it	mi
 800358a:	3207      	addmi	r2, #7
 800358c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8003590:	4432      	add	r2, r6
 8003592:	4572      	cmp	r2, lr
 8003594:	da05      	bge.n	80035a2 <__tzcalc_limits+0x142>
 8003596:	4413      	add	r3, r2
 8003598:	e7a7      	b.n	80034ea <__tzcalc_limits+0x8a>
 800359a:	2601      	movs	r6, #1
 800359c:	e7d6      	b.n	800354c <__tzcalc_limits+0xec>
 800359e:	4473      	add	r3, lr
 80035a0:	e7df      	b.n	8003562 <__tzcalc_limits+0x102>
 80035a2:	3a07      	subs	r2, #7
 80035a4:	e7f5      	b.n	8003592 <__tzcalc_limits+0x132>
 80035a6:	2000      	movs	r0, #0
 80035a8:	e7b7      	b.n	800351a <__tzcalc_limits+0xba>
 80035aa:	bf00      	nop
 80035ac:	00015180 	.word	0x00015180
 80035b0:	08005ea0 	.word	0x08005ea0

080035b4 <__tz_lock>:
 80035b4:	4801      	ldr	r0, [pc, #4]	@ (80035bc <__tz_lock+0x8>)
 80035b6:	f000 bab4 	b.w	8003b22 <__retarget_lock_acquire>
 80035ba:	bf00      	nop
 80035bc:	200006c0 	.word	0x200006c0

080035c0 <__tz_unlock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__tz_unlock+0x8>)
 80035c2:	f000 bab0 	b.w	8003b26 <__retarget_lock_release>
 80035c6:	bf00      	nop
 80035c8:	200006c0 	.word	0x200006c0

080035cc <_tzset_unlocked>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	@ (80035d4 <_tzset_unlocked+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	f000 b802 	b.w	80035d8 <_tzset_unlocked_r>
 80035d4:	2000002c 	.word	0x2000002c

080035d8 <_tzset_unlocked_r>:
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035dc:	b08d      	sub	sp, #52	@ 0x34
 80035de:	4607      	mov	r7, r0
 80035e0:	f001 f88a 	bl	80046f8 <__gettzinfo>
 80035e4:	49bc      	ldr	r1, [pc, #752]	@ (80038d8 <_tzset_unlocked_r+0x300>)
 80035e6:	4dbd      	ldr	r5, [pc, #756]	@ (80038dc <_tzset_unlocked_r+0x304>)
 80035e8:	4604      	mov	r4, r0
 80035ea:	4638      	mov	r0, r7
 80035ec:	f000 fb4a 	bl	8003c84 <_getenv_r>
 80035f0:	4606      	mov	r6, r0
 80035f2:	bb10      	cbnz	r0, 800363a <_tzset_unlocked_r+0x62>
 80035f4:	4bba      	ldr	r3, [pc, #744]	@ (80038e0 <_tzset_unlocked_r+0x308>)
 80035f6:	4abb      	ldr	r2, [pc, #748]	@ (80038e4 <_tzset_unlocked_r+0x30c>)
 80035f8:	6018      	str	r0, [r3, #0]
 80035fa:	4bbb      	ldr	r3, [pc, #748]	@ (80038e8 <_tzset_unlocked_r+0x310>)
 80035fc:	62a0      	str	r0, [r4, #40]	@ 0x28
 80035fe:	6018      	str	r0, [r3, #0]
 8003600:	4bba      	ldr	r3, [pc, #744]	@ (80038ec <_tzset_unlocked_r+0x314>)
 8003602:	6520      	str	r0, [r4, #80]	@ 0x50
 8003604:	e9c3 2200 	strd	r2, r2, [r3]
 8003608:	214a      	movs	r1, #74	@ 0x4a
 800360a:	2200      	movs	r2, #0
 800360c:	2300      	movs	r3, #0
 800360e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8003612:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8003616:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800361a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800361e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8003622:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8003626:	6828      	ldr	r0, [r5, #0]
 8003628:	7221      	strb	r1, [r4, #8]
 800362a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800362e:	f000 fb39 	bl	8003ca4 <free>
 8003632:	602e      	str	r6, [r5, #0]
 8003634:	b00d      	add	sp, #52	@ 0x34
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	6829      	ldr	r1, [r5, #0]
 800363c:	2900      	cmp	r1, #0
 800363e:	f040 808e 	bne.w	800375e <_tzset_unlocked_r+0x186>
 8003642:	6828      	ldr	r0, [r5, #0]
 8003644:	f000 fb2e 	bl	8003ca4 <free>
 8003648:	4630      	mov	r0, r6
 800364a:	f7fc fdeb 	bl	8000224 <strlen>
 800364e:	1c41      	adds	r1, r0, #1
 8003650:	4638      	mov	r0, r7
 8003652:	f000 fb51 	bl	8003cf8 <_malloc_r>
 8003656:	6028      	str	r0, [r5, #0]
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 8086 	bne.w	800376a <_tzset_unlocked_r+0x192>
 800365e:	4aa2      	ldr	r2, [pc, #648]	@ (80038e8 <_tzset_unlocked_r+0x310>)
 8003660:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80038ec <_tzset_unlocked_r+0x314>
 8003664:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80038e0 <_tzset_unlocked_r+0x308>
 8003668:	2300      	movs	r3, #0
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4aa0      	ldr	r2, [pc, #640]	@ (80038f0 <_tzset_unlocked_r+0x318>)
 800366e:	f8ca 3000 	str.w	r3, [sl]
 8003672:	2000      	movs	r0, #0
 8003674:	2100      	movs	r1, #0
 8003676:	e9c8 2200 	strd	r2, r2, [r8]
 800367a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800367e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8003682:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8003686:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800368a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800368e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8003692:	224a      	movs	r2, #74	@ 0x4a
 8003694:	7222      	strb	r2, [r4, #8]
 8003696:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003698:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800369c:	6523      	str	r3, [r4, #80]	@ 0x50
 800369e:	7833      	ldrb	r3, [r6, #0]
 80036a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80036a2:	bf08      	it	eq
 80036a4:	3601      	addeq	r6, #1
 80036a6:	7833      	ldrb	r3, [r6, #0]
 80036a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80036aa:	d162      	bne.n	8003772 <_tzset_unlocked_r+0x19a>
 80036ac:	1c75      	adds	r5, r6, #1
 80036ae:	4a91      	ldr	r2, [pc, #580]	@ (80038f4 <_tzset_unlocked_r+0x31c>)
 80036b0:	4991      	ldr	r1, [pc, #580]	@ (80038f8 <_tzset_unlocked_r+0x320>)
 80036b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 ffc9 	bl	800464c <siscanf>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	ddba      	ble.n	8003634 <_tzset_unlocked_r+0x5c>
 80036be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036c0:	1eda      	subs	r2, r3, #3
 80036c2:	2a07      	cmp	r2, #7
 80036c4:	d8b6      	bhi.n	8003634 <_tzset_unlocked_r+0x5c>
 80036c6:	5ceb      	ldrb	r3, [r5, r3]
 80036c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ca:	d1b3      	bne.n	8003634 <_tzset_unlocked_r+0x5c>
 80036cc:	3602      	adds	r6, #2
 80036ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036d0:	18f5      	adds	r5, r6, r3
 80036d2:	5cf3      	ldrb	r3, [r6, r3]
 80036d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80036d6:	d15a      	bne.n	800378e <_tzset_unlocked_r+0x1b6>
 80036d8:	3501      	adds	r5, #1
 80036da:	f04f 39ff 	mov.w	r9, #4294967295
 80036de:	2300      	movs	r3, #0
 80036e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80036e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80036e8:	af08      	add	r7, sp, #32
 80036ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80036ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80036f0:	9303      	str	r3, [sp, #12]
 80036f2:	f10d 031e 	add.w	r3, sp, #30
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4980      	ldr	r1, [pc, #512]	@ (80038fc <_tzset_unlocked_r+0x324>)
 80036fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80036fc:	aa07      	add	r2, sp, #28
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 ffa4 	bl	800464c <siscanf>
 8003704:	2800      	cmp	r0, #0
 8003706:	dd95      	ble.n	8003634 <_tzset_unlocked_r+0x5c>
 8003708:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800370c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8003710:	223c      	movs	r2, #60	@ 0x3c
 8003712:	fb02 6603 	mla	r6, r2, r3, r6
 8003716:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800371a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800371e:	fb02 6603 	mla	r6, r2, r3, r6
 8003722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003724:	fb09 f606 	mul.w	r6, r9, r6
 8003728:	eb05 0903 	add.w	r9, r5, r3
 800372c:	5ceb      	ldrb	r3, [r5, r3]
 800372e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003730:	f040 80ee 	bne.w	8003910 <_tzset_unlocked_r+0x338>
 8003734:	f109 0501 	add.w	r5, r9, #1
 8003738:	4a71      	ldr	r2, [pc, #452]	@ (8003900 <_tzset_unlocked_r+0x328>)
 800373a:	496f      	ldr	r1, [pc, #444]	@ (80038f8 <_tzset_unlocked_r+0x320>)
 800373c:	ab0a      	add	r3, sp, #40	@ 0x28
 800373e:	4628      	mov	r0, r5
 8003740:	f000 ff84 	bl	800464c <siscanf>
 8003744:	2800      	cmp	r0, #0
 8003746:	dc28      	bgt.n	800379a <_tzset_unlocked_r+0x1c2>
 8003748:	f899 3001 	ldrb.w	r3, [r9, #1]
 800374c:	2b3e      	cmp	r3, #62	@ 0x3e
 800374e:	d124      	bne.n	800379a <_tzset_unlocked_r+0x1c2>
 8003750:	4b68      	ldr	r3, [pc, #416]	@ (80038f4 <_tzset_unlocked_r+0x31c>)
 8003752:	62a6      	str	r6, [r4, #40]	@ 0x28
 8003754:	e9c8 3300 	strd	r3, r3, [r8]
 8003758:	f8ca 6000 	str.w	r6, [sl]
 800375c:	e76a      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 800375e:	f7fc fd57 	bl	8000210 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	f47f af6d 	bne.w	8003642 <_tzset_unlocked_r+0x6a>
 8003768:	e764      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 800376a:	4631      	mov	r1, r6
 800376c:	f000 f9dd 	bl	8003b2a <strcpy>
 8003770:	e775      	b.n	800365e <_tzset_unlocked_r+0x86>
 8003772:	4a60      	ldr	r2, [pc, #384]	@ (80038f4 <_tzset_unlocked_r+0x31c>)
 8003774:	4963      	ldr	r1, [pc, #396]	@ (8003904 <_tzset_unlocked_r+0x32c>)
 8003776:	ab0a      	add	r3, sp, #40	@ 0x28
 8003778:	4630      	mov	r0, r6
 800377a:	f000 ff67 	bl	800464c <siscanf>
 800377e:	2800      	cmp	r0, #0
 8003780:	f77f af58 	ble.w	8003634 <_tzset_unlocked_r+0x5c>
 8003784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003786:	3b03      	subs	r3, #3
 8003788:	2b07      	cmp	r3, #7
 800378a:	d9a0      	bls.n	80036ce <_tzset_unlocked_r+0xf6>
 800378c:	e752      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 800378e:	2b2b      	cmp	r3, #43	@ 0x2b
 8003790:	bf08      	it	eq
 8003792:	3501      	addeq	r5, #1
 8003794:	f04f 0901 	mov.w	r9, #1
 8003798:	e7a1      	b.n	80036de <_tzset_unlocked_r+0x106>
 800379a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800379c:	1eda      	subs	r2, r3, #3
 800379e:	2a07      	cmp	r2, #7
 80037a0:	f63f af48 	bhi.w	8003634 <_tzset_unlocked_r+0x5c>
 80037a4:	5ceb      	ldrb	r3, [r5, r3]
 80037a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80037a8:	f47f af44 	bne.w	8003634 <_tzset_unlocked_r+0x5c>
 80037ac:	f109 0902 	add.w	r9, r9, #2
 80037b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037b2:	eb09 0503 	add.w	r5, r9, r3
 80037b6:	f819 3003 	ldrb.w	r3, [r9, r3]
 80037ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80037bc:	f040 80b7 	bne.w	800392e <_tzset_unlocked_r+0x356>
 80037c0:	3501      	adds	r5, #1
 80037c2:	f04f 39ff 	mov.w	r9, #4294967295
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80037cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80037d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80037d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80037d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80037d8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	f10d 031e 	add.w	r3, sp, #30
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4945      	ldr	r1, [pc, #276]	@ (80038fc <_tzset_unlocked_r+0x324>)
 80037e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80037e8:	aa07      	add	r2, sp, #28
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 ff2e 	bl	800464c <siscanf>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	f300 80a2 	bgt.w	800393a <_tzset_unlocked_r+0x362>
 80037f6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80037fa:	9304      	str	r3, [sp, #16]
 80037fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037fe:	4627      	mov	r7, r4
 8003800:	441d      	add	r5, r3
 8003802:	f04f 0b00 	mov.w	fp, #0
 8003806:	782b      	ldrb	r3, [r5, #0]
 8003808:	2b2c      	cmp	r3, #44	@ 0x2c
 800380a:	bf08      	it	eq
 800380c:	3501      	addeq	r5, #1
 800380e:	f895 9000 	ldrb.w	r9, [r5]
 8003812:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8003816:	f040 80a3 	bne.w	8003960 <_tzset_unlocked_r+0x388>
 800381a:	ab0a      	add	r3, sp, #40	@ 0x28
 800381c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8003820:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003824:	aa09      	add	r2, sp, #36	@ 0x24
 8003826:	9200      	str	r2, [sp, #0]
 8003828:	4937      	ldr	r1, [pc, #220]	@ (8003908 <_tzset_unlocked_r+0x330>)
 800382a:	9303      	str	r3, [sp, #12]
 800382c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8003830:	4628      	mov	r0, r5
 8003832:	f000 ff0b 	bl	800464c <siscanf>
 8003836:	2803      	cmp	r0, #3
 8003838:	f47f aefc 	bne.w	8003634 <_tzset_unlocked_r+0x5c>
 800383c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8003840:	1e4b      	subs	r3, r1, #1
 8003842:	2b0b      	cmp	r3, #11
 8003844:	f63f aef6 	bhi.w	8003634 <_tzset_unlocked_r+0x5c>
 8003848:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800384c:	1e53      	subs	r3, r2, #1
 800384e:	2b04      	cmp	r3, #4
 8003850:	f63f aef0 	bhi.w	8003634 <_tzset_unlocked_r+0x5c>
 8003854:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8003858:	2b06      	cmp	r3, #6
 800385a:	f63f aeeb 	bhi.w	8003634 <_tzset_unlocked_r+0x5c>
 800385e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8003862:	f887 9008 	strb.w	r9, [r7, #8]
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800386a:	eb05 0903 	add.w	r9, r5, r3
 800386e:	2500      	movs	r5, #0
 8003870:	f04f 0302 	mov.w	r3, #2
 8003874:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003878:	f8ad 501e 	strh.w	r5, [sp, #30]
 800387c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003880:	950a      	str	r5, [sp, #40]	@ 0x28
 8003882:	f899 3000 	ldrb.w	r3, [r9]
 8003886:	2b2f      	cmp	r3, #47	@ 0x2f
 8003888:	f040 8096 	bne.w	80039b8 <_tzset_unlocked_r+0x3e0>
 800388c:	ab0a      	add	r3, sp, #40	@ 0x28
 800388e:	aa08      	add	r2, sp, #32
 8003890:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003894:	f10d 021e 	add.w	r2, sp, #30
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	491c      	ldr	r1, [pc, #112]	@ (800390c <_tzset_unlocked_r+0x334>)
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	aa07      	add	r2, sp, #28
 80038a0:	4648      	mov	r0, r9
 80038a2:	f000 fed3 	bl	800464c <siscanf>
 80038a6:	42a8      	cmp	r0, r5
 80038a8:	f300 8086 	bgt.w	80039b8 <_tzset_unlocked_r+0x3e0>
 80038ac:	214a      	movs	r1, #74	@ 0x4a
 80038ae:	2200      	movs	r2, #0
 80038b0:	2300      	movs	r3, #0
 80038b2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038b6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038ba:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80038be:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80038c2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80038c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80038ca:	7221      	strb	r1, [r4, #8]
 80038cc:	62a5      	str	r5, [r4, #40]	@ 0x28
 80038ce:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80038d2:	6525      	str	r5, [r4, #80]	@ 0x50
 80038d4:	e6ae      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 80038d6:	bf00      	nop
 80038d8:	08005f04 	.word	0x08005f04
 80038dc:	20000698 	.word	0x20000698
 80038e0:	200006b4 	.word	0x200006b4
 80038e4:	08005f07 	.word	0x08005f07
 80038e8:	200006b8 	.word	0x200006b8
 80038ec:	20000024 	.word	0x20000024
 80038f0:	08005f8d 	.word	0x08005f8d
 80038f4:	200006a8 	.word	0x200006a8
 80038f8:	08005f0b 	.word	0x08005f0b
 80038fc:	08005f40 	.word	0x08005f40
 8003900:	2000069c 	.word	0x2000069c
 8003904:	08005f1e 	.word	0x08005f1e
 8003908:	08005f2c 	.word	0x08005f2c
 800390c:	08005f3f 	.word	0x08005f3f
 8003910:	4a3e      	ldr	r2, [pc, #248]	@ (8003a0c <_tzset_unlocked_r+0x434>)
 8003912:	493f      	ldr	r1, [pc, #252]	@ (8003a10 <_tzset_unlocked_r+0x438>)
 8003914:	ab0a      	add	r3, sp, #40	@ 0x28
 8003916:	4648      	mov	r0, r9
 8003918:	f000 fe98 	bl	800464c <siscanf>
 800391c:	2800      	cmp	r0, #0
 800391e:	f77f af17 	ble.w	8003750 <_tzset_unlocked_r+0x178>
 8003922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003924:	3b03      	subs	r3, #3
 8003926:	2b07      	cmp	r3, #7
 8003928:	f67f af42 	bls.w	80037b0 <_tzset_unlocked_r+0x1d8>
 800392c:	e682      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 800392e:	2b2b      	cmp	r3, #43	@ 0x2b
 8003930:	bf08      	it	eq
 8003932:	3501      	addeq	r5, #1
 8003934:	f04f 0901 	mov.w	r9, #1
 8003938:	e745      	b.n	80037c6 <_tzset_unlocked_r+0x1ee>
 800393a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800393e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003942:	213c      	movs	r1, #60	@ 0x3c
 8003944:	fb01 3302 	mla	r3, r1, r2, r3
 8003948:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800394c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003950:	fb01 3302 	mla	r3, r1, r2, r3
 8003954:	fb09 f303 	mul.w	r3, r9, r3
 8003958:	e74f      	b.n	80037fa <_tzset_unlocked_r+0x222>
 800395a:	f04f 0b01 	mov.w	fp, #1
 800395e:	e752      	b.n	8003806 <_tzset_unlocked_r+0x22e>
 8003960:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8003964:	bf06      	itte	eq
 8003966:	3501      	addeq	r5, #1
 8003968:	464b      	moveq	r3, r9
 800396a:	2344      	movne	r3, #68	@ 0x44
 800396c:	220a      	movs	r2, #10
 800396e:	a90b      	add	r1, sp, #44	@ 0x2c
 8003970:	4628      	mov	r0, r5
 8003972:	9305      	str	r3, [sp, #20]
 8003974:	f000 fabc 	bl	8003ef0 <strtoul>
 8003978:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800397c:	9b05      	ldr	r3, [sp, #20]
 800397e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8003982:	45a9      	cmp	r9, r5
 8003984:	d114      	bne.n	80039b0 <_tzset_unlocked_r+0x3d8>
 8003986:	234d      	movs	r3, #77	@ 0x4d
 8003988:	f1bb 0f00 	cmp.w	fp, #0
 800398c:	d107      	bne.n	800399e <_tzset_unlocked_r+0x3c6>
 800398e:	7223      	strb	r3, [r4, #8]
 8003990:	2103      	movs	r1, #3
 8003992:	2302      	movs	r3, #2
 8003994:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8003998:	f8c4 b014 	str.w	fp, [r4, #20]
 800399c:	e767      	b.n	800386e <_tzset_unlocked_r+0x296>
 800399e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80039a2:	220b      	movs	r2, #11
 80039a4:	2301      	movs	r3, #1
 80039a6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80039aa:	2300      	movs	r3, #0
 80039ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80039ae:	e75e      	b.n	800386e <_tzset_unlocked_r+0x296>
 80039b0:	b280      	uxth	r0, r0
 80039b2:	723b      	strb	r3, [r7, #8]
 80039b4:	6178      	str	r0, [r7, #20]
 80039b6:	e75a      	b.n	800386e <_tzset_unlocked_r+0x296>
 80039b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80039bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80039c0:	213c      	movs	r1, #60	@ 0x3c
 80039c2:	fb01 3302 	mla	r3, r1, r2, r3
 80039c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80039ca:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80039ce:	fb01 3302 	mla	r3, r1, r2, r3
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80039d6:	3728      	adds	r7, #40	@ 0x28
 80039d8:	444d      	add	r5, r9
 80039da:	f1bb 0f00 	cmp.w	fp, #0
 80039de:	d0bc      	beq.n	800395a <_tzset_unlocked_r+0x382>
 80039e0:	9b04      	ldr	r3, [sp, #16]
 80039e2:	6523      	str	r3, [r4, #80]	@ 0x50
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <_tzset_unlocked_r+0x43c>)
 80039e6:	f8c8 3000 	str.w	r3, [r8]
 80039ea:	6860      	ldr	r0, [r4, #4]
 80039ec:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <_tzset_unlocked_r+0x434>)
 80039ee:	62a6      	str	r6, [r4, #40]	@ 0x28
 80039f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80039f4:	f7ff fd34 	bl	8003460 <__tzcalc_limits>
 80039f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80039fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80039fc:	f8ca 2000 	str.w	r2, [sl]
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	4a05      	ldr	r2, [pc, #20]	@ (8003a18 <_tzset_unlocked_r+0x440>)
 8003a04:	bf18      	it	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e613      	b.n	8003634 <_tzset_unlocked_r+0x5c>
 8003a0c:	2000069c 	.word	0x2000069c
 8003a10:	08005f1e 	.word	0x08005f1e
 8003a14:	200006a8 	.word	0x200006a8
 8003a18:	200006b8 	.word	0x200006b8

08003a1c <_close_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4d06      	ldr	r5, [pc, #24]	@ (8003a38 <_close_r+0x1c>)
 8003a20:	2300      	movs	r3, #0
 8003a22:	4604      	mov	r4, r0
 8003a24:	4608      	mov	r0, r1
 8003a26:	602b      	str	r3, [r5, #0]
 8003a28:	f7fd f88b 	bl	8000b42 <_close>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <_close_r+0x1a>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	b103      	cbz	r3, 8003a36 <_close_r+0x1a>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	200006bc 	.word	0x200006bc

08003a3c <_gettimeofday_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4d07      	ldr	r5, [pc, #28]	@ (8003a5c <_gettimeofday_r+0x20>)
 8003a40:	2300      	movs	r3, #0
 8003a42:	4604      	mov	r4, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	f001 fe0f 	bl	800566c <_gettimeofday>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d102      	bne.n	8003a58 <_gettimeofday_r+0x1c>
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	b103      	cbz	r3, 8003a58 <_gettimeofday_r+0x1c>
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	bd38      	pop	{r3, r4, r5, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200006bc 	.word	0x200006bc

08003a60 <_lseek_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4d07      	ldr	r5, [pc, #28]	@ (8003a80 <_lseek_r+0x20>)
 8003a64:	4604      	mov	r4, r0
 8003a66:	4608      	mov	r0, r1
 8003a68:	4611      	mov	r1, r2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	602a      	str	r2, [r5, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f7fd f88e 	bl	8000b90 <_lseek>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d102      	bne.n	8003a7e <_lseek_r+0x1e>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	b103      	cbz	r3, 8003a7e <_lseek_r+0x1e>
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	bd38      	pop	{r3, r4, r5, pc}
 8003a80:	200006bc 	.word	0x200006bc

08003a84 <_read_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d07      	ldr	r5, [pc, #28]	@ (8003aa4 <_read_r+0x20>)
 8003a88:	4604      	mov	r4, r0
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	602a      	str	r2, [r5, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7fd f81c 	bl	8000ad0 <_read>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_read_r+0x1e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_read_r+0x1e>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	200006bc 	.word	0x200006bc

08003aa8 <_write_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ac8 <_write_r+0x20>)
 8003aac:	4604      	mov	r4, r0
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	602a      	str	r2, [r5, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7fd f827 	bl	8000b0a <_write>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_write_r+0x1e>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_write_r+0x1e>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	200006bc 	.word	0x200006bc

08003acc <__errno>:
 8003acc:	4b01      	ldr	r3, [pc, #4]	@ (8003ad4 <__errno+0x8>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2000002c 	.word	0x2000002c

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f001 fdc6 	bl	800567c <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	080060e8 	.word	0x080060e8
 8003b14:	080060e8 	.word	0x080060e8
 8003b18:	080060e8 	.word	0x080060e8
 8003b1c:	080060ec 	.word	0x080060ec

08003b20 <__retarget_lock_init_recursive>:
 8003b20:	4770      	bx	lr

08003b22 <__retarget_lock_acquire>:
 8003b22:	4770      	bx	lr

08003b24 <__retarget_lock_acquire_recursive>:
 8003b24:	4770      	bx	lr

08003b26 <__retarget_lock_release>:
 8003b26:	4770      	bx	lr

08003b28 <__retarget_lock_release_recursive>:
 8003b28:	4770      	bx	lr

08003b2a <strcpy>:
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b30:	f803 2b01 	strb.w	r2, [r3], #1
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d1f9      	bne.n	8003b2c <strcpy+0x2>
 8003b38:	4770      	bx	lr
	...

08003b3c <__assert_func>:
 8003b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b3e:	4614      	mov	r4, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <__assert_func+0x2c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4605      	mov	r5, r0
 8003b48:	68d8      	ldr	r0, [r3, #12]
 8003b4a:	b954      	cbnz	r4, 8003b62 <__assert_func+0x26>
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <__assert_func+0x30>)
 8003b4e:	461c      	mov	r4, r3
 8003b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b54:	9100      	str	r1, [sp, #0]
 8003b56:	462b      	mov	r3, r5
 8003b58:	4905      	ldr	r1, [pc, #20]	@ (8003b70 <__assert_func+0x34>)
 8003b5a:	f000 fd65 	bl	8004628 <fiprintf>
 8003b5e:	f000 fe93 	bl	8004888 <abort>
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <__assert_func+0x38>)
 8003b64:	e7f4      	b.n	8003b50 <__assert_func+0x14>
 8003b66:	bf00      	nop
 8003b68:	2000002c 	.word	0x2000002c
 8003b6c:	08005f8d 	.word	0x08005f8d
 8003b70:	08005f5f 	.word	0x08005f5f
 8003b74:	08005f52 	.word	0x08005f52

08003b78 <_free_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	d041      	beq.n	8003c04 <_free_r+0x8c>
 8003b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b84:	1f0c      	subs	r4, r1, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	18e4      	addlt	r4, r4, r3
 8003b8c:	f000 f934 	bl	8003df8 <__malloc_lock>
 8003b90:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <_free_r+0x90>)
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	b933      	cbnz	r3, 8003ba4 <_free_r+0x2c>
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	6014      	str	r4, [r2, #0]
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ba0:	f000 b930 	b.w	8003e04 <__malloc_unlock>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d908      	bls.n	8003bba <_free_r+0x42>
 8003ba8:	6820      	ldr	r0, [r4, #0]
 8003baa:	1821      	adds	r1, r4, r0
 8003bac:	428b      	cmp	r3, r1
 8003bae:	bf01      	itttt	eq
 8003bb0:	6819      	ldreq	r1, [r3, #0]
 8003bb2:	685b      	ldreq	r3, [r3, #4]
 8003bb4:	1809      	addeq	r1, r1, r0
 8003bb6:	6021      	streq	r1, [r4, #0]
 8003bb8:	e7ed      	b.n	8003b96 <_free_r+0x1e>
 8003bba:	461a      	mov	r2, r3
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b10b      	cbz	r3, 8003bc4 <_free_r+0x4c>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d9fa      	bls.n	8003bba <_free_r+0x42>
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	1850      	adds	r0, r2, r1
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d10b      	bne.n	8003be4 <_free_r+0x6c>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	4401      	add	r1, r0
 8003bd0:	1850      	adds	r0, r2, r1
 8003bd2:	4283      	cmp	r3, r0
 8003bd4:	6011      	str	r1, [r2, #0]
 8003bd6:	d1e0      	bne.n	8003b9a <_free_r+0x22>
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6053      	str	r3, [r2, #4]
 8003bde:	4408      	add	r0, r1
 8003be0:	6010      	str	r0, [r2, #0]
 8003be2:	e7da      	b.n	8003b9a <_free_r+0x22>
 8003be4:	d902      	bls.n	8003bec <_free_r+0x74>
 8003be6:	230c      	movs	r3, #12
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	e7d6      	b.n	8003b9a <_free_r+0x22>
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	1821      	adds	r1, r4, r0
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	bf04      	itt	eq
 8003bf4:	6819      	ldreq	r1, [r3, #0]
 8003bf6:	685b      	ldreq	r3, [r3, #4]
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	bf04      	itt	eq
 8003bfc:	1809      	addeq	r1, r1, r0
 8003bfe:	6021      	streq	r1, [r4, #0]
 8003c00:	6054      	str	r4, [r2, #4]
 8003c02:	e7ca      	b.n	8003b9a <_free_r+0x22>
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	bf00      	nop
 8003c08:	200006c8 	.word	0x200006c8

08003c0c <_findenv_r>:
 8003c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8003c80 <_findenv_r+0x74>
 8003c14:	4606      	mov	r6, r0
 8003c16:	4689      	mov	r9, r1
 8003c18:	4617      	mov	r7, r2
 8003c1a:	f000 fe3d 	bl	8004898 <__env_lock>
 8003c1e:	f8da 4000 	ldr.w	r4, [sl]
 8003c22:	b134      	cbz	r4, 8003c32 <_findenv_r+0x26>
 8003c24:	464b      	mov	r3, r9
 8003c26:	4698      	mov	r8, r3
 8003c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c2c:	b13a      	cbz	r2, 8003c3e <_findenv_r+0x32>
 8003c2e:	2a3d      	cmp	r2, #61	@ 0x3d
 8003c30:	d1f9      	bne.n	8003c26 <_findenv_r+0x1a>
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 fe36 	bl	80048a4 <__env_unlock>
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3e:	eba8 0809 	sub.w	r8, r8, r9
 8003c42:	46a3      	mov	fp, r4
 8003c44:	f854 0b04 	ldr.w	r0, [r4], #4
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d0f2      	beq.n	8003c32 <_findenv_r+0x26>
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	4649      	mov	r1, r9
 8003c50:	f000 fd40 	bl	80046d4 <strncmp>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d1f4      	bne.n	8003c42 <_findenv_r+0x36>
 8003c58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003c5c:	eb03 0508 	add.w	r5, r3, r8
 8003c60:	f813 3008 	ldrb.w	r3, [r3, r8]
 8003c64:	2b3d      	cmp	r3, #61	@ 0x3d
 8003c66:	d1ec      	bne.n	8003c42 <_findenv_r+0x36>
 8003c68:	f8da 3000 	ldr.w	r3, [sl]
 8003c6c:	ebab 0303 	sub.w	r3, fp, r3
 8003c70:	109b      	asrs	r3, r3, #2
 8003c72:	4630      	mov	r0, r6
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	f000 fe15 	bl	80048a4 <__env_unlock>
 8003c7a:	1c68      	adds	r0, r5, #1
 8003c7c:	e7dd      	b.n	8003c3a <_findenv_r+0x2e>
 8003c7e:	bf00      	nop
 8003c80:	20000000 	.word	0x20000000

08003c84 <_getenv_r>:
 8003c84:	b507      	push	{r0, r1, r2, lr}
 8003c86:	aa01      	add	r2, sp, #4
 8003c88:	f7ff ffc0 	bl	8003c0c <_findenv_r>
 8003c8c:	b003      	add	sp, #12
 8003c8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c94 <malloc>:
 8003c94:	4b02      	ldr	r3, [pc, #8]	@ (8003ca0 <malloc+0xc>)
 8003c96:	4601      	mov	r1, r0
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	f000 b82d 	b.w	8003cf8 <_malloc_r>
 8003c9e:	bf00      	nop
 8003ca0:	2000002c 	.word	0x2000002c

08003ca4 <free>:
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <free+0xc>)
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f7ff bf65 	b.w	8003b78 <_free_r>
 8003cae:	bf00      	nop
 8003cb0:	2000002c 	.word	0x2000002c

08003cb4 <sbrk_aligned>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003cf4 <sbrk_aligned+0x40>)
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b911      	cbnz	r1, 8003cc6 <sbrk_aligned+0x12>
 8003cc0:	f000 fdc4 	bl	800484c <_sbrk_r>
 8003cc4:	6030      	str	r0, [r6, #0]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fdbf 	bl	800484c <_sbrk_r>
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	d103      	bne.n	8003cda <sbrk_aligned+0x26>
 8003cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	1cc4      	adds	r4, r0, #3
 8003cdc:	f024 0403 	bic.w	r4, r4, #3
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d0f8      	beq.n	8003cd6 <sbrk_aligned+0x22>
 8003ce4:	1a21      	subs	r1, r4, r0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fdb0 	bl	800484c <_sbrk_r>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d1f2      	bne.n	8003cd6 <sbrk_aligned+0x22>
 8003cf0:	e7ef      	b.n	8003cd2 <sbrk_aligned+0x1e>
 8003cf2:	bf00      	nop
 8003cf4:	200006c4 	.word	0x200006c4

08003cf8 <_malloc_r>:
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	1ccd      	adds	r5, r1, #3
 8003cfe:	f025 0503 	bic.w	r5, r5, #3
 8003d02:	3508      	adds	r5, #8
 8003d04:	2d0c      	cmp	r5, #12
 8003d06:	bf38      	it	cc
 8003d08:	250c      	movcc	r5, #12
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	db01      	blt.n	8003d14 <_malloc_r+0x1c>
 8003d10:	42a9      	cmp	r1, r5
 8003d12:	d904      	bls.n	8003d1e <_malloc_r+0x26>
 8003d14:	230c      	movs	r3, #12
 8003d16:	6033      	str	r3, [r6, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003df4 <_malloc_r+0xfc>
 8003d22:	f000 f869 	bl	8003df8 <__malloc_lock>
 8003d26:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	bb44      	cbnz	r4, 8003d80 <_malloc_r+0x88>
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7ff ffbf 	bl	8003cb4 <sbrk_aligned>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	4604      	mov	r4, r0
 8003d3a:	d158      	bne.n	8003dee <_malloc_r+0xf6>
 8003d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d40:	4627      	mov	r7, r4
 8003d42:	2f00      	cmp	r7, #0
 8003d44:	d143      	bne.n	8003dce <_malloc_r+0xd6>
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	d04b      	beq.n	8003de2 <_malloc_r+0xea>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4630      	mov	r0, r6
 8003d50:	eb04 0903 	add.w	r9, r4, r3
 8003d54:	f000 fd7a 	bl	800484c <_sbrk_r>
 8003d58:	4581      	cmp	r9, r0
 8003d5a:	d142      	bne.n	8003de2 <_malloc_r+0xea>
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	1a6d      	subs	r5, r5, r1
 8003d60:	4629      	mov	r1, r5
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7ff ffa6 	bl	8003cb4 <sbrk_aligned>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d03a      	beq.n	8003de2 <_malloc_r+0xea>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	442b      	add	r3, r5
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	f8d8 3000 	ldr.w	r3, [r8]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	bb62      	cbnz	r2, 8003dd4 <_malloc_r+0xdc>
 8003d7a:	f8c8 7000 	str.w	r7, [r8]
 8003d7e:	e00f      	b.n	8003da0 <_malloc_r+0xa8>
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	1b52      	subs	r2, r2, r5
 8003d84:	d420      	bmi.n	8003dc8 <_malloc_r+0xd0>
 8003d86:	2a0b      	cmp	r2, #11
 8003d88:	d917      	bls.n	8003dba <_malloc_r+0xc2>
 8003d8a:	1961      	adds	r1, r4, r5
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	6025      	str	r5, [r4, #0]
 8003d90:	bf18      	it	ne
 8003d92:	6059      	strne	r1, [r3, #4]
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	bf08      	it	eq
 8003d98:	f8c8 1000 	streq.w	r1, [r8]
 8003d9c:	5162      	str	r2, [r4, r5]
 8003d9e:	604b      	str	r3, [r1, #4]
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 f82f 	bl	8003e04 <__malloc_unlock>
 8003da6:	f104 000b 	add.w	r0, r4, #11
 8003daa:	1d23      	adds	r3, r4, #4
 8003dac:	f020 0007 	bic.w	r0, r0, #7
 8003db0:	1ac2      	subs	r2, r0, r3
 8003db2:	bf1c      	itt	ne
 8003db4:	1a1b      	subne	r3, r3, r0
 8003db6:	50a3      	strne	r3, [r4, r2]
 8003db8:	e7af      	b.n	8003d1a <_malloc_r+0x22>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	bf0c      	ite	eq
 8003dc0:	f8c8 2000 	streq.w	r2, [r8]
 8003dc4:	605a      	strne	r2, [r3, #4]
 8003dc6:	e7eb      	b.n	8003da0 <_malloc_r+0xa8>
 8003dc8:	4623      	mov	r3, r4
 8003dca:	6864      	ldr	r4, [r4, #4]
 8003dcc:	e7ae      	b.n	8003d2c <_malloc_r+0x34>
 8003dce:	463c      	mov	r4, r7
 8003dd0:	687f      	ldr	r7, [r7, #4]
 8003dd2:	e7b6      	b.n	8003d42 <_malloc_r+0x4a>
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d1fb      	bne.n	8003dd4 <_malloc_r+0xdc>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6053      	str	r3, [r2, #4]
 8003de0:	e7de      	b.n	8003da0 <_malloc_r+0xa8>
 8003de2:	230c      	movs	r3, #12
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	4630      	mov	r0, r6
 8003de8:	f000 f80c 	bl	8003e04 <__malloc_unlock>
 8003dec:	e794      	b.n	8003d18 <_malloc_r+0x20>
 8003dee:	6005      	str	r5, [r0, #0]
 8003df0:	e7d6      	b.n	8003da0 <_malloc_r+0xa8>
 8003df2:	bf00      	nop
 8003df4:	200006c8 	.word	0x200006c8

08003df8 <__malloc_lock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_lock+0x8>)
 8003dfa:	f7ff be93 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200006c2 	.word	0x200006c2

08003e04 <__malloc_unlock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_unlock+0x8>)
 8003e06:	f7ff be8f 	b.w	8003b28 <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200006c2 	.word	0x200006c2

08003e10 <_strtoul_l.constprop.0>:
 8003e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e14:	4e34      	ldr	r6, [pc, #208]	@ (8003ee8 <_strtoul_l.constprop.0+0xd8>)
 8003e16:	4686      	mov	lr, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e20:	5d37      	ldrb	r7, [r6, r4]
 8003e22:	f017 0708 	ands.w	r7, r7, #8
 8003e26:	d1f8      	bne.n	8003e1a <_strtoul_l.constprop.0+0xa>
 8003e28:	2c2d      	cmp	r4, #45	@ 0x2d
 8003e2a:	d12f      	bne.n	8003e8c <_strtoul_l.constprop.0+0x7c>
 8003e2c:	782c      	ldrb	r4, [r5, #0]
 8003e2e:	2701      	movs	r7, #1
 8003e30:	1c85      	adds	r5, r0, #2
 8003e32:	f033 0010 	bics.w	r0, r3, #16
 8003e36:	d109      	bne.n	8003e4c <_strtoul_l.constprop.0+0x3c>
 8003e38:	2c30      	cmp	r4, #48	@ 0x30
 8003e3a:	d12c      	bne.n	8003e96 <_strtoul_l.constprop.0+0x86>
 8003e3c:	7828      	ldrb	r0, [r5, #0]
 8003e3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003e42:	2858      	cmp	r0, #88	@ 0x58
 8003e44:	d127      	bne.n	8003e96 <_strtoul_l.constprop.0+0x86>
 8003e46:	786c      	ldrb	r4, [r5, #1]
 8003e48:	2310      	movs	r3, #16
 8003e4a:	3502      	adds	r5, #2
 8003e4c:	f04f 38ff 	mov.w	r8, #4294967295
 8003e50:	2600      	movs	r6, #0
 8003e52:	fbb8 f8f3 	udiv	r8, r8, r3
 8003e56:	fb03 f908 	mul.w	r9, r3, r8
 8003e5a:	ea6f 0909 	mvn.w	r9, r9
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003e64:	f1bc 0f09 	cmp.w	ip, #9
 8003e68:	d81c      	bhi.n	8003ea4 <_strtoul_l.constprop.0+0x94>
 8003e6a:	4664      	mov	r4, ip
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	dd2a      	ble.n	8003ec6 <_strtoul_l.constprop.0+0xb6>
 8003e70:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003e74:	d007      	beq.n	8003e86 <_strtoul_l.constprop.0+0x76>
 8003e76:	4580      	cmp	r8, r0
 8003e78:	d322      	bcc.n	8003ec0 <_strtoul_l.constprop.0+0xb0>
 8003e7a:	d101      	bne.n	8003e80 <_strtoul_l.constprop.0+0x70>
 8003e7c:	45a1      	cmp	r9, r4
 8003e7e:	db1f      	blt.n	8003ec0 <_strtoul_l.constprop.0+0xb0>
 8003e80:	fb00 4003 	mla	r0, r0, r3, r4
 8003e84:	2601      	movs	r6, #1
 8003e86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e8a:	e7e9      	b.n	8003e60 <_strtoul_l.constprop.0+0x50>
 8003e8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003e8e:	bf04      	itt	eq
 8003e90:	782c      	ldrbeq	r4, [r5, #0]
 8003e92:	1c85      	addeq	r5, r0, #2
 8003e94:	e7cd      	b.n	8003e32 <_strtoul_l.constprop.0+0x22>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1d8      	bne.n	8003e4c <_strtoul_l.constprop.0+0x3c>
 8003e9a:	2c30      	cmp	r4, #48	@ 0x30
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2308      	moveq	r3, #8
 8003ea0:	230a      	movne	r3, #10
 8003ea2:	e7d3      	b.n	8003e4c <_strtoul_l.constprop.0+0x3c>
 8003ea4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003ea8:	f1bc 0f19 	cmp.w	ip, #25
 8003eac:	d801      	bhi.n	8003eb2 <_strtoul_l.constprop.0+0xa2>
 8003eae:	3c37      	subs	r4, #55	@ 0x37
 8003eb0:	e7dc      	b.n	8003e6c <_strtoul_l.constprop.0+0x5c>
 8003eb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003eb6:	f1bc 0f19 	cmp.w	ip, #25
 8003eba:	d804      	bhi.n	8003ec6 <_strtoul_l.constprop.0+0xb6>
 8003ebc:	3c57      	subs	r4, #87	@ 0x57
 8003ebe:	e7d5      	b.n	8003e6c <_strtoul_l.constprop.0+0x5c>
 8003ec0:	f04f 36ff 	mov.w	r6, #4294967295
 8003ec4:	e7df      	b.n	8003e86 <_strtoul_l.constprop.0+0x76>
 8003ec6:	1c73      	adds	r3, r6, #1
 8003ec8:	d106      	bne.n	8003ed8 <_strtoul_l.constprop.0+0xc8>
 8003eca:	2322      	movs	r3, #34	@ 0x22
 8003ecc:	f8ce 3000 	str.w	r3, [lr]
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	b932      	cbnz	r2, 8003ee2 <_strtoul_l.constprop.0+0xd2>
 8003ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ed8:	b107      	cbz	r7, 8003edc <_strtoul_l.constprop.0+0xcc>
 8003eda:	4240      	negs	r0, r0
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d0f9      	beq.n	8003ed4 <_strtoul_l.constprop.0+0xc4>
 8003ee0:	b106      	cbz	r6, 8003ee4 <_strtoul_l.constprop.0+0xd4>
 8003ee2:	1e69      	subs	r1, r5, #1
 8003ee4:	6011      	str	r1, [r2, #0]
 8003ee6:	e7f5      	b.n	8003ed4 <_strtoul_l.constprop.0+0xc4>
 8003ee8:	08005f8f 	.word	0x08005f8f

08003eec <_strtoul_r>:
 8003eec:	f7ff bf90 	b.w	8003e10 <_strtoul_l.constprop.0>

08003ef0 <strtoul>:
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <strtoul+0x10>)
 8003ef8:	6800      	ldr	r0, [r0, #0]
 8003efa:	f7ff bf89 	b.w	8003e10 <_strtoul_l.constprop.0>
 8003efe:	bf00      	nop
 8003f00:	2000002c 	.word	0x2000002c

08003f04 <__ssputs_r>:
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	688e      	ldr	r6, [r1, #8]
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	42be      	cmp	r6, r7
 8003f0e:	680b      	ldr	r3, [r1, #0]
 8003f10:	4682      	mov	sl, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	4690      	mov	r8, r2
 8003f16:	d82d      	bhi.n	8003f74 <__ssputs_r+0x70>
 8003f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f20:	d026      	beq.n	8003f70 <__ssputs_r+0x6c>
 8003f22:	6965      	ldr	r5, [r4, #20]
 8003f24:	6909      	ldr	r1, [r1, #16]
 8003f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f2a:	eba3 0901 	sub.w	r9, r3, r1
 8003f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f32:	1c7b      	adds	r3, r7, #1
 8003f34:	444b      	add	r3, r9
 8003f36:	106d      	asrs	r5, r5, #1
 8003f38:	429d      	cmp	r5, r3
 8003f3a:	bf38      	it	cc
 8003f3c:	461d      	movcc	r5, r3
 8003f3e:	0553      	lsls	r3, r2, #21
 8003f40:	d527      	bpl.n	8003f92 <__ssputs_r+0x8e>
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7ff fed8 	bl	8003cf8 <_malloc_r>
 8003f48:	4606      	mov	r6, r0
 8003f4a:	b360      	cbz	r0, 8003fa6 <__ssputs_r+0xa2>
 8003f4c:	6921      	ldr	r1, [r4, #16]
 8003f4e:	464a      	mov	r2, r9
 8003f50:	f000 fc8c 	bl	800486c <memcpy>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	6126      	str	r6, [r4, #16]
 8003f62:	6165      	str	r5, [r4, #20]
 8003f64:	444e      	add	r6, r9
 8003f66:	eba5 0509 	sub.w	r5, r5, r9
 8003f6a:	6026      	str	r6, [r4, #0]
 8003f6c:	60a5      	str	r5, [r4, #8]
 8003f6e:	463e      	mov	r6, r7
 8003f70:	42be      	cmp	r6, r7
 8003f72:	d900      	bls.n	8003f76 <__ssputs_r+0x72>
 8003f74:	463e      	mov	r6, r7
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	f000 fb90 	bl	80046a0 <memmove>
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	1b9b      	subs	r3, r3, r6
 8003f84:	60a3      	str	r3, [r4, #8]
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4433      	add	r3, r6
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f92:	462a      	mov	r2, r5
 8003f94:	f000 fc8c 	bl	80048b0 <_realloc_r>
 8003f98:	4606      	mov	r6, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1e0      	bne.n	8003f60 <__ssputs_r+0x5c>
 8003f9e:	6921      	ldr	r1, [r4, #16]
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	f7ff fde9 	bl	8003b78 <_free_r>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	f8ca 3000 	str.w	r3, [sl]
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e7e9      	b.n	8003f8e <__ssputs_r+0x8a>
	...

08003fbc <_svfiprintf_r>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	4698      	mov	r8, r3
 8003fc2:	898b      	ldrh	r3, [r1, #12]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	b09d      	sub	sp, #116	@ 0x74
 8003fc8:	4607      	mov	r7, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	d510      	bpl.n	8003ff2 <_svfiprintf_r+0x36>
 8003fd0:	690b      	ldr	r3, [r1, #16]
 8003fd2:	b973      	cbnz	r3, 8003ff2 <_svfiprintf_r+0x36>
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	f7ff fe8f 	bl	8003cf8 <_malloc_r>
 8003fda:	6028      	str	r0, [r5, #0]
 8003fdc:	6128      	str	r0, [r5, #16]
 8003fde:	b930      	cbnz	r0, 8003fee <_svfiprintf_r+0x32>
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	b01d      	add	sp, #116	@ 0x74
 8003fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	2340      	movs	r3, #64	@ 0x40
 8003ff0:	616b      	str	r3, [r5, #20]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004000:	2330      	movs	r3, #48	@ 0x30
 8004002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041a0 <_svfiprintf_r+0x1e4>
 8004006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800400a:	f04f 0901 	mov.w	r9, #1
 800400e:	4623      	mov	r3, r4
 8004010:	469a      	mov	sl, r3
 8004012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004016:	b10a      	cbz	r2, 800401c <_svfiprintf_r+0x60>
 8004018:	2a25      	cmp	r2, #37	@ 0x25
 800401a:	d1f9      	bne.n	8004010 <_svfiprintf_r+0x54>
 800401c:	ebba 0b04 	subs.w	fp, sl, r4
 8004020:	d00b      	beq.n	800403a <_svfiprintf_r+0x7e>
 8004022:	465b      	mov	r3, fp
 8004024:	4622      	mov	r2, r4
 8004026:	4629      	mov	r1, r5
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ff6b 	bl	8003f04 <__ssputs_r>
 800402e:	3001      	adds	r0, #1
 8004030:	f000 80a7 	beq.w	8004182 <_svfiprintf_r+0x1c6>
 8004034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004036:	445a      	add	r2, fp
 8004038:	9209      	str	r2, [sp, #36]	@ 0x24
 800403a:	f89a 3000 	ldrb.w	r3, [sl]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 809f 	beq.w	8004182 <_svfiprintf_r+0x1c6>
 8004044:	2300      	movs	r3, #0
 8004046:	f04f 32ff 	mov.w	r2, #4294967295
 800404a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800404e:	f10a 0a01 	add.w	sl, sl, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	9307      	str	r3, [sp, #28]
 8004056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800405a:	931a      	str	r3, [sp, #104]	@ 0x68
 800405c:	4654      	mov	r4, sl
 800405e:	2205      	movs	r2, #5
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	484e      	ldr	r0, [pc, #312]	@ (80041a0 <_svfiprintf_r+0x1e4>)
 8004066:	f7fc f8eb 	bl	8000240 <memchr>
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	b9d8      	cbnz	r0, 80040a6 <_svfiprintf_r+0xea>
 800406e:	06d0      	lsls	r0, r2, #27
 8004070:	bf44      	itt	mi
 8004072:	2320      	movmi	r3, #32
 8004074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004078:	0711      	lsls	r1, r2, #28
 800407a:	bf44      	itt	mi
 800407c:	232b      	movmi	r3, #43	@ 0x2b
 800407e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b2a      	cmp	r3, #42	@ 0x2a
 8004088:	d015      	beq.n	80040b6 <_svfiprintf_r+0xfa>
 800408a:	9a07      	ldr	r2, [sp, #28]
 800408c:	4654      	mov	r4, sl
 800408e:	2000      	movs	r0, #0
 8004090:	f04f 0c0a 	mov.w	ip, #10
 8004094:	4621      	mov	r1, r4
 8004096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409a:	3b30      	subs	r3, #48	@ 0x30
 800409c:	2b09      	cmp	r3, #9
 800409e:	d94b      	bls.n	8004138 <_svfiprintf_r+0x17c>
 80040a0:	b1b0      	cbz	r0, 80040d0 <_svfiprintf_r+0x114>
 80040a2:	9207      	str	r2, [sp, #28]
 80040a4:	e014      	b.n	80040d0 <_svfiprintf_r+0x114>
 80040a6:	eba0 0308 	sub.w	r3, r0, r8
 80040aa:	fa09 f303 	lsl.w	r3, r9, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	46a2      	mov	sl, r4
 80040b4:	e7d2      	b.n	800405c <_svfiprintf_r+0xa0>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	1d19      	adds	r1, r3, #4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	9103      	str	r1, [sp, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbb      	ittet	lt
 80040c2:	425b      	neglt	r3, r3
 80040c4:	f042 0202 	orrlt.w	r2, r2, #2
 80040c8:	9307      	strge	r3, [sp, #28]
 80040ca:	9307      	strlt	r3, [sp, #28]
 80040cc:	bfb8      	it	lt
 80040ce:	9204      	strlt	r2, [sp, #16]
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80040d4:	d10a      	bne.n	80040ec <_svfiprintf_r+0x130>
 80040d6:	7863      	ldrb	r3, [r4, #1]
 80040d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040da:	d132      	bne.n	8004142 <_svfiprintf_r+0x186>
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	9203      	str	r2, [sp, #12]
 80040e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040e8:	3402      	adds	r4, #2
 80040ea:	9305      	str	r3, [sp, #20]
 80040ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041b0 <_svfiprintf_r+0x1f4>
 80040f0:	7821      	ldrb	r1, [r4, #0]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4650      	mov	r0, sl
 80040f6:	f7fc f8a3 	bl	8000240 <memchr>
 80040fa:	b138      	cbz	r0, 800410c <_svfiprintf_r+0x150>
 80040fc:	9b04      	ldr	r3, [sp, #16]
 80040fe:	eba0 000a 	sub.w	r0, r0, sl
 8004102:	2240      	movs	r2, #64	@ 0x40
 8004104:	4082      	lsls	r2, r0
 8004106:	4313      	orrs	r3, r2
 8004108:	3401      	adds	r4, #1
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004110:	4824      	ldr	r0, [pc, #144]	@ (80041a4 <_svfiprintf_r+0x1e8>)
 8004112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004116:	2206      	movs	r2, #6
 8004118:	f7fc f892 	bl	8000240 <memchr>
 800411c:	2800      	cmp	r0, #0
 800411e:	d036      	beq.n	800418e <_svfiprintf_r+0x1d2>
 8004120:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <_svfiprintf_r+0x1ec>)
 8004122:	bb1b      	cbnz	r3, 800416c <_svfiprintf_r+0x1b0>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	3307      	adds	r3, #7
 8004128:	f023 0307 	bic.w	r3, r3, #7
 800412c:	3308      	adds	r3, #8
 800412e:	9303      	str	r3, [sp, #12]
 8004130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004132:	4433      	add	r3, r6
 8004134:	9309      	str	r3, [sp, #36]	@ 0x24
 8004136:	e76a      	b.n	800400e <_svfiprintf_r+0x52>
 8004138:	fb0c 3202 	mla	r2, ip, r2, r3
 800413c:	460c      	mov	r4, r1
 800413e:	2001      	movs	r0, #1
 8004140:	e7a8      	b.n	8004094 <_svfiprintf_r+0xd8>
 8004142:	2300      	movs	r3, #0
 8004144:	3401      	adds	r4, #1
 8004146:	9305      	str	r3, [sp, #20]
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0c0a 	mov.w	ip, #10
 800414e:	4620      	mov	r0, r4
 8004150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004154:	3a30      	subs	r2, #48	@ 0x30
 8004156:	2a09      	cmp	r2, #9
 8004158:	d903      	bls.n	8004162 <_svfiprintf_r+0x1a6>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0c6      	beq.n	80040ec <_svfiprintf_r+0x130>
 800415e:	9105      	str	r1, [sp, #20]
 8004160:	e7c4      	b.n	80040ec <_svfiprintf_r+0x130>
 8004162:	fb0c 2101 	mla	r1, ip, r1, r2
 8004166:	4604      	mov	r4, r0
 8004168:	2301      	movs	r3, #1
 800416a:	e7f0      	b.n	800414e <_svfiprintf_r+0x192>
 800416c:	ab03      	add	r3, sp, #12
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	462a      	mov	r2, r5
 8004172:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <_svfiprintf_r+0x1f0>)
 8004174:	a904      	add	r1, sp, #16
 8004176:	4638      	mov	r0, r7
 8004178:	f3af 8000 	nop.w
 800417c:	1c42      	adds	r2, r0, #1
 800417e:	4606      	mov	r6, r0
 8004180:	d1d6      	bne.n	8004130 <_svfiprintf_r+0x174>
 8004182:	89ab      	ldrh	r3, [r5, #12]
 8004184:	065b      	lsls	r3, r3, #25
 8004186:	f53f af2d 	bmi.w	8003fe4 <_svfiprintf_r+0x28>
 800418a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800418c:	e72c      	b.n	8003fe8 <_svfiprintf_r+0x2c>
 800418e:	ab03      	add	r3, sp, #12
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	462a      	mov	r2, r5
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <_svfiprintf_r+0x1f0>)
 8004196:	a904      	add	r1, sp, #16
 8004198:	4638      	mov	r0, r7
 800419a:	f000 f879 	bl	8004290 <_printf_i>
 800419e:	e7ed      	b.n	800417c <_svfiprintf_r+0x1c0>
 80041a0:	0800608f 	.word	0x0800608f
 80041a4:	08006099 	.word	0x08006099
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003f05 	.word	0x08003f05
 80041b0:	08006095 	.word	0x08006095

080041b4 <_printf_common>:
 80041b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	4616      	mov	r6, r2
 80041ba:	4698      	mov	r8, r3
 80041bc:	688a      	ldr	r2, [r1, #8]
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfb8      	it	lt
 80041c8:	4613      	movlt	r3, r2
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041d0:	4607      	mov	r7, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	b10a      	cbz	r2, 80041da <_printf_common+0x26>
 80041d6:	3301      	adds	r3, #1
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	6833      	ldrmi	r3, [r6, #0]
 80041e2:	3302      	addmi	r3, #2
 80041e4:	6033      	strmi	r3, [r6, #0]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d106      	bne.n	80041fc <_printf_common+0x48>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	6832      	ldr	r2, [r6, #0]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dc26      	bgt.n	800424a <_printf_common+0x96>
 80041fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	3b00      	subs	r3, #0
 8004204:	bf18      	it	ne
 8004206:	2301      	movne	r3, #1
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d42b      	bmi.n	8004264 <_printf_common+0xb0>
 800420c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004210:	4641      	mov	r1, r8
 8004212:	4638      	mov	r0, r7
 8004214:	47c8      	blx	r9
 8004216:	3001      	adds	r0, #1
 8004218:	d01e      	beq.n	8004258 <_printf_common+0xa4>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	2b04      	cmp	r3, #4
 8004224:	bf02      	ittt	eq
 8004226:	68e5      	ldreq	r5, [r4, #12]
 8004228:	6833      	ldreq	r3, [r6, #0]
 800422a:	1aed      	subeq	r5, r5, r3
 800422c:	68a3      	ldr	r3, [r4, #8]
 800422e:	bf0c      	ite	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	2500      	movne	r5, #0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfc4      	itt	gt
 800423a:	1a9b      	subgt	r3, r3, r2
 800423c:	18ed      	addgt	r5, r5, r3
 800423e:	2600      	movs	r6, #0
 8004240:	341a      	adds	r4, #26
 8004242:	42b5      	cmp	r5, r6
 8004244:	d11a      	bne.n	800427c <_printf_common+0xc8>
 8004246:	2000      	movs	r0, #0
 8004248:	e008      	b.n	800425c <_printf_common+0xa8>
 800424a:	2301      	movs	r3, #1
 800424c:	4652      	mov	r2, sl
 800424e:	4641      	mov	r1, r8
 8004250:	4638      	mov	r0, r7
 8004252:	47c8      	blx	r9
 8004254:	3001      	adds	r0, #1
 8004256:	d103      	bne.n	8004260 <_printf_common+0xac>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	3501      	adds	r5, #1
 8004262:	e7c6      	b.n	80041f2 <_printf_common+0x3e>
 8004264:	18e1      	adds	r1, r4, r3
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	2030      	movs	r0, #48	@ 0x30
 800426a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800426e:	4422      	add	r2, r4
 8004270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004278:	3302      	adds	r3, #2
 800427a:	e7c7      	b.n	800420c <_printf_common+0x58>
 800427c:	2301      	movs	r3, #1
 800427e:	4622      	mov	r2, r4
 8004280:	4641      	mov	r1, r8
 8004282:	4638      	mov	r0, r7
 8004284:	47c8      	blx	r9
 8004286:	3001      	adds	r0, #1
 8004288:	d0e6      	beq.n	8004258 <_printf_common+0xa4>
 800428a:	3601      	adds	r6, #1
 800428c:	e7d9      	b.n	8004242 <_printf_common+0x8e>
	...

08004290 <_printf_i>:
 8004290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004294:	7e0f      	ldrb	r7, [r1, #24]
 8004296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004298:	2f78      	cmp	r7, #120	@ 0x78
 800429a:	4691      	mov	r9, r2
 800429c:	4680      	mov	r8, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	469a      	mov	sl, r3
 80042a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042a6:	d807      	bhi.n	80042b8 <_printf_i+0x28>
 80042a8:	2f62      	cmp	r7, #98	@ 0x62
 80042aa:	d80a      	bhi.n	80042c2 <_printf_i+0x32>
 80042ac:	2f00      	cmp	r7, #0
 80042ae:	f000 80d2 	beq.w	8004456 <_printf_i+0x1c6>
 80042b2:	2f58      	cmp	r7, #88	@ 0x58
 80042b4:	f000 80b9 	beq.w	800442a <_printf_i+0x19a>
 80042b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042c0:	e03a      	b.n	8004338 <_printf_i+0xa8>
 80042c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042c6:	2b15      	cmp	r3, #21
 80042c8:	d8f6      	bhi.n	80042b8 <_printf_i+0x28>
 80042ca:	a101      	add	r1, pc, #4	@ (adr r1, 80042d0 <_printf_i+0x40>)
 80042cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d0:	08004329 	.word	0x08004329
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080042b9 	.word	0x080042b9
 80042dc:	080042b9 	.word	0x080042b9
 80042e0:	080042b9 	.word	0x080042b9
 80042e4:	080042b9 	.word	0x080042b9
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	080042b9 	.word	0x080042b9
 80042f0:	080042b9 	.word	0x080042b9
 80042f4:	080042b9 	.word	0x080042b9
 80042f8:	080042b9 	.word	0x080042b9
 80042fc:	0800443d 	.word	0x0800443d
 8004300:	08004367 	.word	0x08004367
 8004304:	080043f7 	.word	0x080043f7
 8004308:	080042b9 	.word	0x080042b9
 800430c:	080042b9 	.word	0x080042b9
 8004310:	0800445f 	.word	0x0800445f
 8004314:	080042b9 	.word	0x080042b9
 8004318:	08004367 	.word	0x08004367
 800431c:	080042b9 	.word	0x080042b9
 8004320:	080042b9 	.word	0x080042b9
 8004324:	080043ff 	.word	0x080043ff
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6032      	str	r2, [r6, #0]
 8004330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e09d      	b.n	8004478 <_printf_i+0x1e8>
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	1d19      	adds	r1, r3, #4
 8004342:	6031      	str	r1, [r6, #0]
 8004344:	0606      	lsls	r6, r0, #24
 8004346:	d501      	bpl.n	800434c <_printf_i+0xbc>
 8004348:	681d      	ldr	r5, [r3, #0]
 800434a:	e003      	b.n	8004354 <_printf_i+0xc4>
 800434c:	0645      	lsls	r5, r0, #25
 800434e:	d5fb      	bpl.n	8004348 <_printf_i+0xb8>
 8004350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004354:	2d00      	cmp	r5, #0
 8004356:	da03      	bge.n	8004360 <_printf_i+0xd0>
 8004358:	232d      	movs	r3, #45	@ 0x2d
 800435a:	426d      	negs	r5, r5
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004360:	4859      	ldr	r0, [pc, #356]	@ (80044c8 <_printf_i+0x238>)
 8004362:	230a      	movs	r3, #10
 8004364:	e011      	b.n	800438a <_printf_i+0xfa>
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	0608      	lsls	r0, r1, #24
 800436c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004370:	d402      	bmi.n	8004378 <_printf_i+0xe8>
 8004372:	0649      	lsls	r1, r1, #25
 8004374:	bf48      	it	mi
 8004376:	b2ad      	uxthmi	r5, r5
 8004378:	2f6f      	cmp	r7, #111	@ 0x6f
 800437a:	4853      	ldr	r0, [pc, #332]	@ (80044c8 <_printf_i+0x238>)
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	bf14      	ite	ne
 8004380:	230a      	movne	r3, #10
 8004382:	2308      	moveq	r3, #8
 8004384:	2100      	movs	r1, #0
 8004386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800438a:	6866      	ldr	r6, [r4, #4]
 800438c:	60a6      	str	r6, [r4, #8]
 800438e:	2e00      	cmp	r6, #0
 8004390:	bfa2      	ittt	ge
 8004392:	6821      	ldrge	r1, [r4, #0]
 8004394:	f021 0104 	bicge.w	r1, r1, #4
 8004398:	6021      	strge	r1, [r4, #0]
 800439a:	b90d      	cbnz	r5, 80043a0 <_printf_i+0x110>
 800439c:	2e00      	cmp	r6, #0
 800439e:	d04b      	beq.n	8004438 <_printf_i+0x1a8>
 80043a0:	4616      	mov	r6, r2
 80043a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a6:	fb03 5711 	mls	r7, r3, r1, r5
 80043aa:	5dc7      	ldrb	r7, [r0, r7]
 80043ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043b0:	462f      	mov	r7, r5
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	460d      	mov	r5, r1
 80043b6:	d9f4      	bls.n	80043a2 <_printf_i+0x112>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d10b      	bne.n	80043d4 <_printf_i+0x144>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07df      	lsls	r7, r3, #31
 80043c0:	d508      	bpl.n	80043d4 <_printf_i+0x144>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	bfde      	ittt	le
 80043ca:	2330      	movle	r3, #48	@ 0x30
 80043cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043d4:	1b92      	subs	r2, r2, r6
 80043d6:	6122      	str	r2, [r4, #16]
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	464b      	mov	r3, r9
 80043de:	aa03      	add	r2, sp, #12
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7ff fee6 	bl	80041b4 <_printf_common>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d14a      	bne.n	8004482 <_printf_i+0x1f2>
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	b004      	add	sp, #16
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f043 0320 	orr.w	r3, r3, #32
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	4833      	ldr	r0, [pc, #204]	@ (80044cc <_printf_i+0x23c>)
 8004400:	2778      	movs	r7, #120	@ 0x78
 8004402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	6831      	ldr	r1, [r6, #0]
 800440a:	061f      	lsls	r7, r3, #24
 800440c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004410:	d402      	bmi.n	8004418 <_printf_i+0x188>
 8004412:	065f      	lsls	r7, r3, #25
 8004414:	bf48      	it	mi
 8004416:	b2ad      	uxthmi	r5, r5
 8004418:	6031      	str	r1, [r6, #0]
 800441a:	07d9      	lsls	r1, r3, #31
 800441c:	bf44      	itt	mi
 800441e:	f043 0320 	orrmi.w	r3, r3, #32
 8004422:	6023      	strmi	r3, [r4, #0]
 8004424:	b11d      	cbz	r5, 800442e <_printf_i+0x19e>
 8004426:	2310      	movs	r3, #16
 8004428:	e7ac      	b.n	8004384 <_printf_i+0xf4>
 800442a:	4827      	ldr	r0, [pc, #156]	@ (80044c8 <_printf_i+0x238>)
 800442c:	e7e9      	b.n	8004402 <_printf_i+0x172>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f023 0320 	bic.w	r3, r3, #32
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	e7f6      	b.n	8004426 <_printf_i+0x196>
 8004438:	4616      	mov	r6, r2
 800443a:	e7bd      	b.n	80043b8 <_printf_i+0x128>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	6825      	ldr	r5, [r4, #0]
 8004440:	6961      	ldr	r1, [r4, #20]
 8004442:	1d18      	adds	r0, r3, #4
 8004444:	6030      	str	r0, [r6, #0]
 8004446:	062e      	lsls	r6, r5, #24
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	d501      	bpl.n	8004450 <_printf_i+0x1c0>
 800444c:	6019      	str	r1, [r3, #0]
 800444e:	e002      	b.n	8004456 <_printf_i+0x1c6>
 8004450:	0668      	lsls	r0, r5, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0x1bc>
 8004454:	8019      	strh	r1, [r3, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	4616      	mov	r6, r2
 800445c:	e7bc      	b.n	80043d8 <_printf_i+0x148>
 800445e:	6833      	ldr	r3, [r6, #0]
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	6032      	str	r2, [r6, #0]
 8004464:	681e      	ldr	r6, [r3, #0]
 8004466:	6862      	ldr	r2, [r4, #4]
 8004468:	2100      	movs	r1, #0
 800446a:	4630      	mov	r0, r6
 800446c:	f7fb fee8 	bl	8000240 <memchr>
 8004470:	b108      	cbz	r0, 8004476 <_printf_i+0x1e6>
 8004472:	1b80      	subs	r0, r0, r6
 8004474:	6060      	str	r0, [r4, #4]
 8004476:	6863      	ldr	r3, [r4, #4]
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	2300      	movs	r3, #0
 800447c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004480:	e7aa      	b.n	80043d8 <_printf_i+0x148>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	4632      	mov	r2, r6
 8004486:	4649      	mov	r1, r9
 8004488:	4640      	mov	r0, r8
 800448a:	47d0      	blx	sl
 800448c:	3001      	adds	r0, #1
 800448e:	d0ad      	beq.n	80043ec <_printf_i+0x15c>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	079b      	lsls	r3, r3, #30
 8004494:	d413      	bmi.n	80044be <_printf_i+0x22e>
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	4298      	cmp	r0, r3
 800449c:	bfb8      	it	lt
 800449e:	4618      	movlt	r0, r3
 80044a0:	e7a6      	b.n	80043f0 <_printf_i+0x160>
 80044a2:	2301      	movs	r3, #1
 80044a4:	4632      	mov	r2, r6
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	47d0      	blx	sl
 80044ac:	3001      	adds	r0, #1
 80044ae:	d09d      	beq.n	80043ec <_printf_i+0x15c>
 80044b0:	3501      	adds	r5, #1
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	9903      	ldr	r1, [sp, #12]
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dcf2      	bgt.n	80044a2 <_printf_i+0x212>
 80044bc:	e7eb      	b.n	8004496 <_printf_i+0x206>
 80044be:	2500      	movs	r5, #0
 80044c0:	f104 0619 	add.w	r6, r4, #25
 80044c4:	e7f5      	b.n	80044b2 <_printf_i+0x222>
 80044c6:	bf00      	nop
 80044c8:	080060a0 	.word	0x080060a0
 80044cc:	080060b1 	.word	0x080060b1

080044d0 <__sflush_r>:
 80044d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	0716      	lsls	r6, r2, #28
 80044da:	4605      	mov	r5, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	d454      	bmi.n	800458a <__sflush_r+0xba>
 80044e0:	684b      	ldr	r3, [r1, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dc02      	bgt.n	80044ec <__sflush_r+0x1c>
 80044e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dd48      	ble.n	800457e <__sflush_r+0xae>
 80044ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	d045      	beq.n	800457e <__sflush_r+0xae>
 80044f2:	2300      	movs	r3, #0
 80044f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044f8:	682f      	ldr	r7, [r5, #0]
 80044fa:	6a21      	ldr	r1, [r4, #32]
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	d030      	beq.n	8004562 <__sflush_r+0x92>
 8004500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	0759      	lsls	r1, r3, #29
 8004506:	d505      	bpl.n	8004514 <__sflush_r+0x44>
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800450e:	b10b      	cbz	r3, 8004514 <__sflush_r+0x44>
 8004510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	2300      	movs	r3, #0
 8004516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004518:	6a21      	ldr	r1, [r4, #32]
 800451a:	4628      	mov	r0, r5
 800451c:	47b0      	blx	r6
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	d106      	bne.n	8004532 <__sflush_r+0x62>
 8004524:	6829      	ldr	r1, [r5, #0]
 8004526:	291d      	cmp	r1, #29
 8004528:	d82b      	bhi.n	8004582 <__sflush_r+0xb2>
 800452a:	4a2a      	ldr	r2, [pc, #168]	@ (80045d4 <__sflush_r+0x104>)
 800452c:	410a      	asrs	r2, r1
 800452e:	07d6      	lsls	r6, r2, #31
 8004530:	d427      	bmi.n	8004582 <__sflush_r+0xb2>
 8004532:	2200      	movs	r2, #0
 8004534:	6062      	str	r2, [r4, #4]
 8004536:	04d9      	lsls	r1, r3, #19
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	6022      	str	r2, [r4, #0]
 800453c:	d504      	bpl.n	8004548 <__sflush_r+0x78>
 800453e:	1c42      	adds	r2, r0, #1
 8004540:	d101      	bne.n	8004546 <__sflush_r+0x76>
 8004542:	682b      	ldr	r3, [r5, #0]
 8004544:	b903      	cbnz	r3, 8004548 <__sflush_r+0x78>
 8004546:	6560      	str	r0, [r4, #84]	@ 0x54
 8004548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800454a:	602f      	str	r7, [r5, #0]
 800454c:	b1b9      	cbz	r1, 800457e <__sflush_r+0xae>
 800454e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004552:	4299      	cmp	r1, r3
 8004554:	d002      	beq.n	800455c <__sflush_r+0x8c>
 8004556:	4628      	mov	r0, r5
 8004558:	f7ff fb0e 	bl	8003b78 <_free_r>
 800455c:	2300      	movs	r3, #0
 800455e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004560:	e00d      	b.n	800457e <__sflush_r+0xae>
 8004562:	2301      	movs	r3, #1
 8004564:	4628      	mov	r0, r5
 8004566:	47b0      	blx	r6
 8004568:	4602      	mov	r2, r0
 800456a:	1c50      	adds	r0, r2, #1
 800456c:	d1c9      	bne.n	8004502 <__sflush_r+0x32>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0c6      	beq.n	8004502 <__sflush_r+0x32>
 8004574:	2b1d      	cmp	r3, #29
 8004576:	d001      	beq.n	800457c <__sflush_r+0xac>
 8004578:	2b16      	cmp	r3, #22
 800457a:	d11e      	bne.n	80045ba <__sflush_r+0xea>
 800457c:	602f      	str	r7, [r5, #0]
 800457e:	2000      	movs	r0, #0
 8004580:	e022      	b.n	80045c8 <__sflush_r+0xf8>
 8004582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004586:	b21b      	sxth	r3, r3
 8004588:	e01b      	b.n	80045c2 <__sflush_r+0xf2>
 800458a:	690f      	ldr	r7, [r1, #16]
 800458c:	2f00      	cmp	r7, #0
 800458e:	d0f6      	beq.n	800457e <__sflush_r+0xae>
 8004590:	0793      	lsls	r3, r2, #30
 8004592:	680e      	ldr	r6, [r1, #0]
 8004594:	bf08      	it	eq
 8004596:	694b      	ldreq	r3, [r1, #20]
 8004598:	600f      	str	r7, [r1, #0]
 800459a:	bf18      	it	ne
 800459c:	2300      	movne	r3, #0
 800459e:	eba6 0807 	sub.w	r8, r6, r7
 80045a2:	608b      	str	r3, [r1, #8]
 80045a4:	f1b8 0f00 	cmp.w	r8, #0
 80045a8:	dde9      	ble.n	800457e <__sflush_r+0xae>
 80045aa:	6a21      	ldr	r1, [r4, #32]
 80045ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045ae:	4643      	mov	r3, r8
 80045b0:	463a      	mov	r2, r7
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b0      	blx	r6
 80045b6:	2800      	cmp	r0, #0
 80045b8:	dc08      	bgt.n	80045cc <__sflush_r+0xfc>
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	4407      	add	r7, r0
 80045ce:	eba8 0800 	sub.w	r8, r8, r0
 80045d2:	e7e7      	b.n	80045a4 <__sflush_r+0xd4>
 80045d4:	dfbffffe 	.word	0xdfbffffe

080045d8 <_fflush_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	4605      	mov	r5, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	b913      	cbnz	r3, 80045e8 <_fflush_r+0x10>
 80045e2:	2500      	movs	r5, #0
 80045e4:	4628      	mov	r0, r5
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	b118      	cbz	r0, 80045f2 <_fflush_r+0x1a>
 80045ea:	6a03      	ldr	r3, [r0, #32]
 80045ec:	b90b      	cbnz	r3, 80045f2 <_fflush_r+0x1a>
 80045ee:	f7fe fd6b 	bl	80030c8 <__sinit>
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f3      	beq.n	80045e2 <_fflush_r+0xa>
 80045fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045fc:	07d0      	lsls	r0, r2, #31
 80045fe:	d404      	bmi.n	800460a <_fflush_r+0x32>
 8004600:	0599      	lsls	r1, r3, #22
 8004602:	d402      	bmi.n	800460a <_fflush_r+0x32>
 8004604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004606:	f7ff fa8d 	bl	8003b24 <__retarget_lock_acquire_recursive>
 800460a:	4628      	mov	r0, r5
 800460c:	4621      	mov	r1, r4
 800460e:	f7ff ff5f 	bl	80044d0 <__sflush_r>
 8004612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004614:	07da      	lsls	r2, r3, #31
 8004616:	4605      	mov	r5, r0
 8004618:	d4e4      	bmi.n	80045e4 <_fflush_r+0xc>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d4e1      	bmi.n	80045e4 <_fflush_r+0xc>
 8004620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004622:	f7ff fa81 	bl	8003b28 <__retarget_lock_release_recursive>
 8004626:	e7dd      	b.n	80045e4 <_fflush_r+0xc>

08004628 <fiprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b503      	push	{r0, r1, lr}
 800462c:	4601      	mov	r1, r0
 800462e:	ab03      	add	r3, sp, #12
 8004630:	4805      	ldr	r0, [pc, #20]	@ (8004648 <fiprintf+0x20>)
 8004632:	f853 2b04 	ldr.w	r2, [r3], #4
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	f000 fb5d 	bl	8004cf8 <_vfiprintf_r>
 800463e:	b002      	add	sp, #8
 8004640:	f85d eb04 	ldr.w	lr, [sp], #4
 8004644:	b003      	add	sp, #12
 8004646:	4770      	bx	lr
 8004648:	2000002c 	.word	0x2000002c

0800464c <siscanf>:
 800464c:	b40e      	push	{r1, r2, r3}
 800464e:	b530      	push	{r4, r5, lr}
 8004650:	b09c      	sub	sp, #112	@ 0x70
 8004652:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004654:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004658:	f854 5b04 	ldr.w	r5, [r4], #4
 800465c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004660:	9002      	str	r0, [sp, #8]
 8004662:	9006      	str	r0, [sp, #24]
 8004664:	f7fb fdde 	bl	8000224 <strlen>
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <siscanf+0x4c>)
 800466a:	9003      	str	r0, [sp, #12]
 800466c:	9007      	str	r0, [sp, #28]
 800466e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004670:	480a      	ldr	r0, [pc, #40]	@ (800469c <siscanf+0x50>)
 8004672:	9401      	str	r4, [sp, #4]
 8004674:	2300      	movs	r3, #0
 8004676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004678:	9314      	str	r3, [sp, #80]	@ 0x50
 800467a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800467e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004682:	462a      	mov	r2, r5
 8004684:	4623      	mov	r3, r4
 8004686:	a902      	add	r1, sp, #8
 8004688:	6800      	ldr	r0, [r0, #0]
 800468a:	f000 f997 	bl	80049bc <__ssvfiscanf_r>
 800468e:	b01c      	add	sp, #112	@ 0x70
 8004690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004694:	b003      	add	sp, #12
 8004696:	4770      	bx	lr
 8004698:	08003197 	.word	0x08003197
 800469c:	2000002c 	.word	0x2000002c

080046a0 <memmove>:
 80046a0:	4288      	cmp	r0, r1
 80046a2:	b510      	push	{r4, lr}
 80046a4:	eb01 0402 	add.w	r4, r1, r2
 80046a8:	d902      	bls.n	80046b0 <memmove+0x10>
 80046aa:	4284      	cmp	r4, r0
 80046ac:	4623      	mov	r3, r4
 80046ae:	d807      	bhi.n	80046c0 <memmove+0x20>
 80046b0:	1e43      	subs	r3, r0, #1
 80046b2:	42a1      	cmp	r1, r4
 80046b4:	d008      	beq.n	80046c8 <memmove+0x28>
 80046b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046be:	e7f8      	b.n	80046b2 <memmove+0x12>
 80046c0:	4402      	add	r2, r0
 80046c2:	4601      	mov	r1, r0
 80046c4:	428a      	cmp	r2, r1
 80046c6:	d100      	bne.n	80046ca <memmove+0x2a>
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046d2:	e7f7      	b.n	80046c4 <memmove+0x24>

080046d4 <strncmp>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	b16a      	cbz	r2, 80046f4 <strncmp+0x20>
 80046d8:	3901      	subs	r1, #1
 80046da:	1884      	adds	r4, r0, r2
 80046dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d103      	bne.n	80046f0 <strncmp+0x1c>
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d001      	beq.n	80046f0 <strncmp+0x1c>
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d1f5      	bne.n	80046dc <strncmp+0x8>
 80046f0:	1ad0      	subs	r0, r2, r3
 80046f2:	bd10      	pop	{r4, pc}
 80046f4:	4610      	mov	r0, r2
 80046f6:	e7fc      	b.n	80046f2 <strncmp+0x1e>

080046f8 <__gettzinfo>:
 80046f8:	4800      	ldr	r0, [pc, #0]	@ (80046fc <__gettzinfo+0x4>)
 80046fa:	4770      	bx	lr
 80046fc:	20000080 	.word	0x20000080

08004700 <gmtime_r>:
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	4a4d      	ldr	r2, [pc, #308]	@ (800483c <gmtime_r+0x13c>)
 8004706:	460c      	mov	r4, r1
 8004708:	2300      	movs	r3, #0
 800470a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800470e:	f7fb fde7 	bl	80002e0 <__aeabi_ldivmod>
 8004712:	2a00      	cmp	r2, #0
 8004714:	bfbc      	itt	lt
 8004716:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800471a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800471e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004722:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8004726:	fbb2 f3f1 	udiv	r3, r2, r1
 800472a:	fb01 2213 	mls	r2, r1, r3, r2
 800472e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8004732:	bfac      	ite	ge
 8004734:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8004738:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	fbb2 f3f1 	udiv	r3, r2, r1
 8004742:	fb01 2213 	mls	r2, r1, r3, r2
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	6022      	str	r2, [r4, #0]
 800474a:	1cc3      	adds	r3, r0, #3
 800474c:	2207      	movs	r2, #7
 800474e:	fb93 f2f2 	sdiv	r2, r3, r2
 8004752:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	bf48      	it	mi
 800475a:	3307      	addmi	r3, #7
 800475c:	2800      	cmp	r0, #0
 800475e:	61a3      	str	r3, [r4, #24]
 8004760:	bfb8      	it	lt
 8004762:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8004766:	4936      	ldr	r1, [pc, #216]	@ (8004840 <gmtime_r+0x140>)
 8004768:	bfae      	itee	ge
 800476a:	fb90 f1f1 	sdivge	r1, r0, r1
 800476e:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8004772:	fb93 f1f1 	sdivlt	r1, r3, r1
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <gmtime_r+0x144>)
 8004778:	fb03 0001 	mla	r0, r3, r1, r0
 800477c:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8004780:	fbb0 f3f3 	udiv	r3, r0, r3
 8004784:	4403      	add	r3, r0
 8004786:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800478a:	fbb0 f2fc 	udiv	r2, r0, ip
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	f240 176d 	movw	r7, #365	@ 0x16d
 8004794:	4a2c      	ldr	r2, [pc, #176]	@ (8004848 <gmtime_r+0x148>)
 8004796:	fbb0 f2f2 	udiv	r2, r0, r2
 800479a:	2664      	movs	r6, #100	@ 0x64
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	fbb3 f2f7 	udiv	r2, r3, r7
 80047a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80047a6:	fbb2 f5f6 	udiv	r5, r2, r6
 80047aa:	1aeb      	subs	r3, r5, r3
 80047ac:	4403      	add	r3, r0
 80047ae:	fb07 3312 	mls	r3, r7, r2, r3
 80047b2:	2099      	movs	r0, #153	@ 0x99
 80047b4:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80047b8:	3702      	adds	r7, #2
 80047ba:	f103 0e01 	add.w	lr, r3, #1
 80047be:	fbb7 fcf0 	udiv	ip, r7, r0
 80047c2:	fb00 f00c 	mul.w	r0, r0, ip
 80047c6:	3002      	adds	r0, #2
 80047c8:	f04f 0805 	mov.w	r8, #5
 80047cc:	fbb0 f0f8 	udiv	r0, r0, r8
 80047d0:	ebae 0000 	sub.w	r0, lr, r0
 80047d4:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 80047d8:	4577      	cmp	r7, lr
 80047da:	bf8c      	ite	hi
 80047dc:	f06f 0709 	mvnhi.w	r7, #9
 80047e0:	2702      	movls	r7, #2
 80047e2:	4467      	add	r7, ip
 80047e4:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 80047e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ec:	2f01      	cmp	r7, #1
 80047ee:	bf98      	it	ls
 80047f0:	3101      	addls	r1, #1
 80047f2:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80047f6:	d30c      	bcc.n	8004812 <gmtime_r+0x112>
 80047f8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80047fc:	61e3      	str	r3, [r4, #28]
 80047fe:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8004802:	2300      	movs	r3, #0
 8004804:	60e0      	str	r0, [r4, #12]
 8004806:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800480a:	6223      	str	r3, [r4, #32]
 800480c:	4620      	mov	r0, r4
 800480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004812:	f012 0f03 	tst.w	r2, #3
 8004816:	d102      	bne.n	800481e <gmtime_r+0x11e>
 8004818:	fb06 2515 	mls	r5, r6, r5, r2
 800481c:	b95d      	cbnz	r5, 8004836 <gmtime_r+0x136>
 800481e:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8004822:	fbb2 f6f5 	udiv	r6, r2, r5
 8004826:	fb05 2216 	mls	r2, r5, r6, r2
 800482a:	fab2 f282 	clz	r2, r2
 800482e:	0952      	lsrs	r2, r2, #5
 8004830:	333b      	adds	r3, #59	@ 0x3b
 8004832:	4413      	add	r3, r2
 8004834:	e7e2      	b.n	80047fc <gmtime_r+0xfc>
 8004836:	2201      	movs	r2, #1
 8004838:	e7fa      	b.n	8004830 <gmtime_r+0x130>
 800483a:	bf00      	nop
 800483c:	00015180 	.word	0x00015180
 8004840:	00023ab1 	.word	0x00023ab1
 8004844:	fffdc54f 	.word	0xfffdc54f
 8004848:	00023ab0 	.word	0x00023ab0

0800484c <_sbrk_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d06      	ldr	r5, [pc, #24]	@ (8004868 <_sbrk_r+0x1c>)
 8004850:	2300      	movs	r3, #0
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7fc f9a8 	bl	8000bac <_sbrk>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_sbrk_r+0x1a>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_sbrk_r+0x1a>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200006bc 	.word	0x200006bc

0800486c <memcpy>:
 800486c:	440a      	add	r2, r1
 800486e:	4291      	cmp	r1, r2
 8004870:	f100 33ff 	add.w	r3, r0, #4294967295
 8004874:	d100      	bne.n	8004878 <memcpy+0xc>
 8004876:	4770      	bx	lr
 8004878:	b510      	push	{r4, lr}
 800487a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800487e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004882:	4291      	cmp	r1, r2
 8004884:	d1f9      	bne.n	800487a <memcpy+0xe>
 8004886:	bd10      	pop	{r4, pc}

08004888 <abort>:
 8004888:	b508      	push	{r3, lr}
 800488a:	2006      	movs	r0, #6
 800488c:	f000 fdca 	bl	8005424 <raise>
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc f912 	bl	8000aba <_exit>
	...

08004898 <__env_lock>:
 8004898:	4801      	ldr	r0, [pc, #4]	@ (80048a0 <__env_lock+0x8>)
 800489a:	f7ff b943 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 800489e:	bf00      	nop
 80048a0:	200006c1 	.word	0x200006c1

080048a4 <__env_unlock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__env_unlock+0x8>)
 80048a6:	f7ff b93f 	b.w	8003b28 <__retarget_lock_release_recursive>
 80048aa:	bf00      	nop
 80048ac:	200006c1 	.word	0x200006c1

080048b0 <_realloc_r>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	4680      	mov	r8, r0
 80048b6:	4615      	mov	r5, r2
 80048b8:	460c      	mov	r4, r1
 80048ba:	b921      	cbnz	r1, 80048c6 <_realloc_r+0x16>
 80048bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	4611      	mov	r1, r2
 80048c2:	f7ff ba19 	b.w	8003cf8 <_malloc_r>
 80048c6:	b92a      	cbnz	r2, 80048d4 <_realloc_r+0x24>
 80048c8:	f7ff f956 	bl	8003b78 <_free_r>
 80048cc:	2400      	movs	r4, #0
 80048ce:	4620      	mov	r0, r4
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	f000 fdc2 	bl	800545c <_malloc_usable_size_r>
 80048d8:	4285      	cmp	r5, r0
 80048da:	4606      	mov	r6, r0
 80048dc:	d802      	bhi.n	80048e4 <_realloc_r+0x34>
 80048de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048e2:	d8f4      	bhi.n	80048ce <_realloc_r+0x1e>
 80048e4:	4629      	mov	r1, r5
 80048e6:	4640      	mov	r0, r8
 80048e8:	f7ff fa06 	bl	8003cf8 <_malloc_r>
 80048ec:	4607      	mov	r7, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d0ec      	beq.n	80048cc <_realloc_r+0x1c>
 80048f2:	42b5      	cmp	r5, r6
 80048f4:	462a      	mov	r2, r5
 80048f6:	4621      	mov	r1, r4
 80048f8:	bf28      	it	cs
 80048fa:	4632      	movcs	r2, r6
 80048fc:	f7ff ffb6 	bl	800486c <memcpy>
 8004900:	4621      	mov	r1, r4
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff f938 	bl	8003b78 <_free_r>
 8004908:	463c      	mov	r4, r7
 800490a:	e7e0      	b.n	80048ce <_realloc_r+0x1e>

0800490c <_sungetc_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	1c4b      	adds	r3, r1, #1
 8004910:	4614      	mov	r4, r2
 8004912:	d103      	bne.n	800491c <_sungetc_r+0x10>
 8004914:	f04f 35ff 	mov.w	r5, #4294967295
 8004918:	4628      	mov	r0, r5
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	8993      	ldrh	r3, [r2, #12]
 800491e:	f023 0320 	bic.w	r3, r3, #32
 8004922:	8193      	strh	r3, [r2, #12]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004928:	b2cd      	uxtb	r5, r1
 800492a:	b18a      	cbz	r2, 8004950 <_sungetc_r+0x44>
 800492c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800492e:	429a      	cmp	r2, r3
 8004930:	dd08      	ble.n	8004944 <_sungetc_r+0x38>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	1e5a      	subs	r2, r3, #1
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	f803 5c01 	strb.w	r5, [r3, #-1]
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	3301      	adds	r3, #1
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	e7e9      	b.n	8004918 <_sungetc_r+0xc>
 8004944:	4621      	mov	r1, r4
 8004946:	f000 fc76 	bl	8005236 <__submore>
 800494a:	2800      	cmp	r0, #0
 800494c:	d0f1      	beq.n	8004932 <_sungetc_r+0x26>
 800494e:	e7e1      	b.n	8004914 <_sungetc_r+0x8>
 8004950:	6921      	ldr	r1, [r4, #16]
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	b141      	cbz	r1, 8004968 <_sungetc_r+0x5c>
 8004956:	4291      	cmp	r1, r2
 8004958:	d206      	bcs.n	8004968 <_sungetc_r+0x5c>
 800495a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800495e:	42a9      	cmp	r1, r5
 8004960:	d102      	bne.n	8004968 <_sungetc_r+0x5c>
 8004962:	3a01      	subs	r2, #1
 8004964:	6022      	str	r2, [r4, #0]
 8004966:	e7ea      	b.n	800493e <_sungetc_r+0x32>
 8004968:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800496c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004970:	6363      	str	r3, [r4, #52]	@ 0x34
 8004972:	2303      	movs	r3, #3
 8004974:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004976:	4623      	mov	r3, r4
 8004978:	f803 5f46 	strb.w	r5, [r3, #70]!
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	2301      	movs	r3, #1
 8004980:	e7de      	b.n	8004940 <_sungetc_r+0x34>

08004982 <__ssrefill_r>:
 8004982:	b510      	push	{r4, lr}
 8004984:	460c      	mov	r4, r1
 8004986:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004988:	b169      	cbz	r1, 80049a6 <__ssrefill_r+0x24>
 800498a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800498e:	4299      	cmp	r1, r3
 8004990:	d001      	beq.n	8004996 <__ssrefill_r+0x14>
 8004992:	f7ff f8f1 	bl	8003b78 <_free_r>
 8004996:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	2000      	movs	r0, #0
 800499c:	6360      	str	r0, [r4, #52]	@ 0x34
 800499e:	b113      	cbz	r3, 80049a6 <__ssrefill_r+0x24>
 80049a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	2300      	movs	r3, #0
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	e7f3      	b.n	80049a4 <__ssrefill_r+0x22>

080049bc <__ssvfiscanf_r>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	460c      	mov	r4, r1
 80049c2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80049c6:	2100      	movs	r1, #0
 80049c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80049cc:	49a5      	ldr	r1, [pc, #660]	@ (8004c64 <__ssvfiscanf_r+0x2a8>)
 80049ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80049d0:	f10d 0804 	add.w	r8, sp, #4
 80049d4:	49a4      	ldr	r1, [pc, #656]	@ (8004c68 <__ssvfiscanf_r+0x2ac>)
 80049d6:	4fa5      	ldr	r7, [pc, #660]	@ (8004c6c <__ssvfiscanf_r+0x2b0>)
 80049d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80049dc:	4606      	mov	r6, r0
 80049de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	7813      	ldrb	r3, [r2, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8158 	beq.w	8004c9a <__ssvfiscanf_r+0x2de>
 80049ea:	5cf9      	ldrb	r1, [r7, r3]
 80049ec:	f011 0108 	ands.w	r1, r1, #8
 80049f0:	f102 0501 	add.w	r5, r2, #1
 80049f4:	d019      	beq.n	8004a2a <__ssvfiscanf_r+0x6e>
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dd0f      	ble.n	8004a1c <__ssvfiscanf_r+0x60>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	5cba      	ldrb	r2, [r7, r2]
 8004a02:	0712      	lsls	r2, r2, #28
 8004a04:	d401      	bmi.n	8004a0a <__ssvfiscanf_r+0x4e>
 8004a06:	462a      	mov	r2, r5
 8004a08:	e7eb      	b.n	80049e2 <__ssvfiscanf_r+0x26>
 8004a0a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004a0c:	3201      	adds	r2, #1
 8004a0e:	9245      	str	r2, [sp, #276]	@ 0x114
 8004a10:	6862      	ldr	r2, [r4, #4]
 8004a12:	3301      	adds	r3, #1
 8004a14:	3a01      	subs	r2, #1
 8004a16:	6062      	str	r2, [r4, #4]
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	e7ec      	b.n	80049f6 <__ssvfiscanf_r+0x3a>
 8004a1c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4630      	mov	r0, r6
 8004a22:	4798      	blx	r3
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0e9      	beq.n	80049fc <__ssvfiscanf_r+0x40>
 8004a28:	e7ed      	b.n	8004a06 <__ssvfiscanf_r+0x4a>
 8004a2a:	2b25      	cmp	r3, #37	@ 0x25
 8004a2c:	d012      	beq.n	8004a54 <__ssvfiscanf_r+0x98>
 8004a2e:	4699      	mov	r9, r3
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f340 8093 	ble.w	8004b5e <__ssvfiscanf_r+0x1a2>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	7813      	ldrb	r3, [r2, #0]
 8004a3c:	454b      	cmp	r3, r9
 8004a3e:	f040 812c 	bne.w	8004c9a <__ssvfiscanf_r+0x2de>
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	6022      	str	r2, [r4, #0]
 8004a50:	9345      	str	r3, [sp, #276]	@ 0x114
 8004a52:	e7d8      	b.n	8004a06 <__ssvfiscanf_r+0x4a>
 8004a54:	9141      	str	r1, [sp, #260]	@ 0x104
 8004a56:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004a58:	7853      	ldrb	r3, [r2, #1]
 8004a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5c:	bf02      	ittt	eq
 8004a5e:	2310      	moveq	r3, #16
 8004a60:	1c95      	addeq	r5, r2, #2
 8004a62:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004a64:	220a      	movs	r2, #10
 8004a66:	46a9      	mov	r9, r5
 8004a68:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004a6c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d91e      	bls.n	8004ab2 <__ssvfiscanf_r+0xf6>
 8004a74:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004c70 <__ssvfiscanf_r+0x2b4>
 8004a78:	2203      	movs	r2, #3
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	f7fb fbe0 	bl	8000240 <memchr>
 8004a80:	b138      	cbz	r0, 8004a92 <__ssvfiscanf_r+0xd6>
 8004a82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004a84:	eba0 000a 	sub.w	r0, r0, sl
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4083      	lsls	r3, r0
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004a90:	464d      	mov	r5, r9
 8004a92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a96:	2b78      	cmp	r3, #120	@ 0x78
 8004a98:	d806      	bhi.n	8004aa8 <__ssvfiscanf_r+0xec>
 8004a9a:	2b57      	cmp	r3, #87	@ 0x57
 8004a9c:	d810      	bhi.n	8004ac0 <__ssvfiscanf_r+0x104>
 8004a9e:	2b25      	cmp	r3, #37	@ 0x25
 8004aa0:	d0c5      	beq.n	8004a2e <__ssvfiscanf_r+0x72>
 8004aa2:	d857      	bhi.n	8004b54 <__ssvfiscanf_r+0x198>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d065      	beq.n	8004b74 <__ssvfiscanf_r+0x1b8>
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004aac:	230a      	movs	r3, #10
 8004aae:	9342      	str	r3, [sp, #264]	@ 0x108
 8004ab0:	e078      	b.n	8004ba4 <__ssvfiscanf_r+0x1e8>
 8004ab2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004ab4:	fb02 1103 	mla	r1, r2, r3, r1
 8004ab8:	3930      	subs	r1, #48	@ 0x30
 8004aba:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004abc:	464d      	mov	r5, r9
 8004abe:	e7d2      	b.n	8004a66 <__ssvfiscanf_r+0xaa>
 8004ac0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004ac4:	2a20      	cmp	r2, #32
 8004ac6:	d8ef      	bhi.n	8004aa8 <__ssvfiscanf_r+0xec>
 8004ac8:	a101      	add	r1, pc, #4	@ (adr r1, 8004ad0 <__ssvfiscanf_r+0x114>)
 8004aca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b83 	.word	0x08004b83
 8004ad4:	08004aa9 	.word	0x08004aa9
 8004ad8:	08004aa9 	.word	0x08004aa9
 8004adc:	08004bdd 	.word	0x08004bdd
 8004ae0:	08004aa9 	.word	0x08004aa9
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004aa9 	.word	0x08004aa9
 8004af0:	08004aa9 	.word	0x08004aa9
 8004af4:	08004aa9 	.word	0x08004aa9
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004bf3 	.word	0x08004bf3
 8004b00:	08004bd9 	.word	0x08004bd9
 8004b04:	08004b5b 	.word	0x08004b5b
 8004b08:	08004b5b 	.word	0x08004b5b
 8004b0c:	08004b5b 	.word	0x08004b5b
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004b95 	.word	0x08004b95
 8004b18:	08004aa9 	.word	0x08004aa9
 8004b1c:	08004aa9 	.word	0x08004aa9
 8004b20:	08004aa9 	.word	0x08004aa9
 8004b24:	08004aa9 	.word	0x08004aa9
 8004b28:	08004c03 	.word	0x08004c03
 8004b2c:	08004b9d 	.word	0x08004b9d
 8004b30:	08004b7b 	.word	0x08004b7b
 8004b34:	08004aa9 	.word	0x08004aa9
 8004b38:	08004aa9 	.word	0x08004aa9
 8004b3c:	08004bff 	.word	0x08004bff
 8004b40:	08004aa9 	.word	0x08004aa9
 8004b44:	08004bd9 	.word	0x08004bd9
 8004b48:	08004aa9 	.word	0x08004aa9
 8004b4c:	08004aa9 	.word	0x08004aa9
 8004b50:	08004b83 	.word	0x08004b83
 8004b54:	3b45      	subs	r3, #69	@ 0x45
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d8a6      	bhi.n	8004aa8 <__ssvfiscanf_r+0xec>
 8004b5a:	2305      	movs	r3, #5
 8004b5c:	e021      	b.n	8004ba2 <__ssvfiscanf_r+0x1e6>
 8004b5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b60:	4621      	mov	r1, r4
 8004b62:	4630      	mov	r0, r6
 8004b64:	4798      	blx	r3
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f43f af66 	beq.w	8004a38 <__ssvfiscanf_r+0x7c>
 8004b6c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f040 808b 	bne.w	8004c8a <__ssvfiscanf_r+0x2ce>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	e08b      	b.n	8004c92 <__ssvfiscanf_r+0x2d6>
 8004b7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b7c:	f042 0220 	orr.w	r2, r2, #32
 8004b80:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b88:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004b8e:	9242      	str	r2, [sp, #264]	@ 0x108
 8004b90:	d902      	bls.n	8004b98 <__ssvfiscanf_r+0x1dc>
 8004b92:	e005      	b.n	8004ba0 <__ssvfiscanf_r+0x1e4>
 8004b94:	2300      	movs	r3, #0
 8004b96:	9342      	str	r3, [sp, #264]	@ 0x108
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e002      	b.n	8004ba2 <__ssvfiscanf_r+0x1e6>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dd39      	ble.n	8004c1e <__ssvfiscanf_r+0x262>
 8004baa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004bac:	0659      	lsls	r1, r3, #25
 8004bae:	d404      	bmi.n	8004bba <__ssvfiscanf_r+0x1fe>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	5cba      	ldrb	r2, [r7, r2]
 8004bb6:	0712      	lsls	r2, r2, #28
 8004bb8:	d438      	bmi.n	8004c2c <__ssvfiscanf_r+0x270>
 8004bba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	dc47      	bgt.n	8004c50 <__ssvfiscanf_r+0x294>
 8004bc0:	466b      	mov	r3, sp
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	a941      	add	r1, sp, #260	@ 0x104
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 f9ae 	bl	8004f28 <_scanf_chars>
 8004bcc:	2801      	cmp	r0, #1
 8004bce:	d064      	beq.n	8004c9a <__ssvfiscanf_r+0x2de>
 8004bd0:	2802      	cmp	r0, #2
 8004bd2:	f47f af18 	bne.w	8004a06 <__ssvfiscanf_r+0x4a>
 8004bd6:	e7c9      	b.n	8004b6c <__ssvfiscanf_r+0x1b0>
 8004bd8:	220a      	movs	r2, #10
 8004bda:	e7d7      	b.n	8004b8c <__ssvfiscanf_r+0x1d0>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4640      	mov	r0, r8
 8004be0:	f000 faf0 	bl	80051c4 <__sccl>
 8004be4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bea:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bec:	4605      	mov	r5, r0
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e7d7      	b.n	8004ba2 <__ssvfiscanf_r+0x1e6>
 8004bf2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf8:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e7d1      	b.n	8004ba2 <__ssvfiscanf_r+0x1e6>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e7cf      	b.n	8004ba2 <__ssvfiscanf_r+0x1e6>
 8004c02:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004c04:	06c3      	lsls	r3, r0, #27
 8004c06:	f53f aefe 	bmi.w	8004a06 <__ssvfiscanf_r+0x4a>
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004c0e:	1d19      	adds	r1, r3, #4
 8004c10:	9100      	str	r1, [sp, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	07c0      	lsls	r0, r0, #31
 8004c16:	bf4c      	ite	mi
 8004c18:	801a      	strhmi	r2, [r3, #0]
 8004c1a:	601a      	strpl	r2, [r3, #0]
 8004c1c:	e6f3      	b.n	8004a06 <__ssvfiscanf_r+0x4a>
 8004c1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c20:	4621      	mov	r1, r4
 8004c22:	4630      	mov	r0, r6
 8004c24:	4798      	blx	r3
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d0bf      	beq.n	8004baa <__ssvfiscanf_r+0x1ee>
 8004c2a:	e79f      	b.n	8004b6c <__ssvfiscanf_r+0x1b0>
 8004c2c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004c2e:	3201      	adds	r2, #1
 8004c30:	9245      	str	r2, [sp, #276]	@ 0x114
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	3a01      	subs	r2, #1
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	6062      	str	r2, [r4, #4]
 8004c3a:	dd02      	ble.n	8004c42 <__ssvfiscanf_r+0x286>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	e7b6      	b.n	8004bb0 <__ssvfiscanf_r+0x1f4>
 8004c42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c44:	4621      	mov	r1, r4
 8004c46:	4630      	mov	r0, r6
 8004c48:	4798      	blx	r3
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d0b0      	beq.n	8004bb0 <__ssvfiscanf_r+0x1f4>
 8004c4e:	e78d      	b.n	8004b6c <__ssvfiscanf_r+0x1b0>
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	dc0f      	bgt.n	8004c74 <__ssvfiscanf_r+0x2b8>
 8004c54:	466b      	mov	r3, sp
 8004c56:	4622      	mov	r2, r4
 8004c58:	a941      	add	r1, sp, #260	@ 0x104
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 f9be 	bl	8004fdc <_scanf_i>
 8004c60:	e7b4      	b.n	8004bcc <__ssvfiscanf_r+0x210>
 8004c62:	bf00      	nop
 8004c64:	0800490d 	.word	0x0800490d
 8004c68:	08004983 	.word	0x08004983
 8004c6c:	08005f8f 	.word	0x08005f8f
 8004c70:	08006095 	.word	0x08006095
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <__ssvfiscanf_r+0x2e4>)
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f43f aec5 	beq.w	8004a06 <__ssvfiscanf_r+0x4a>
 8004c7c:	466b      	mov	r3, sp
 8004c7e:	4622      	mov	r2, r4
 8004c80:	a941      	add	r1, sp, #260	@ 0x104
 8004c82:	4630      	mov	r0, r6
 8004c84:	f3af 8000 	nop.w
 8004c88:	e7a0      	b.n	8004bcc <__ssvfiscanf_r+0x210>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	065b      	lsls	r3, r3, #25
 8004c8e:	f53f af71 	bmi.w	8004b74 <__ssvfiscanf_r+0x1b8>
 8004c92:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004c9c:	e7f9      	b.n	8004c92 <__ssvfiscanf_r+0x2d6>
 8004c9e:	bf00      	nop
 8004ca0:	00000000 	.word	0x00000000

08004ca4 <__sfputc_r>:
 8004ca4:	6893      	ldr	r3, [r2, #8]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	b410      	push	{r4}
 8004cac:	6093      	str	r3, [r2, #8]
 8004cae:	da08      	bge.n	8004cc2 <__sfputc_r+0x1e>
 8004cb0:	6994      	ldr	r4, [r2, #24]
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	db01      	blt.n	8004cba <__sfputc_r+0x16>
 8004cb6:	290a      	cmp	r1, #10
 8004cb8:	d103      	bne.n	8004cc2 <__sfputc_r+0x1e>
 8004cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cbe:	f000 baf4 	b.w	80052aa <__swbuf_r>
 8004cc2:	6813      	ldr	r3, [r2, #0]
 8004cc4:	1c58      	adds	r0, r3, #1
 8004cc6:	6010      	str	r0, [r2, #0]
 8004cc8:	7019      	strb	r1, [r3, #0]
 8004cca:	4608      	mov	r0, r1
 8004ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <__sfputs_r>:
 8004cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	460f      	mov	r7, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	18d5      	adds	r5, r2, r3
 8004cdc:	42ac      	cmp	r4, r5
 8004cde:	d101      	bne.n	8004ce4 <__sfputs_r+0x12>
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e007      	b.n	8004cf4 <__sfputs_r+0x22>
 8004ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce8:	463a      	mov	r2, r7
 8004cea:	4630      	mov	r0, r6
 8004cec:	f7ff ffda 	bl	8004ca4 <__sfputc_r>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d1f3      	bne.n	8004cdc <__sfputs_r+0xa>
 8004cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cf8 <_vfiprintf_r>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	b09d      	sub	sp, #116	@ 0x74
 8004d00:	4614      	mov	r4, r2
 8004d02:	4698      	mov	r8, r3
 8004d04:	4606      	mov	r6, r0
 8004d06:	b118      	cbz	r0, 8004d10 <_vfiprintf_r+0x18>
 8004d08:	6a03      	ldr	r3, [r0, #32]
 8004d0a:	b90b      	cbnz	r3, 8004d10 <_vfiprintf_r+0x18>
 8004d0c:	f7fe f9dc 	bl	80030c8 <__sinit>
 8004d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d12:	07d9      	lsls	r1, r3, #31
 8004d14:	d405      	bmi.n	8004d22 <_vfiprintf_r+0x2a>
 8004d16:	89ab      	ldrh	r3, [r5, #12]
 8004d18:	059a      	lsls	r2, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_vfiprintf_r+0x2a>
 8004d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d1e:	f7fe ff01 	bl	8003b24 <__retarget_lock_acquire_recursive>
 8004d22:	89ab      	ldrh	r3, [r5, #12]
 8004d24:	071b      	lsls	r3, r3, #28
 8004d26:	d501      	bpl.n	8004d2c <_vfiprintf_r+0x34>
 8004d28:	692b      	ldr	r3, [r5, #16]
 8004d2a:	b99b      	cbnz	r3, 8004d54 <_vfiprintf_r+0x5c>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 fafa 	bl	8005328 <__swsetup_r>
 8004d34:	b170      	cbz	r0, 8004d54 <_vfiprintf_r+0x5c>
 8004d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d38:	07dc      	lsls	r4, r3, #31
 8004d3a:	d504      	bpl.n	8004d46 <_vfiprintf_r+0x4e>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	b01d      	add	sp, #116	@ 0x74
 8004d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	0598      	lsls	r0, r3, #22
 8004d4a:	d4f7      	bmi.n	8004d3c <_vfiprintf_r+0x44>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d4e:	f7fe feeb 	bl	8003b28 <__retarget_lock_release_recursive>
 8004d52:	e7f3      	b.n	8004d3c <_vfiprintf_r+0x44>
 8004d54:	2300      	movs	r3, #0
 8004d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d58:	2320      	movs	r3, #32
 8004d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d62:	2330      	movs	r3, #48	@ 0x30
 8004d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f14 <_vfiprintf_r+0x21c>
 8004d68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d6c:	f04f 0901 	mov.w	r9, #1
 8004d70:	4623      	mov	r3, r4
 8004d72:	469a      	mov	sl, r3
 8004d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d78:	b10a      	cbz	r2, 8004d7e <_vfiprintf_r+0x86>
 8004d7a:	2a25      	cmp	r2, #37	@ 0x25
 8004d7c:	d1f9      	bne.n	8004d72 <_vfiprintf_r+0x7a>
 8004d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d82:	d00b      	beq.n	8004d9c <_vfiprintf_r+0xa4>
 8004d84:	465b      	mov	r3, fp
 8004d86:	4622      	mov	r2, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ffa1 	bl	8004cd2 <__sfputs_r>
 8004d90:	3001      	adds	r0, #1
 8004d92:	f000 80a7 	beq.w	8004ee4 <_vfiprintf_r+0x1ec>
 8004d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d98:	445a      	add	r2, fp
 8004d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 809f 	beq.w	8004ee4 <_vfiprintf_r+0x1ec>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004db0:	f10a 0a01 	add.w	sl, sl, #1
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	9307      	str	r3, [sp, #28]
 8004db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dbe:	4654      	mov	r4, sl
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc6:	4853      	ldr	r0, [pc, #332]	@ (8004f14 <_vfiprintf_r+0x21c>)
 8004dc8:	f7fb fa3a 	bl	8000240 <memchr>
 8004dcc:	9a04      	ldr	r2, [sp, #16]
 8004dce:	b9d8      	cbnz	r0, 8004e08 <_vfiprintf_r+0x110>
 8004dd0:	06d1      	lsls	r1, r2, #27
 8004dd2:	bf44      	itt	mi
 8004dd4:	2320      	movmi	r3, #32
 8004dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dda:	0713      	lsls	r3, r2, #28
 8004ddc:	bf44      	itt	mi
 8004dde:	232b      	movmi	r3, #43	@ 0x2b
 8004de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004de4:	f89a 3000 	ldrb.w	r3, [sl]
 8004de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dea:	d015      	beq.n	8004e18 <_vfiprintf_r+0x120>
 8004dec:	9a07      	ldr	r2, [sp, #28]
 8004dee:	4654      	mov	r4, sl
 8004df0:	2000      	movs	r0, #0
 8004df2:	f04f 0c0a 	mov.w	ip, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dfc:	3b30      	subs	r3, #48	@ 0x30
 8004dfe:	2b09      	cmp	r3, #9
 8004e00:	d94b      	bls.n	8004e9a <_vfiprintf_r+0x1a2>
 8004e02:	b1b0      	cbz	r0, 8004e32 <_vfiprintf_r+0x13a>
 8004e04:	9207      	str	r2, [sp, #28]
 8004e06:	e014      	b.n	8004e32 <_vfiprintf_r+0x13a>
 8004e08:	eba0 0308 	sub.w	r3, r0, r8
 8004e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e10:	4313      	orrs	r3, r2
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	46a2      	mov	sl, r4
 8004e16:	e7d2      	b.n	8004dbe <_vfiprintf_r+0xc6>
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	1d19      	adds	r1, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	9103      	str	r1, [sp, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfbb      	ittet	lt
 8004e24:	425b      	neglt	r3, r3
 8004e26:	f042 0202 	orrlt.w	r2, r2, #2
 8004e2a:	9307      	strge	r3, [sp, #28]
 8004e2c:	9307      	strlt	r3, [sp, #28]
 8004e2e:	bfb8      	it	lt
 8004e30:	9204      	strlt	r2, [sp, #16]
 8004e32:	7823      	ldrb	r3, [r4, #0]
 8004e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e36:	d10a      	bne.n	8004e4e <_vfiprintf_r+0x156>
 8004e38:	7863      	ldrb	r3, [r4, #1]
 8004e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e3c:	d132      	bne.n	8004ea4 <_vfiprintf_r+0x1ac>
 8004e3e:	9b03      	ldr	r3, [sp, #12]
 8004e40:	1d1a      	adds	r2, r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	9203      	str	r2, [sp, #12]
 8004e46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e4a:	3402      	adds	r4, #2
 8004e4c:	9305      	str	r3, [sp, #20]
 8004e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f24 <_vfiprintf_r+0x22c>
 8004e52:	7821      	ldrb	r1, [r4, #0]
 8004e54:	2203      	movs	r2, #3
 8004e56:	4650      	mov	r0, sl
 8004e58:	f7fb f9f2 	bl	8000240 <memchr>
 8004e5c:	b138      	cbz	r0, 8004e6e <_vfiprintf_r+0x176>
 8004e5e:	9b04      	ldr	r3, [sp, #16]
 8004e60:	eba0 000a 	sub.w	r0, r0, sl
 8004e64:	2240      	movs	r2, #64	@ 0x40
 8004e66:	4082      	lsls	r2, r0
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	3401      	adds	r4, #1
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e72:	4829      	ldr	r0, [pc, #164]	@ (8004f18 <_vfiprintf_r+0x220>)
 8004e74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e78:	2206      	movs	r2, #6
 8004e7a:	f7fb f9e1 	bl	8000240 <memchr>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d03f      	beq.n	8004f02 <_vfiprintf_r+0x20a>
 8004e82:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <_vfiprintf_r+0x224>)
 8004e84:	bb1b      	cbnz	r3, 8004ece <_vfiprintf_r+0x1d6>
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	3307      	adds	r3, #7
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	3308      	adds	r3, #8
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e94:	443b      	add	r3, r7
 8004e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e98:	e76a      	b.n	8004d70 <_vfiprintf_r+0x78>
 8004e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	e7a8      	b.n	8004df6 <_vfiprintf_r+0xfe>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	3401      	adds	r4, #1
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f04f 0c0a 	mov.w	ip, #10
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eb6:	3a30      	subs	r2, #48	@ 0x30
 8004eb8:	2a09      	cmp	r2, #9
 8004eba:	d903      	bls.n	8004ec4 <_vfiprintf_r+0x1cc>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0c6      	beq.n	8004e4e <_vfiprintf_r+0x156>
 8004ec0:	9105      	str	r1, [sp, #20]
 8004ec2:	e7c4      	b.n	8004e4e <_vfiprintf_r+0x156>
 8004ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ec8:	4604      	mov	r4, r0
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e7f0      	b.n	8004eb0 <_vfiprintf_r+0x1b8>
 8004ece:	ab03      	add	r3, sp, #12
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <_vfiprintf_r+0x228>)
 8004ed6:	a904      	add	r1, sp, #16
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f3af 8000 	nop.w
 8004ede:	4607      	mov	r7, r0
 8004ee0:	1c78      	adds	r0, r7, #1
 8004ee2:	d1d6      	bne.n	8004e92 <_vfiprintf_r+0x19a>
 8004ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ee6:	07d9      	lsls	r1, r3, #31
 8004ee8:	d405      	bmi.n	8004ef6 <_vfiprintf_r+0x1fe>
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_vfiprintf_r+0x1fe>
 8004ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ef2:	f7fe fe19 	bl	8003b28 <__retarget_lock_release_recursive>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	065b      	lsls	r3, r3, #25
 8004efa:	f53f af1f 	bmi.w	8004d3c <_vfiprintf_r+0x44>
 8004efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f00:	e71e      	b.n	8004d40 <_vfiprintf_r+0x48>
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	462a      	mov	r2, r5
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <_vfiprintf_r+0x228>)
 8004f0a:	a904      	add	r1, sp, #16
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff f9bf 	bl	8004290 <_printf_i>
 8004f12:	e7e4      	b.n	8004ede <_vfiprintf_r+0x1e6>
 8004f14:	0800608f 	.word	0x0800608f
 8004f18:	08006099 	.word	0x08006099
 8004f1c:	00000000 	.word	0x00000000
 8004f20:	08004cd3 	.word	0x08004cd3
 8004f24:	08006095 	.word	0x08006095

08004f28 <_scanf_chars>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4615      	mov	r5, r2
 8004f2e:	688a      	ldr	r2, [r1, #8]
 8004f30:	4680      	mov	r8, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b932      	cbnz	r2, 8004f44 <_scanf_chars+0x1c>
 8004f36:	698a      	ldr	r2, [r1, #24]
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	f04f 32ff 	movne.w	r2, #4294967295
 8004f40:	2201      	moveq	r2, #1
 8004f42:	608a      	str	r2, [r1, #8]
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004fd8 <_scanf_chars+0xb0>
 8004f4a:	06d1      	lsls	r1, r2, #27
 8004f4c:	bf5f      	itttt	pl
 8004f4e:	681a      	ldrpl	r2, [r3, #0]
 8004f50:	1d11      	addpl	r1, r2, #4
 8004f52:	6019      	strpl	r1, [r3, #0]
 8004f54:	6816      	ldrpl	r6, [r2, #0]
 8004f56:	2700      	movs	r7, #0
 8004f58:	69a0      	ldr	r0, [r4, #24]
 8004f5a:	b188      	cbz	r0, 8004f80 <_scanf_chars+0x58>
 8004f5c:	2801      	cmp	r0, #1
 8004f5e:	d107      	bne.n	8004f70 <_scanf_chars+0x48>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	6963      	ldr	r3, [r4, #20]
 8004f66:	5c9b      	ldrb	r3, [r3, r2]
 8004f68:	b953      	cbnz	r3, 8004f80 <_scanf_chars+0x58>
 8004f6a:	2f00      	cmp	r7, #0
 8004f6c:	d031      	beq.n	8004fd2 <_scanf_chars+0xaa>
 8004f6e:	e022      	b.n	8004fb6 <_scanf_chars+0x8e>
 8004f70:	2802      	cmp	r0, #2
 8004f72:	d120      	bne.n	8004fb6 <_scanf_chars+0x8e>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	d41a      	bmi.n	8004fb6 <_scanf_chars+0x8e>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	06da      	lsls	r2, r3, #27
 8004f84:	bf5e      	ittt	pl
 8004f86:	682b      	ldrpl	r3, [r5, #0]
 8004f88:	781b      	ldrbpl	r3, [r3, #0]
 8004f8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004f8e:	682a      	ldr	r2, [r5, #0]
 8004f90:	686b      	ldr	r3, [r5, #4]
 8004f92:	3201      	adds	r2, #1
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	68a2      	ldr	r2, [r4, #8]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	3a01      	subs	r2, #1
 8004f9c:	606b      	str	r3, [r5, #4]
 8004f9e:	3701      	adds	r7, #1
 8004fa0:	60a2      	str	r2, [r4, #8]
 8004fa2:	b142      	cbz	r2, 8004fb6 <_scanf_chars+0x8e>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dcd7      	bgt.n	8004f58 <_scanf_chars+0x30>
 8004fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fac:	4629      	mov	r1, r5
 8004fae:	4640      	mov	r0, r8
 8004fb0:	4798      	blx	r3
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0d0      	beq.n	8004f58 <_scanf_chars+0x30>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	f013 0310 	ands.w	r3, r3, #16
 8004fbc:	d105      	bne.n	8004fca <_scanf_chars+0xa2>
 8004fbe:	68e2      	ldr	r2, [r4, #12]
 8004fc0:	3201      	adds	r2, #1
 8004fc2:	60e2      	str	r2, [r4, #12]
 8004fc4:	69a2      	ldr	r2, [r4, #24]
 8004fc6:	b102      	cbz	r2, 8004fca <_scanf_chars+0xa2>
 8004fc8:	7033      	strb	r3, [r6, #0]
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	443b      	add	r3, r7
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	bf00      	nop
 8004fd8:	08005f8f 	.word	0x08005f8f

08004fdc <_scanf_i>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	4698      	mov	r8, r3
 8004fe2:	4b74      	ldr	r3, [pc, #464]	@ (80051b4 <_scanf_i+0x1d8>)
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	4616      	mov	r6, r2
 8004fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <_scanf_i+0x1dc>)
 8004ff8:	69a1      	ldr	r1, [r4, #24]
 8004ffa:	4a70      	ldr	r2, [pc, #448]	@ (80051bc <_scanf_i+0x1e0>)
 8004ffc:	2903      	cmp	r1, #3
 8004ffe:	bf08      	it	eq
 8005000:	461a      	moveq	r2, r3
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	9201      	str	r2, [sp, #4]
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800500c:	bf88      	it	hi
 800500e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005012:	4627      	mov	r7, r4
 8005014:	bf82      	ittt	hi
 8005016:	eb03 0905 	addhi.w	r9, r3, r5
 800501a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800501e:	60a3      	strhi	r3, [r4, #8]
 8005020:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005024:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005028:	bf98      	it	ls
 800502a:	f04f 0900 	movls.w	r9, #0
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	463d      	mov	r5, r7
 8005032:	f04f 0b00 	mov.w	fp, #0
 8005036:	6831      	ldr	r1, [r6, #0]
 8005038:	ab03      	add	r3, sp, #12
 800503a:	7809      	ldrb	r1, [r1, #0]
 800503c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005040:	2202      	movs	r2, #2
 8005042:	f7fb f8fd 	bl	8000240 <memchr>
 8005046:	b328      	cbz	r0, 8005094 <_scanf_i+0xb8>
 8005048:	f1bb 0f01 	cmp.w	fp, #1
 800504c:	d159      	bne.n	8005102 <_scanf_i+0x126>
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	b92a      	cbnz	r2, 800505e <_scanf_i+0x82>
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	2108      	movs	r1, #8
 8005056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505a:	6061      	str	r1, [r4, #4]
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	68a2      	ldr	r2, [r4, #8]
 8005068:	1e51      	subs	r1, r2, #1
 800506a:	60a1      	str	r1, [r4, #8]
 800506c:	b192      	cbz	r2, 8005094 <_scanf_i+0xb8>
 800506e:	6832      	ldr	r2, [r6, #0]
 8005070:	1c51      	adds	r1, r2, #1
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	f805 2b01 	strb.w	r2, [r5], #1
 800507a:	6872      	ldr	r2, [r6, #4]
 800507c:	3a01      	subs	r2, #1
 800507e:	2a00      	cmp	r2, #0
 8005080:	6072      	str	r2, [r6, #4]
 8005082:	dc07      	bgt.n	8005094 <_scanf_i+0xb8>
 8005084:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005088:	4631      	mov	r1, r6
 800508a:	4650      	mov	r0, sl
 800508c:	4790      	blx	r2
 800508e:	2800      	cmp	r0, #0
 8005090:	f040 8085 	bne.w	800519e <_scanf_i+0x1c2>
 8005094:	f10b 0b01 	add.w	fp, fp, #1
 8005098:	f1bb 0f03 	cmp.w	fp, #3
 800509c:	d1cb      	bne.n	8005036 <_scanf_i+0x5a>
 800509e:	6863      	ldr	r3, [r4, #4]
 80050a0:	b90b      	cbnz	r3, 80050a6 <_scanf_i+0xca>
 80050a2:	230a      	movs	r3, #10
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	4945      	ldr	r1, [pc, #276]	@ (80051c0 <_scanf_i+0x1e4>)
 80050aa:	6960      	ldr	r0, [r4, #20]
 80050ac:	1ac9      	subs	r1, r1, r3
 80050ae:	f000 f889 	bl	80051c4 <__sccl>
 80050b2:	f04f 0b00 	mov.w	fp, #0
 80050b6:	68a3      	ldr	r3, [r4, #8]
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03d      	beq.n	800513a <_scanf_i+0x15e>
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	6960      	ldr	r0, [r4, #20]
 80050c2:	f891 c000 	ldrb.w	ip, [r1]
 80050c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d035      	beq.n	800513a <_scanf_i+0x15e>
 80050ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80050d2:	d124      	bne.n	800511e <_scanf_i+0x142>
 80050d4:	0510      	lsls	r0, r2, #20
 80050d6:	d522      	bpl.n	800511e <_scanf_i+0x142>
 80050d8:	f10b 0b01 	add.w	fp, fp, #1
 80050dc:	f1b9 0f00 	cmp.w	r9, #0
 80050e0:	d003      	beq.n	80050ea <_scanf_i+0x10e>
 80050e2:	3301      	adds	r3, #1
 80050e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	6873      	ldr	r3, [r6, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	6073      	str	r3, [r6, #4]
 80050f2:	dd1b      	ble.n	800512c <_scanf_i+0x150>
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	60a3      	str	r3, [r4, #8]
 8005100:	e7d9      	b.n	80050b6 <_scanf_i+0xda>
 8005102:	f1bb 0f02 	cmp.w	fp, #2
 8005106:	d1ae      	bne.n	8005066 <_scanf_i+0x8a>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800510e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005112:	d1bf      	bne.n	8005094 <_scanf_i+0xb8>
 8005114:	2110      	movs	r1, #16
 8005116:	6061      	str	r1, [r4, #4]
 8005118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511c:	e7a2      	b.n	8005064 <_scanf_i+0x88>
 800511e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005122:	6022      	str	r2, [r4, #0]
 8005124:	780b      	ldrb	r3, [r1, #0]
 8005126:	f805 3b01 	strb.w	r3, [r5], #1
 800512a:	e7de      	b.n	80050ea <_scanf_i+0x10e>
 800512c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005130:	4631      	mov	r1, r6
 8005132:	4650      	mov	r0, sl
 8005134:	4798      	blx	r3
 8005136:	2800      	cmp	r0, #0
 8005138:	d0df      	beq.n	80050fa <_scanf_i+0x11e>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	05d9      	lsls	r1, r3, #23
 800513e:	d50d      	bpl.n	800515c <_scanf_i+0x180>
 8005140:	42bd      	cmp	r5, r7
 8005142:	d909      	bls.n	8005158 <_scanf_i+0x17c>
 8005144:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005148:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800514c:	4632      	mov	r2, r6
 800514e:	4650      	mov	r0, sl
 8005150:	4798      	blx	r3
 8005152:	f105 39ff 	add.w	r9, r5, #4294967295
 8005156:	464d      	mov	r5, r9
 8005158:	42bd      	cmp	r5, r7
 800515a:	d028      	beq.n	80051ae <_scanf_i+0x1d2>
 800515c:	6822      	ldr	r2, [r4, #0]
 800515e:	f012 0210 	ands.w	r2, r2, #16
 8005162:	d113      	bne.n	800518c <_scanf_i+0x1b0>
 8005164:	702a      	strb	r2, [r5, #0]
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	9e01      	ldr	r6, [sp, #4]
 800516a:	4639      	mov	r1, r7
 800516c:	4650      	mov	r0, sl
 800516e:	47b0      	blx	r6
 8005170:	f8d8 3000 	ldr.w	r3, [r8]
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	f8c8 2000 	str.w	r2, [r8]
 800517c:	f011 0f20 	tst.w	r1, #32
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	d00f      	beq.n	80051a4 <_scanf_i+0x1c8>
 8005184:	6018      	str	r0, [r3, #0]
 8005186:	68e3      	ldr	r3, [r4, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60e3      	str	r3, [r4, #12]
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	1bed      	subs	r5, r5, r7
 8005190:	445d      	add	r5, fp
 8005192:	442b      	add	r3, r5
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	2000      	movs	r0, #0
 8005198:	b007      	add	sp, #28
 800519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519e:	f04f 0b00 	mov.w	fp, #0
 80051a2:	e7ca      	b.n	800513a <_scanf_i+0x15e>
 80051a4:	07ca      	lsls	r2, r1, #31
 80051a6:	bf4c      	ite	mi
 80051a8:	8018      	strhmi	r0, [r3, #0]
 80051aa:	6018      	strpl	r0, [r3, #0]
 80051ac:	e7eb      	b.n	8005186 <_scanf_i+0x1aa>
 80051ae:	2001      	movs	r0, #1
 80051b0:	e7f2      	b.n	8005198 <_scanf_i+0x1bc>
 80051b2:	bf00      	nop
 80051b4:	080056a4 	.word	0x080056a4
 80051b8:	08005561 	.word	0x08005561
 80051bc:	08003eed 	.word	0x08003eed
 80051c0:	080060d2 	.word	0x080060d2

080051c4 <__sccl>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	780b      	ldrb	r3, [r1, #0]
 80051c8:	4604      	mov	r4, r0
 80051ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80051cc:	bf0b      	itete	eq
 80051ce:	784b      	ldrbeq	r3, [r1, #1]
 80051d0:	1c4a      	addne	r2, r1, #1
 80051d2:	1c8a      	addeq	r2, r1, #2
 80051d4:	2100      	movne	r1, #0
 80051d6:	bf08      	it	eq
 80051d8:	2101      	moveq	r1, #1
 80051da:	3801      	subs	r0, #1
 80051dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80051e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80051e4:	42a8      	cmp	r0, r5
 80051e6:	d1fb      	bne.n	80051e0 <__sccl+0x1c>
 80051e8:	b90b      	cbnz	r3, 80051ee <__sccl+0x2a>
 80051ea:	1e50      	subs	r0, r2, #1
 80051ec:	bd70      	pop	{r4, r5, r6, pc}
 80051ee:	f081 0101 	eor.w	r1, r1, #1
 80051f2:	54e1      	strb	r1, [r4, r3]
 80051f4:	4610      	mov	r0, r2
 80051f6:	4602      	mov	r2, r0
 80051f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80051fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80051fe:	d005      	beq.n	800520c <__sccl+0x48>
 8005200:	2d5d      	cmp	r5, #93	@ 0x5d
 8005202:	d016      	beq.n	8005232 <__sccl+0x6e>
 8005204:	2d00      	cmp	r5, #0
 8005206:	d0f1      	beq.n	80051ec <__sccl+0x28>
 8005208:	462b      	mov	r3, r5
 800520a:	e7f2      	b.n	80051f2 <__sccl+0x2e>
 800520c:	7846      	ldrb	r6, [r0, #1]
 800520e:	2e5d      	cmp	r6, #93	@ 0x5d
 8005210:	d0fa      	beq.n	8005208 <__sccl+0x44>
 8005212:	42b3      	cmp	r3, r6
 8005214:	dcf8      	bgt.n	8005208 <__sccl+0x44>
 8005216:	3002      	adds	r0, #2
 8005218:	461a      	mov	r2, r3
 800521a:	3201      	adds	r2, #1
 800521c:	4296      	cmp	r6, r2
 800521e:	54a1      	strb	r1, [r4, r2]
 8005220:	dcfb      	bgt.n	800521a <__sccl+0x56>
 8005222:	1af2      	subs	r2, r6, r3
 8005224:	3a01      	subs	r2, #1
 8005226:	1c5d      	adds	r5, r3, #1
 8005228:	42b3      	cmp	r3, r6
 800522a:	bfa8      	it	ge
 800522c:	2200      	movge	r2, #0
 800522e:	18ab      	adds	r3, r5, r2
 8005230:	e7e1      	b.n	80051f6 <__sccl+0x32>
 8005232:	4610      	mov	r0, r2
 8005234:	e7da      	b.n	80051ec <__sccl+0x28>

08005236 <__submore>:
 8005236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	460c      	mov	r4, r1
 800523c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800523e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005242:	4299      	cmp	r1, r3
 8005244:	d11d      	bne.n	8005282 <__submore+0x4c>
 8005246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800524a:	f7fe fd55 	bl	8003cf8 <_malloc_r>
 800524e:	b918      	cbnz	r0, 8005258 <__submore+0x22>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800525c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800525e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005262:	6360      	str	r0, [r4, #52]	@ 0x34
 8005264:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005268:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800526c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005270:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005274:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005278:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800527c:	6020      	str	r0, [r4, #0]
 800527e:	2000      	movs	r0, #0
 8005280:	e7e8      	b.n	8005254 <__submore+0x1e>
 8005282:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005284:	0077      	lsls	r7, r6, #1
 8005286:	463a      	mov	r2, r7
 8005288:	f7ff fb12 	bl	80048b0 <_realloc_r>
 800528c:	4605      	mov	r5, r0
 800528e:	2800      	cmp	r0, #0
 8005290:	d0de      	beq.n	8005250 <__submore+0x1a>
 8005292:	eb00 0806 	add.w	r8, r0, r6
 8005296:	4601      	mov	r1, r0
 8005298:	4632      	mov	r2, r6
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fae6 	bl	800486c <memcpy>
 80052a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80052a4:	f8c4 8000 	str.w	r8, [r4]
 80052a8:	e7e9      	b.n	800527e <__submore+0x48>

080052aa <__swbuf_r>:
 80052aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ac:	460e      	mov	r6, r1
 80052ae:	4614      	mov	r4, r2
 80052b0:	4605      	mov	r5, r0
 80052b2:	b118      	cbz	r0, 80052bc <__swbuf_r+0x12>
 80052b4:	6a03      	ldr	r3, [r0, #32]
 80052b6:	b90b      	cbnz	r3, 80052bc <__swbuf_r+0x12>
 80052b8:	f7fd ff06 	bl	80030c8 <__sinit>
 80052bc:	69a3      	ldr	r3, [r4, #24]
 80052be:	60a3      	str	r3, [r4, #8]
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	071a      	lsls	r2, r3, #28
 80052c4:	d501      	bpl.n	80052ca <__swbuf_r+0x20>
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	b943      	cbnz	r3, 80052dc <__swbuf_r+0x32>
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f82b 	bl	8005328 <__swsetup_r>
 80052d2:	b118      	cbz	r0, 80052dc <__swbuf_r+0x32>
 80052d4:	f04f 37ff 	mov.w	r7, #4294967295
 80052d8:	4638      	mov	r0, r7
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	6922      	ldr	r2, [r4, #16]
 80052e0:	1a98      	subs	r0, r3, r2
 80052e2:	6963      	ldr	r3, [r4, #20]
 80052e4:	b2f6      	uxtb	r6, r6
 80052e6:	4283      	cmp	r3, r0
 80052e8:	4637      	mov	r7, r6
 80052ea:	dc05      	bgt.n	80052f8 <__swbuf_r+0x4e>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7ff f972 	bl	80045d8 <_fflush_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d1ed      	bne.n	80052d4 <__swbuf_r+0x2a>
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	701e      	strb	r6, [r3, #0]
 8005306:	6962      	ldr	r2, [r4, #20]
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	429a      	cmp	r2, r3
 800530c:	d004      	beq.n	8005318 <__swbuf_r+0x6e>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	07db      	lsls	r3, r3, #31
 8005312:	d5e1      	bpl.n	80052d8 <__swbuf_r+0x2e>
 8005314:	2e0a      	cmp	r6, #10
 8005316:	d1df      	bne.n	80052d8 <__swbuf_r+0x2e>
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f7ff f95c 	bl	80045d8 <_fflush_r>
 8005320:	2800      	cmp	r0, #0
 8005322:	d0d9      	beq.n	80052d8 <__swbuf_r+0x2e>
 8005324:	e7d6      	b.n	80052d4 <__swbuf_r+0x2a>
	...

08005328 <__swsetup_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4b29      	ldr	r3, [pc, #164]	@ (80053d0 <__swsetup_r+0xa8>)
 800532c:	4605      	mov	r5, r0
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	460c      	mov	r4, r1
 8005332:	b118      	cbz	r0, 800533c <__swsetup_r+0x14>
 8005334:	6a03      	ldr	r3, [r0, #32]
 8005336:	b90b      	cbnz	r3, 800533c <__swsetup_r+0x14>
 8005338:	f7fd fec6 	bl	80030c8 <__sinit>
 800533c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005340:	0719      	lsls	r1, r3, #28
 8005342:	d422      	bmi.n	800538a <__swsetup_r+0x62>
 8005344:	06da      	lsls	r2, r3, #27
 8005346:	d407      	bmi.n	8005358 <__swsetup_r+0x30>
 8005348:	2209      	movs	r2, #9
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	f04f 30ff 	mov.w	r0, #4294967295
 8005356:	e033      	b.n	80053c0 <__swsetup_r+0x98>
 8005358:	0758      	lsls	r0, r3, #29
 800535a:	d512      	bpl.n	8005382 <__swsetup_r+0x5a>
 800535c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800535e:	b141      	cbz	r1, 8005372 <__swsetup_r+0x4a>
 8005360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005364:	4299      	cmp	r1, r3
 8005366:	d002      	beq.n	800536e <__swsetup_r+0x46>
 8005368:	4628      	mov	r0, r5
 800536a:	f7fe fc05 	bl	8003b78 <_free_r>
 800536e:	2300      	movs	r3, #0
 8005370:	6363      	str	r3, [r4, #52]	@ 0x34
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	b94b      	cbnz	r3, 80053a2 <__swsetup_r+0x7a>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005398:	d003      	beq.n	80053a2 <__swsetup_r+0x7a>
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f907 	bl	80055b0 <__smakebuf_r>
 80053a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a6:	f013 0201 	ands.w	r2, r3, #1
 80053aa:	d00a      	beq.n	80053c2 <__swsetup_r+0x9a>
 80053ac:	2200      	movs	r2, #0
 80053ae:	60a2      	str	r2, [r4, #8]
 80053b0:	6962      	ldr	r2, [r4, #20]
 80053b2:	4252      	negs	r2, r2
 80053b4:	61a2      	str	r2, [r4, #24]
 80053b6:	6922      	ldr	r2, [r4, #16]
 80053b8:	b942      	cbnz	r2, 80053cc <__swsetup_r+0xa4>
 80053ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053be:	d1c5      	bne.n	800534c <__swsetup_r+0x24>
 80053c0:	bd38      	pop	{r3, r4, r5, pc}
 80053c2:	0799      	lsls	r1, r3, #30
 80053c4:	bf58      	it	pl
 80053c6:	6962      	ldrpl	r2, [r4, #20]
 80053c8:	60a2      	str	r2, [r4, #8]
 80053ca:	e7f4      	b.n	80053b6 <__swsetup_r+0x8e>
 80053cc:	2000      	movs	r0, #0
 80053ce:	e7f7      	b.n	80053c0 <__swsetup_r+0x98>
 80053d0:	2000002c 	.word	0x2000002c

080053d4 <_raise_r>:
 80053d4:	291f      	cmp	r1, #31
 80053d6:	b538      	push	{r3, r4, r5, lr}
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	d904      	bls.n	80053e8 <_raise_r+0x14>
 80053de:	2316      	movs	r3, #22
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80053ea:	b112      	cbz	r2, 80053f2 <_raise_r+0x1e>
 80053ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053f0:	b94b      	cbnz	r3, 8005406 <_raise_r+0x32>
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 f830 	bl	8005458 <_getpid_r>
 80053f8:	4622      	mov	r2, r4
 80053fa:	4601      	mov	r1, r0
 80053fc:	4628      	mov	r0, r5
 80053fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005402:	f000 b817 	b.w	8005434 <_kill_r>
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00a      	beq.n	8005420 <_raise_r+0x4c>
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	d103      	bne.n	8005416 <_raise_r+0x42>
 800540e:	2316      	movs	r3, #22
 8005410:	6003      	str	r3, [r0, #0]
 8005412:	2001      	movs	r0, #1
 8005414:	e7e7      	b.n	80053e6 <_raise_r+0x12>
 8005416:	2100      	movs	r1, #0
 8005418:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800541c:	4620      	mov	r0, r4
 800541e:	4798      	blx	r3
 8005420:	2000      	movs	r0, #0
 8005422:	e7e0      	b.n	80053e6 <_raise_r+0x12>

08005424 <raise>:
 8005424:	4b02      	ldr	r3, [pc, #8]	@ (8005430 <raise+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f7ff bfd3 	b.w	80053d4 <_raise_r>
 800542e:	bf00      	nop
 8005430:	2000002c 	.word	0x2000002c

08005434 <_kill_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	@ (8005454 <_kill_r+0x20>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	f7fb fb2a 	bl	8000a9a <_kill>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d102      	bne.n	8005450 <_kill_r+0x1c>
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	b103      	cbz	r3, 8005450 <_kill_r+0x1c>
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	bf00      	nop
 8005454:	200006bc 	.word	0x200006bc

08005458 <_getpid_r>:
 8005458:	f7fb bb17 	b.w	8000a8a <_getpid>

0800545c <_malloc_usable_size_r>:
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f18      	subs	r0, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfbc      	itt	lt
 8005466:	580b      	ldrlt	r3, [r1, r0]
 8005468:	18c0      	addlt	r0, r0, r3
 800546a:	4770      	bx	lr

0800546c <_strtol_l.constprop.0>:
 800546c:	2b24      	cmp	r3, #36	@ 0x24
 800546e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005472:	4686      	mov	lr, r0
 8005474:	4690      	mov	r8, r2
 8005476:	d801      	bhi.n	800547c <_strtol_l.constprop.0+0x10>
 8005478:	2b01      	cmp	r3, #1
 800547a:	d106      	bne.n	800548a <_strtol_l.constprop.0+0x1e>
 800547c:	f7fe fb26 	bl	8003acc <__errno>
 8005480:	2316      	movs	r3, #22
 8005482:	6003      	str	r3, [r0, #0]
 8005484:	2000      	movs	r0, #0
 8005486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548a:	4834      	ldr	r0, [pc, #208]	@ (800555c <_strtol_l.constprop.0+0xf0>)
 800548c:	460d      	mov	r5, r1
 800548e:	462a      	mov	r2, r5
 8005490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005494:	5d06      	ldrb	r6, [r0, r4]
 8005496:	f016 0608 	ands.w	r6, r6, #8
 800549a:	d1f8      	bne.n	800548e <_strtol_l.constprop.0+0x22>
 800549c:	2c2d      	cmp	r4, #45	@ 0x2d
 800549e:	d12d      	bne.n	80054fc <_strtol_l.constprop.0+0x90>
 80054a0:	782c      	ldrb	r4, [r5, #0]
 80054a2:	2601      	movs	r6, #1
 80054a4:	1c95      	adds	r5, r2, #2
 80054a6:	f033 0210 	bics.w	r2, r3, #16
 80054aa:	d109      	bne.n	80054c0 <_strtol_l.constprop.0+0x54>
 80054ac:	2c30      	cmp	r4, #48	@ 0x30
 80054ae:	d12a      	bne.n	8005506 <_strtol_l.constprop.0+0x9a>
 80054b0:	782a      	ldrb	r2, [r5, #0]
 80054b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80054b6:	2a58      	cmp	r2, #88	@ 0x58
 80054b8:	d125      	bne.n	8005506 <_strtol_l.constprop.0+0x9a>
 80054ba:	786c      	ldrb	r4, [r5, #1]
 80054bc:	2310      	movs	r3, #16
 80054be:	3502      	adds	r5, #2
 80054c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80054c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80054c8:	2200      	movs	r2, #0
 80054ca:	fbbc f9f3 	udiv	r9, ip, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80054d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80054d8:	2f09      	cmp	r7, #9
 80054da:	d81b      	bhi.n	8005514 <_strtol_l.constprop.0+0xa8>
 80054dc:	463c      	mov	r4, r7
 80054de:	42a3      	cmp	r3, r4
 80054e0:	dd27      	ble.n	8005532 <_strtol_l.constprop.0+0xc6>
 80054e2:	1c57      	adds	r7, r2, #1
 80054e4:	d007      	beq.n	80054f6 <_strtol_l.constprop.0+0x8a>
 80054e6:	4581      	cmp	r9, r0
 80054e8:	d320      	bcc.n	800552c <_strtol_l.constprop.0+0xc0>
 80054ea:	d101      	bne.n	80054f0 <_strtol_l.constprop.0+0x84>
 80054ec:	45a2      	cmp	sl, r4
 80054ee:	db1d      	blt.n	800552c <_strtol_l.constprop.0+0xc0>
 80054f0:	fb00 4003 	mla	r0, r0, r3, r4
 80054f4:	2201      	movs	r2, #1
 80054f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054fa:	e7eb      	b.n	80054d4 <_strtol_l.constprop.0+0x68>
 80054fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80054fe:	bf04      	itt	eq
 8005500:	782c      	ldrbeq	r4, [r5, #0]
 8005502:	1c95      	addeq	r5, r2, #2
 8005504:	e7cf      	b.n	80054a6 <_strtol_l.constprop.0+0x3a>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1da      	bne.n	80054c0 <_strtol_l.constprop.0+0x54>
 800550a:	2c30      	cmp	r4, #48	@ 0x30
 800550c:	bf0c      	ite	eq
 800550e:	2308      	moveq	r3, #8
 8005510:	230a      	movne	r3, #10
 8005512:	e7d5      	b.n	80054c0 <_strtol_l.constprop.0+0x54>
 8005514:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005518:	2f19      	cmp	r7, #25
 800551a:	d801      	bhi.n	8005520 <_strtol_l.constprop.0+0xb4>
 800551c:	3c37      	subs	r4, #55	@ 0x37
 800551e:	e7de      	b.n	80054de <_strtol_l.constprop.0+0x72>
 8005520:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005524:	2f19      	cmp	r7, #25
 8005526:	d804      	bhi.n	8005532 <_strtol_l.constprop.0+0xc6>
 8005528:	3c57      	subs	r4, #87	@ 0x57
 800552a:	e7d8      	b.n	80054de <_strtol_l.constprop.0+0x72>
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	e7e1      	b.n	80054f6 <_strtol_l.constprop.0+0x8a>
 8005532:	1c53      	adds	r3, r2, #1
 8005534:	d108      	bne.n	8005548 <_strtol_l.constprop.0+0xdc>
 8005536:	2322      	movs	r3, #34	@ 0x22
 8005538:	f8ce 3000 	str.w	r3, [lr]
 800553c:	4660      	mov	r0, ip
 800553e:	f1b8 0f00 	cmp.w	r8, #0
 8005542:	d0a0      	beq.n	8005486 <_strtol_l.constprop.0+0x1a>
 8005544:	1e69      	subs	r1, r5, #1
 8005546:	e006      	b.n	8005556 <_strtol_l.constprop.0+0xea>
 8005548:	b106      	cbz	r6, 800554c <_strtol_l.constprop.0+0xe0>
 800554a:	4240      	negs	r0, r0
 800554c:	f1b8 0f00 	cmp.w	r8, #0
 8005550:	d099      	beq.n	8005486 <_strtol_l.constprop.0+0x1a>
 8005552:	2a00      	cmp	r2, #0
 8005554:	d1f6      	bne.n	8005544 <_strtol_l.constprop.0+0xd8>
 8005556:	f8c8 1000 	str.w	r1, [r8]
 800555a:	e794      	b.n	8005486 <_strtol_l.constprop.0+0x1a>
 800555c:	08005f8f 	.word	0x08005f8f

08005560 <_strtol_r>:
 8005560:	f7ff bf84 	b.w	800546c <_strtol_l.constprop.0>

08005564 <__swhatbuf_r>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	460c      	mov	r4, r1
 8005568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556c:	2900      	cmp	r1, #0
 800556e:	b096      	sub	sp, #88	@ 0x58
 8005570:	4615      	mov	r5, r2
 8005572:	461e      	mov	r6, r3
 8005574:	da0d      	bge.n	8005592 <__swhatbuf_r+0x2e>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	bf14      	ite	ne
 8005582:	2340      	movne	r3, #64	@ 0x40
 8005584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005588:	2000      	movs	r0, #0
 800558a:	6031      	str	r1, [r6, #0]
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	b016      	add	sp, #88	@ 0x58
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	466a      	mov	r2, sp
 8005594:	f000 f848 	bl	8005628 <_fstat_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	dbec      	blt.n	8005576 <__swhatbuf_r+0x12>
 800559c:	9901      	ldr	r1, [sp, #4]
 800559e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055a6:	4259      	negs	r1, r3
 80055a8:	4159      	adcs	r1, r3
 80055aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055ae:	e7eb      	b.n	8005588 <__swhatbuf_r+0x24>

080055b0 <__smakebuf_r>:
 80055b0:	898b      	ldrh	r3, [r1, #12]
 80055b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055b4:	079d      	lsls	r5, r3, #30
 80055b6:	4606      	mov	r6, r0
 80055b8:	460c      	mov	r4, r1
 80055ba:	d507      	bpl.n	80055cc <__smakebuf_r+0x1c>
 80055bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	2301      	movs	r3, #1
 80055c6:	6163      	str	r3, [r4, #20]
 80055c8:	b003      	add	sp, #12
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055cc:	ab01      	add	r3, sp, #4
 80055ce:	466a      	mov	r2, sp
 80055d0:	f7ff ffc8 	bl	8005564 <__swhatbuf_r>
 80055d4:	9f00      	ldr	r7, [sp, #0]
 80055d6:	4605      	mov	r5, r0
 80055d8:	4639      	mov	r1, r7
 80055da:	4630      	mov	r0, r6
 80055dc:	f7fe fb8c 	bl	8003cf8 <_malloc_r>
 80055e0:	b948      	cbnz	r0, 80055f6 <__smakebuf_r+0x46>
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	059a      	lsls	r2, r3, #22
 80055e8:	d4ee      	bmi.n	80055c8 <__smakebuf_r+0x18>
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	e7e2      	b.n	80055bc <__smakebuf_r+0xc>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	6020      	str	r0, [r4, #0]
 80055fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005606:	b15b      	cbz	r3, 8005620 <__smakebuf_r+0x70>
 8005608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560c:	4630      	mov	r0, r6
 800560e:	f000 f81d 	bl	800564c <_isatty_r>
 8005612:	b128      	cbz	r0, 8005620 <__smakebuf_r+0x70>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	431d      	orrs	r5, r3
 8005624:	81a5      	strh	r5, [r4, #12]
 8005626:	e7cf      	b.n	80055c8 <__smakebuf_r+0x18>

08005628 <_fstat_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d07      	ldr	r5, [pc, #28]	@ (8005648 <_fstat_r+0x20>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	f7fb fa90 	bl	8000b5a <_fstat>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d102      	bne.n	8005644 <_fstat_r+0x1c>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	b103      	cbz	r3, 8005644 <_fstat_r+0x1c>
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	bd38      	pop	{r3, r4, r5, pc}
 8005646:	bf00      	nop
 8005648:	200006bc 	.word	0x200006bc

0800564c <_isatty_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d06      	ldr	r5, [pc, #24]	@ (8005668 <_isatty_r+0x1c>)
 8005650:	2300      	movs	r3, #0
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7fb fa8f 	bl	8000b7a <_isatty>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_isatty_r+0x1a>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_isatty_r+0x1a>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	200006bc 	.word	0x200006bc

0800566c <_gettimeofday>:
 800566c:	4b02      	ldr	r3, [pc, #8]	@ (8005678 <_gettimeofday+0xc>)
 800566e:	2258      	movs	r2, #88	@ 0x58
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	4770      	bx	lr
 8005678:	200006bc 	.word	0x200006bc

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr
