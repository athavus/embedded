
i2c_atv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004608  08004608  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004610  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  0800466c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  0800466c  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f113  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e00  00000000  00000000  0001519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00016fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd8  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218b7  00000000  00000000  00018a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012656  00000000  00000000  0003a317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1830  00000000  00000000  0004c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e19d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  0011e1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00122728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004570 	.word	0x08004570

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004570 	.word	0x08004570

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_I2C1_Init_100>:
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void MX_I2C1_Init_100(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <MX_I2C1_Init_100+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005bc:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <MX_I2C1_Init_100+0x58>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_I2C1_Init_100+0x50>)
 80005ee:	f001 f87f 	bl	80016f0 <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C1_Init_100+0x4c>
  {
    Error_Handler();
 80005f8:	f000 fa7c 	bl	8000af4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000078 	.word	0x20000078
 8000604:	40005400 	.word	0x40005400
 8000608:	000186a0 	.word	0x000186a0

0800060c <scan_i2c>:

void scan_i2c(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
	uint8_t buffer[25] = {0};
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	751a      	strb	r2, [r3, #20]

	HAL_UART_Transmit(&huart2, "Scan 400kHz: ", 13, 10000);
 8000628:	f242 7310 	movw	r3, #10000	@ 0x2710
 800062c:	220d      	movs	r2, #13
 800062e:	4935      	ldr	r1, [pc, #212]	@ (8000704 <scan_i2c+0xf8>)
 8000630:	4835      	ldr	r0, [pc, #212]	@ (8000708 <scan_i2c+0xfc>)
 8000632:	f002 ff41 	bl	80034b8 <HAL_UART_Transmit>
	for(int i=1; i<128; i++)
 8000636:	2301      	movs	r3, #1
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
 800063a:	e020      	b.n	800067e <scan_i2c+0x72>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 800063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063e:	b29b      	uxth	r3, r3
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b299      	uxth	r1, r3
 8000644:	2305      	movs	r3, #5
 8000646:	2203      	movs	r2, #3
 8000648:	4830      	ldr	r0, [pc, #192]	@ (800070c <scan_i2c+0x100>)
 800064a:	f001 f9c5 	bl	80019d8 <HAL_I2C_IsDeviceReady>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d111      	bne.n	8000678 <scan_i2c+0x6c>
		{
			sprintf(buffer, "0x%X, ", i);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000658:	492d      	ldr	r1, [pc, #180]	@ (8000710 <scan_i2c+0x104>)
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fae8 	bl	8003c30 <siprintf>
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10000);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	1d39      	adds	r1, r7, #4
 800066e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000672:	4825      	ldr	r0, [pc, #148]	@ (8000708 <scan_i2c+0xfc>)
 8000674:	f002 ff20 	bl	80034b8 <HAL_UART_Transmit>
	for(int i=1; i<128; i++)
 8000678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067a:	3301      	adds	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
 800067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000680:	2b7f      	cmp	r3, #127	@ 0x7f
 8000682:	dddb      	ble.n	800063c <scan_i2c+0x30>
		}
	}

	HAL_I2C_DeInit(&hi2c1);
 8000684:	4821      	ldr	r0, [pc, #132]	@ (800070c <scan_i2c+0x100>)
 8000686:	f001 f977 	bl	8001978 <HAL_I2C_DeInit>
	MX_I2C1_Init_100();
 800068a:	f7ff ff91 	bl	80005b0 <MX_I2C1_Init_100>

	HAL_UART_Transmit(&huart2, "\nScan 100kHz: ", 14, 10000);
 800068e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000692:	220e      	movs	r2, #14
 8000694:	491f      	ldr	r1, [pc, #124]	@ (8000714 <scan_i2c+0x108>)
 8000696:	481c      	ldr	r0, [pc, #112]	@ (8000708 <scan_i2c+0xfc>)
 8000698:	f002 ff0e 	bl	80034b8 <HAL_UART_Transmit>
	for(int i=1; i<128; i++)
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	e020      	b.n	80006e4 <scan_i2c+0xd8>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b299      	uxth	r1, r3
 80006aa:	2305      	movs	r3, #5
 80006ac:	2203      	movs	r2, #3
 80006ae:	4817      	ldr	r0, [pc, #92]	@ (800070c <scan_i2c+0x100>)
 80006b0:	f001 f992 	bl	80019d8 <HAL_I2C_IsDeviceReady>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d111      	bne.n	80006de <scan_i2c+0xd2>
		{
			sprintf(buffer, "0x%X, ", i);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	6a3a      	ldr	r2, [r7, #32]
 80006be:	4914      	ldr	r1, [pc, #80]	@ (8000710 <scan_i2c+0x104>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fab5 	bl	8003c30 <siprintf>
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10000);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fda1 	bl	8000210 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006d8:	480b      	ldr	r0, [pc, #44]	@ (8000708 <scan_i2c+0xfc>)
 80006da:	f002 feed 	bl	80034b8 <HAL_UART_Transmit>
	for(int i=1; i<128; i++)
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	3301      	adds	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80006e8:	dddb      	ble.n	80006a2 <scan_i2c+0x96>
		}
	}

	HAL_UART_Transmit(&huart2, "\n\n", 2, 10000);
 80006ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006ee:	2202      	movs	r2, #2
 80006f0:	4909      	ldr	r1, [pc, #36]	@ (8000718 <scan_i2c+0x10c>)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <scan_i2c+0xfc>)
 80006f4:	f002 fee0 	bl	80034b8 <HAL_UART_Transmit>
	MX_I2C1_Init();
 80006f8:	f000 f894 	bl	8000824 <MX_I2C1_Init>
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08004588 	.word	0x08004588
 8000708:	20000114 	.word	0x20000114
 800070c:	20000078 	.word	0x20000078
 8000710:	08004598 	.word	0x08004598
 8000714:	080045a0 	.word	0x080045a0
 8000718:	080045b0 	.word	0x080045b0

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fbc8 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f810 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f000 f976 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072c:	f000 f94a 	bl	80009c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000730:	f000 f878 	bl	8000824 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000734:	f000 f8a4 	bl	8000880 <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(5000);
 8000738:	f241 3088 	movw	r0, #5000	@ 0x1388
 800073c:	f000 fc2c 	bl	8000f98 <HAL_Delay>
	  scan_i2c();
 8000740:	f7ff ff64 	bl	800060c <scan_i2c>
	  HAL_Delay(5000);
 8000744:	bf00      	nop
 8000746:	e7f7      	b.n	8000738 <main+0x1c>

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	@ 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2234      	movs	r2, #52	@ 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fa8a 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <SystemClock_Config+0xd4>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	4a29      	ldr	r2, [pc, #164]	@ (800081c <SystemClock_Config+0xd4>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	@ 0x40
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <SystemClock_Config+0xd4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000794:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <SystemClock_Config+0xd8>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007bc:	2310      	movs	r3, #16
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fdf0 	bl	80023bc <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e2:	f000 f987 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa90 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800080e:	f000 f971 	bl	8000af4 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	@ 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f000 ff45 	bl	80016f0 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f942 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000078 	.word	0x20000078
 8000878:	40005400 	.word	0x40005400
 800087c:	00061a80 	.word	0x00061a80

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	@ 0x58
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f9d9 	bl	8003c70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008be:	4b3f      	ldr	r3, [pc, #252]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008c0:	4a3f      	ldr	r2, [pc, #252]	@ (80009c0 <MX_TIM1_Init+0x140>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80008c4:	4b3d      	ldr	r3, [pc, #244]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008c6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80008ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 80008d2:	4b3a      	ldr	r3, [pc, #232]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008d4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80008d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b38      	ldr	r3, [pc, #224]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b35      	ldr	r3, [pc, #212]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ec:	4833      	ldr	r0, [pc, #204]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008ee:	f002 f803 	bl	80028f8 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f8fc 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000906:	4619      	mov	r1, r3
 8000908:	482c      	ldr	r0, [pc, #176]	@ (80009bc <MX_TIM1_Init+0x13c>)
 800090a:	f002 f8f9 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000914:	f000 f8ee 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000918:	4828      	ldr	r0, [pc, #160]	@ (80009bc <MX_TIM1_Init+0x13c>)
 800091a:	f002 f83c 	bl	8002996 <HAL_TIM_OC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000924:	f000 f8e6 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000930:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000934:	4619      	mov	r1, r3
 8000936:	4821      	ldr	r0, [pc, #132]	@ (80009bc <MX_TIM1_Init+0x13c>)
 8000938:	f002 fca0 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000942:	f000 f8d7 	bl	8000af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <MX_TIM1_Init+0x13c>)
 800096c:	f002 f86c 	bl	8002a48 <HAL_TIM_OC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000976:	f000 f8bd 	bl	8000af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800098e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000992:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <MX_TIM1_Init+0x13c>)
 800099e:	f002 fce9 	bl	8003374 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80009a8:	f000 f8a4 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80009ae:	f000 f95d 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 80009b2:	bf00      	nop
 80009b4:	3758      	adds	r7, #88	@ 0x58
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000cc 	.word	0x200000cc
 80009c0:	40010000 	.word	0x40010000

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_USART2_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USART2_UART_Init+0x4c>)
 80009fc:	f002 fd0c 	bl	8003418 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f875 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000114 	.word	0x20000114
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a25      	ldr	r2, [pc, #148]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4812      	ldr	r0, [pc, #72]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000aa4:	f000 fe0a 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <MX_GPIO_Init+0xd8>)
 8000ac0:	f000 fb74 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_GPIO_Init+0xd4>)
 8000adc:	f000 fb66 	bl	80011ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	@ 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fb00 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <HAL_I2C_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <HAL_I2C_MspInit+0x8c>)
 8000bac:	f000 fafe 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_I2C_MspDeInit+0x3c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10f      	bne.n	8000c12 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_I2C_MspDeInit+0x40>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_I2C_MspDeInit+0x40>)
 8000bf8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <HAL_I2C_MspDeInit+0x44>)
 8000c04:	f000 fc66 	bl	80014d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <HAL_I2C_MspDeInit+0x44>)
 8000c0e:	f000 fc61 	bl	80014d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <HAL_TIM_Base_MspInit+0x3c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10d      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40010000 	.word	0x40010000
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11e      	bne.n	8000ccc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_TIM_MspPostInit+0x70>)
 8000cc8:	f000 fa70 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	@ (8000d64 <HAL_UART_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_UART_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <HAL_UART_MspInit+0x8c>)
 8000d56:	f000 fa29 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	@ 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f8c7 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f002 ff3e 	bl	8003c80 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	2000015c 	.word	0x2000015c
 8000e38:	200002b0 	.word	0x200002b0

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e64:	f7ff ffea 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 fefd 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fc43 	bl	800071c <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea4:	08004610 	.word	0x08004610
  ldr r2, =_sbss
 8000ea8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eac:	200002ac 	.word	0x200002ac

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f931 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe0a 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f93b 	bl	8001192 <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f911 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000160 	.word	0x20000160

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000160 	.word	0x20000160

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff47 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5c 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e165      	b.n	8001494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8154 	bne.w	800148e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80ae 	beq.w	800148e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b5d      	ldr	r3, [pc, #372]	@ (80014ac <HAL_GPIO_Init+0x300>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a5c      	ldr	r2, [pc, #368]	@ (80014ac <HAL_GPIO_Init+0x300>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b5a      	ldr	r3, [pc, #360]	@ (80014ac <HAL_GPIO_Init+0x300>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a58      	ldr	r2, [pc, #352]	@ (80014b0 <HAL_GPIO_Init+0x304>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	@ (80014b4 <HAL_GPIO_Init+0x308>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	@ (80014b8 <HAL_GPIO_Init+0x30c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	@ (80014bc <HAL_GPIO_Init+0x310>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	@ (80014c0 <HAL_GPIO_Init+0x314>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <HAL_GPIO_Init+0x318>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x20a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4a      	ldr	r2, [pc, #296]	@ (80014c8 <HAL_GPIO_Init+0x31c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x206>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a49      	ldr	r2, [pc, #292]	@ (80014cc <HAL_GPIO_Init+0x320>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x202>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4935      	ldr	r1, [pc, #212]	@ (80014b0 <HAL_GPIO_Init+0x304>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e6:	4b3a      	ldr	r3, [pc, #232]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140a:	4a31      	ldr	r2, [pc, #196]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001434:	4a26      	ldr	r2, [pc, #152]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001488:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <HAL_GPIO_Init+0x324>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f ae96 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40021400 	.word	0x40021400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e0c7      	b.n	8001680 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	429a      	cmp	r2, r3
 8001508:	f040 80b7 	bne.w	800167a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800150c:	4a62      	ldr	r2, [pc, #392]	@ (8001698 <HAL_GPIO_DeInit+0x1c4>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4013      	ands	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a5a      	ldr	r2, [pc, #360]	@ (800169c <HAL_GPIO_DeInit+0x1c8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_DeInit+0xae>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a59      	ldr	r2, [pc, #356]	@ (80016a0 <HAL_GPIO_DeInit+0x1cc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_DeInit+0xaa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	@ (80016a4 <HAL_GPIO_DeInit+0x1d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_DeInit+0xa6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a57      	ldr	r2, [pc, #348]	@ (80016a8 <HAL_GPIO_DeInit+0x1d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_DeInit+0xa2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a56      	ldr	r2, [pc, #344]	@ (80016ac <HAL_GPIO_DeInit+0x1d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_DeInit+0x9e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a55      	ldr	r2, [pc, #340]	@ (80016b0 <HAL_GPIO_DeInit+0x1dc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_DeInit+0x9a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_GPIO_DeInit+0x1e0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_DeInit+0x96>
 8001566:	2306      	movs	r3, #6
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800156a:	2307      	movs	r3, #7
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001582:	2300      	movs	r3, #0
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d132      	bne.n	80015fa <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001594:	4b48      	ldr	r3, [pc, #288]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	4946      	ldr	r1, [pc, #280]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80015a2:	4b45      	ldr	r3, [pc, #276]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4943      	ldr	r1, [pc, #268]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80015b0:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	493f      	ldr	r1, [pc, #252]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80015be:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	493c      	ldr	r1, [pc, #240]	@ (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_GPIO_DeInit+0x1c4>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	43da      	mvns	r2, r3
 80015ec:	482a      	ldr	r0, [pc, #168]	@ (8001698 <HAL_GPIO_DeInit+0x1c4>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	400a      	ands	r2, r1
 80015f4:	3302      	adds	r3, #2
 80015f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2103      	movs	r1, #3
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	08d2      	lsrs	r2, r2, #3
 8001630:	4019      	ands	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2103      	movs	r1, #3
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2101      	movs	r1, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2103      	movs	r1, #3
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f af34 	bls.w	80014f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40013800 	.word	0x40013800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e12b      	b.n	800195a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fa1a 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	@ 0x24
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001754:	f000 fbda 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8001758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a81      	ldr	r2, [pc, #516]	@ (8001964 <HAL_I2C_Init+0x274>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d807      	bhi.n	8001774 <HAL_I2C_Init+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a80      	ldr	r2, [pc, #512]	@ (8001968 <HAL_I2C_Init+0x278>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e006      	b.n	8001782 <HAL_I2C_Init+0x92>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4a7d      	ldr	r2, [pc, #500]	@ (800196c <HAL_I2C_Init+0x27c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	bf94      	ite	ls
 800177c:	2301      	movls	r3, #1
 800177e:	2300      	movhi	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0e7      	b.n	800195a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a78      	ldr	r2, [pc, #480]	@ (8001970 <HAL_I2C_Init+0x280>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d802      	bhi.n	80017c4 <HAL_I2C_Init+0xd4>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	e009      	b.n	80017d8 <HAL_I2C_Init+0xe8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a69      	ldr	r2, [pc, #420]	@ (8001974 <HAL_I2C_Init+0x284>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	3301      	adds	r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	495c      	ldr	r1, [pc, #368]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d819      	bhi.n	800182c <HAL_I2C_Init+0x13c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fbb1 f3f3 	udiv	r3, r1, r3
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800180c:	400b      	ands	r3, r1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_I2C_Init+0x138>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	e051      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001828:	2304      	movs	r3, #4
 800182a:	e04f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_I2C_Init+0x168>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_I2C_Init+0x18e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x196>
 8001882:	2301      	movs	r3, #1
 8001884:	e022      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10e      	bne.n	80018ac <HAL_I2C_Init+0x1bc>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e58      	subs	r0, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6911      	ldr	r1, [r2, #16]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	000186a0 	.word	0x000186a0
 8001968:	001e847f 	.word	0x001e847f
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	431bde83 	.word	0x431bde83
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e021      	b.n	80019ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2224      	movs	r2, #36	@ 0x24
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff f91c 	bl	8000be0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	460b      	mov	r3, r1
 80019e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff faca 	bl	8000f80 <HAL_GetTick>
 80019ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	f040 8111 	bne.w	8001c22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2319      	movs	r3, #25
 8001a06:	2201      	movs	r2, #1
 8001a08:	4988      	ldr	r1, [pc, #544]	@ (8001c2c <HAL_I2C_IsDeviceReady+0x254>)
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f912 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	e104      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2C_IsDeviceReady+0x50>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e0fd      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d007      	beq.n	8001a4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2224      	movs	r2, #36	@ 0x24
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a70      	ldr	r2, [pc, #448]	@ (8001c30 <HAL_I2C_IsDeviceReady+0x258>)
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f8d0 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa8:	d103      	bne.n	8001ab2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0b6      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ab6:	897b      	ldrh	r3, [r7, #10]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ac4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa5b 	bl	8000f80 <HAL_GetTick>
 8001aca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001afa:	e025      	b.n	8001b48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001afc:	f7ff fa40 	bl	8000f80 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d302      	bcc.n	8001b12 <HAL_I2C_IsDeviceReady+0x13a>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	22a0      	movs	r2, #160	@ 0xa0
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b52:	d005      	beq.n	8001b60 <HAL_I2C_IsDeviceReady+0x188>
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_I2C_IsDeviceReady+0x188>
 8001b5a:	7dbb      	ldrb	r3, [r7, #22]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0cd      	beq.n	8001afc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d129      	bne.n	8001bca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4921      	ldr	r1, [pc, #132]	@ (8001c2c <HAL_I2C_IsDeviceReady+0x254>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f844 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e036      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e02c      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001be2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2319      	movs	r3, #25
 8001bea:	2201      	movs	r2, #1
 8001bec:	490f      	ldr	r1, [pc, #60]	@ (8001c2c <HAL_I2C_IsDeviceReady+0x254>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f820 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e012      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f4ff af32 	bcc.w	8001a72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	00100002 	.word	0x00100002
 8001c30:	ffff0000 	.word	0xffff0000

08001c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c44:	e048      	b.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d044      	beq.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7ff f997 	bl	8000f80 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d139      	bne.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10d      	bne.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	43da      	mvns	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	e00c      	b.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d116      	bne.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e023      	b.n	8001d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	0c1b      	lsrs	r3, r3, #16
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d10d      	bne.n	8001cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	e00c      	b.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d093      	beq.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f8b2 	bl	8000f80 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f8ae 	bl	8000f80 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f855 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f812 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	080045b4 	.word	0x080045b4
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080045c4 	.word	0x080045c4

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffdc 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0b5b      	lsrs	r3, r3, #13
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	080045c4 	.word	0x080045c4

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b0ae      	sub	sp, #184	@ 0xb8
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4bcb      	ldr	r3, [pc, #812]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	f200 8206 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x440>
 8001f90:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	0800239d 	.word	0x0800239d
 8001fa0:	0800239d 	.word	0x0800239d
 8001fa4:	0800239d 	.word	0x0800239d
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	0800239d 	.word	0x0800239d
 8001fb0:	0800239d 	.word	0x0800239d
 8001fb4:	0800239d 	.word	0x0800239d
 8001fb8:	08001fdd 	.word	0x08001fdd
 8001fbc:	0800239d 	.word	0x0800239d
 8001fc0:	0800239d 	.word	0x0800239d
 8001fc4:	0800239d 	.word	0x0800239d
 8001fc8:	080021cd 	.word	0x080021cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4bb9      	ldr	r3, [pc, #740]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fd2:	e1e7      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4bb8      	ldr	r3, [pc, #736]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fda:	e1e3      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4bb4      	ldr	r3, [pc, #720]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d071      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff4:	4bae      	ldr	r3, [pc, #696]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002000:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4621      	mov	r1, r4
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	6439      	str	r1, [r7, #64]	@ 0x40
 8002038:	4629      	mov	r1, r5
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800204c:	4649      	mov	r1, r9
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002056:	4641      	mov	r1, r8
 8002058:	018a      	lsls	r2, r1, #6
 800205a:	4641      	mov	r1, r8
 800205c:	1a51      	subs	r1, r2, r1
 800205e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002060:	4649      	mov	r1, r9
 8002062:	eb63 0301 	sbc.w	r3, r3, r1
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002074:	4649      	mov	r1, r9
 8002076:	00cb      	lsls	r3, r1, #3
 8002078:	4641      	mov	r1, r8
 800207a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800207e:	4641      	mov	r1, r8
 8002080:	00ca      	lsls	r2, r1, #3
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	4603      	mov	r3, r0
 8002088:	4622      	mov	r2, r4
 800208a:	189b      	adds	r3, r3, r2
 800208c:	633b      	str	r3, [r7, #48]	@ 0x30
 800208e:	462b      	mov	r3, r5
 8002090:	460a      	mov	r2, r1
 8002092:	eb42 0303 	adc.w	r3, r2, r3
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020a4:	4629      	mov	r1, r5
 80020a6:	024b      	lsls	r3, r1, #9
 80020a8:	4621      	mov	r1, r4
 80020aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ae:	4621      	mov	r1, r4
 80020b0:	024a      	lsls	r2, r1, #9
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020c8:	f7fe f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020d6:	e067      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4b75      	ldr	r3, [pc, #468]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020f2:	2300      	movs	r3, #0
 80020f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4621      	mov	r1, r4
 8002114:	1a51      	subs	r1, r2, r1
 8002116:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002118:	4629      	mov	r1, r5
 800211a:	eb63 0301 	sbc.w	r3, r3, r1
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800212c:	4649      	mov	r1, r9
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	4641      	mov	r1, r8
 8002132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002136:	4641      	mov	r1, r8
 8002138:	018a      	lsls	r2, r1, #6
 800213a:	4641      	mov	r1, r8
 800213c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002140:	4649      	mov	r1, r9
 8002142:	eb63 0b01 	sbc.w	fp, r3, r1
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002152:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800215a:	4692      	mov	sl, r2
 800215c:	469b      	mov	fp, r3
 800215e:	4623      	mov	r3, r4
 8002160:	eb1a 0303 	adds.w	r3, sl, r3
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	462b      	mov	r3, r5
 8002168:	eb4b 0303 	adc.w	r3, fp, r3
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002190:	2200      	movs	r2, #0
 8002192:	673b      	str	r3, [r7, #112]	@ 0x70
 8002194:	677a      	str	r2, [r7, #116]	@ 0x74
 8002196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800219a:	f7fe f891 	bl	80002c0 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ca:	e0eb      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b38      	ldr	r3, [pc, #224]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d8:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d06b      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4b32      	ldr	r3, [pc, #200]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80021f8:	2300      	movs	r3, #0
 80021fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80021fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002200:	4622      	mov	r2, r4
 8002202:	462b      	mov	r3, r5
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0159      	lsls	r1, r3, #5
 800220e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002212:	0150      	lsls	r0, r2, #5
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4621      	mov	r1, r4
 800221a:	1a51      	subs	r1, r2, r1
 800221c:	61b9      	str	r1, [r7, #24]
 800221e:	4629      	mov	r1, r5
 8002220:	eb63 0301 	sbc.w	r3, r3, r1
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002232:	4659      	mov	r1, fp
 8002234:	018b      	lsls	r3, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223c:	4651      	mov	r1, sl
 800223e:	018a      	lsls	r2, r1, #6
 8002240:	4651      	mov	r1, sl
 8002242:	ebb2 0801 	subs.w	r8, r2, r1
 8002246:	4659      	mov	r1, fp
 8002248:	eb63 0901 	sbc.w	r9, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800225c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	4623      	mov	r3, r4
 8002266:	eb18 0303 	adds.w	r3, r8, r3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	462b      	mov	r3, r5
 800226e:	eb49 0303 	adc.w	r3, r9, r3
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002280:	4629      	mov	r1, r5
 8002282:	024b      	lsls	r3, r1, #9
 8002284:	4621      	mov	r1, r4
 8002286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800228a:	4621      	mov	r1, r4
 800228c:	024a      	lsls	r2, r1, #9
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002296:	2200      	movs	r2, #0
 8002298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800229a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800229c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022a0:	f7fe f80e 	bl	80002c0 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ae:	e065      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x420>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b3d      	ldr	r3, [pc, #244]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	2200      	movs	r2, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	4611      	mov	r1, r2
 80022c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ce:	2300      	movs	r3, #0
 80022d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022d6:	4642      	mov	r2, r8
 80022d8:	464b      	mov	r3, r9
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	0159      	lsls	r1, r3, #5
 80022e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e8:	0150      	lsls	r0, r2, #5
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4641      	mov	r1, r8
 80022f0:	1a51      	subs	r1, r2, r1
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4649      	mov	r1, r9
 80022f6:	eb63 0301 	sbc.w	r3, r3, r1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002308:	4659      	mov	r1, fp
 800230a:	018b      	lsls	r3, r1, #6
 800230c:	4651      	mov	r1, sl
 800230e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002312:	4651      	mov	r1, sl
 8002314:	018a      	lsls	r2, r1, #6
 8002316:	4651      	mov	r1, sl
 8002318:	1a54      	subs	r4, r2, r1
 800231a:	4659      	mov	r1, fp
 800231c:	eb63 0501 	sbc.w	r5, r3, r1
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002364:	2200      	movs	r2, #0
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002368:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800236a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800236e:	f7fd ffa7 	bl	80002c0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4613      	mov	r3, r2
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0f1b      	lsrs	r3, r3, #28
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800238a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800238e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800239a:	e003      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	37b8      	adds	r7, #184	@ 0xb8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400

080023bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e28d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8083 	beq.w	80024e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023dc:	4b94      	ldr	r3, [pc, #592]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d019      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e8:	4b91      	ldr	r3, [pc, #580]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b8b      	ldr	r3, [pc, #556]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b84      	ldr	r3, [pc, #528]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x124>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e25a      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x90>
 800243e:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7b      	ldr	r2, [pc, #492]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xb4>
 8002456:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xcc>
 8002470:	4b6f      	ldr	r3, [pc, #444]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6e      	ldr	r2, [pc, #440]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6b      	ldr	r2, [pc, #428]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fd76 	bl	8000f80 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fd72 	bl	8000f80 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e21f      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b61      	ldr	r3, [pc, #388]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xdc>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fd62 	bl	8000f80 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fd5e 	bl	8000f80 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e20b      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06f      	beq.n	80025ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ee:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002502:	2b08      	cmp	r3, #8
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002506:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1d3      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <HAL_RCC_OscConfig+0x278>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd0b 	bl	8000f80 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe fd07 	bl	8000f80 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1b4      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x278>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fcea 	bl	8000f80 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7fe fce6 	bl	8000f80 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e193      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fcca 	bl	8000f80 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe fcc6 	bl	8000f80 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e173      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x274>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x234>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x27c>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fcb3 	bl	8000f80 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe fcaf 	bl	8000f80 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e15c      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b8a      	ldr	r3, [pc, #552]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b83      	ldr	r3, [pc, #524]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7f      	ldr	r3, [pc, #508]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4a7e      	ldr	r2, [pc, #504]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	@ 0x40
 8002676:	4b7c      	ldr	r3, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b79      	ldr	r3, [pc, #484]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b76      	ldr	r3, [pc, #472]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe fc6f 	bl	8000f80 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe fc6b 	bl	8000f80 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e118      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b6c      	ldr	r3, [pc, #432]	@ (800286c <HAL_RCC_OscConfig+0x4b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x31e>
 80026cc:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x340>
 80026e2:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a60      	ldr	r2, [pc, #384]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x358>
 80026fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a59      	ldr	r2, [pc, #356]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	4a56      	ldr	r2, [pc, #344]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fc30 	bl	8000f80 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fc2c 	bl	8000f80 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0d7      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x368>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fc1a 	bl	8000f80 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fc16 	bl	8000f80 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0c1      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ad 	beq.w	80028e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d145      	bne.n	800282e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fbea 	bl	8000f80 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fbe6 	bl	8000f80 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e093      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	491b      	ldr	r1, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fbbb 	bl	8000f80 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fbb7 	bl	8000f80 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e064      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
 800282c:	e05c      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCC_OscConfig+0x4b4>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fba4 	bl	8000f80 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fba0 	bl	8000f80 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e040      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_RCC_OscConfig+0x538>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d030      	beq.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d129      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d119      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10f      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f982 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 f9aa 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e041      	b.n	8002a2c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f839 	bl	8002a34 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 f95b 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e048      	b.n	8002af8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d839      	bhi.n	8002ae8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ae9 	.word	0x08002ae9
 8002a84:	08002ae9 	.word	0x08002ae9
 8002a88:	08002ae9 	.word	0x08002ae9
 8002a8c:	08002abf 	.word	0x08002abf
 8002a90:	08002ae9 	.word	0x08002ae9
 8002a94:	08002ae9 	.word	0x08002ae9
 8002a98:	08002ae9 	.word	0x08002ae9
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002ae9 	.word	0x08002ae9
 8002aa4:	08002ae9 	.word	0x08002ae9
 8002aa8:	08002ae9 	.word	0x08002ae9
 8002aac:	08002adb 	.word	0x08002adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f996 	bl	8002de8 <TIM_OC1_SetConfig>
      break;
 8002abc:	e017      	b.n	8002aee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f9ff 	bl	8002ec8 <TIM_OC2_SetConfig>
      break;
 8002aca:	e010      	b.n	8002aee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa6e 	bl	8002fb4 <TIM_OC3_SetConfig>
      break;
 8002ad8:	e009      	b.n	8002aee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fadb 	bl	800309c <TIM_OC4_SetConfig>
      break;
 8002ae6:	e002      	b.n	8002aee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
      break;
 8002aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_ConfigClockSource+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0b4      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x186>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b54:	d03e      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	f200 8087 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	f000 8086 	beq.w	8002c72 <HAL_TIM_ConfigClockSource+0x172>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6a:	d87f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b70      	cmp	r3, #112	@ 0x70
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d87b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b60      	cmp	r3, #96	@ 0x60
 8002b76:	d050      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x11a>
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d877      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b50      	cmp	r3, #80	@ 0x50
 8002b7e:	d03c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xfa>
 8002b80:	2b50      	cmp	r3, #80	@ 0x50
 8002b82:	d873      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b40      	cmp	r3, #64	@ 0x40
 8002b86:	d058      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x13a>
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d86f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b30      	cmp	r3, #48	@ 0x30
 8002b8e:	d064      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b30      	cmp	r3, #48	@ 0x30
 8002b92:	d86b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d060      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d867      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d05a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	e062      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	f000 fb41 	bl	800323c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	f000 fb2a 	bl	800323c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fa9e 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	@ 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 faf7 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002c18:	e02c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fabd 	bl	80031a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	@ 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fae7 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002c38:	e01c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 fa7e 	bl	8003148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fad7 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002c58:	e00c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 face 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a46      	ldr	r2, [pc, #280]	@ (8002dbc <TIM_Base_SetConfig+0x12c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a43      	ldr	r2, [pc, #268]	@ (8002dc0 <TIM_Base_SetConfig+0x130>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <TIM_Base_SetConfig+0x134>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a41      	ldr	r2, [pc, #260]	@ (8002dc8 <TIM_Base_SetConfig+0x138>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a40      	ldr	r2, [pc, #256]	@ (8002dcc <TIM_Base_SetConfig+0x13c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	@ (8002dbc <TIM_Base_SetConfig+0x12c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf0:	d027      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a32      	ldr	r2, [pc, #200]	@ (8002dc0 <TIM_Base_SetConfig+0x130>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d023      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a31      	ldr	r2, [pc, #196]	@ (8002dc4 <TIM_Base_SetConfig+0x134>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a30      	ldr	r2, [pc, #192]	@ (8002dc8 <TIM_Base_SetConfig+0x138>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002dcc <TIM_Base_SetConfig+0x13c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d017      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <TIM_Base_SetConfig+0x140>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <TIM_Base_SetConfig+0x144>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00f      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <TIM_Base_SetConfig+0x148>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <TIM_Base_SetConfig+0x14c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	@ (8002de0 <TIM_Base_SetConfig+0x150>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <TIM_Base_SetConfig+0x154>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0xf8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <TIM_Base_SetConfig+0x13c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d103      	bne.n	8002d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]
  }
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	40001800 	.word	0x40001800
 8002de0:	40001c00 	.word	0x40001c00
 8002de4:	40002000 	.word	0x40002000

08002de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f023 0201 	bic.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 0302 	bic.w	r3, r3, #2
 8002e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <TIM_OC1_SetConfig+0xd8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_OC1_SetConfig+0x64>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <TIM_OC1_SetConfig+0xdc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10c      	bne.n	8002e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0308 	bic.w	r3, r3, #8
 8002e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <TIM_OC1_SetConfig+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC1_SetConfig+0x8e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <TIM_OC1_SetConfig+0xdc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d111      	bne.n	8002e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0210 	bic.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0320 	bic.w	r3, r3, #32
 8002f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <TIM_OC2_SetConfig+0xe4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_OC2_SetConfig+0x68>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	@ (8002fb0 <TIM_OC2_SetConfig+0xe8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d10d      	bne.n	8002f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	@ (8002fac <TIM_OC2_SetConfig+0xe4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC2_SetConfig+0x94>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <TIM_OC2_SetConfig+0xe8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d113      	bne.n	8002f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <TIM_OC3_SetConfig+0xe0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_OC3_SetConfig+0x66>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <TIM_OC3_SetConfig+0xe4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <TIM_OC3_SetConfig+0xe0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_OC3_SetConfig+0x92>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <TIM_OC3_SetConfig+0xe4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d113      	bne.n	800306e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800304c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40010000 	.word	0x40010000
 8003098:	40010400 	.word	0x40010400

0800309c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <TIM_OC4_SetConfig+0xa4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_OC4_SetConfig+0x68>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <TIM_OC4_SetConfig+0xa8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d109      	bne.n	8003118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800310a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40010400 	.word	0x40010400

08003148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0201 	bic.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 030a 	bic.w	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 0210 	bic.w	r2, r3, #16
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	f043 0307 	orr.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	021a      	lsls	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	431a      	orrs	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003290:	2302      	movs	r3, #2
 8003292:	e05a      	b.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d01d      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a18      	ldr	r2, [pc, #96]	@ (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a17      	ldr	r2, [pc, #92]	@ (800336c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10c      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40010400 	.word	0x40010400
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800

08003374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e03d      	b.n	800340c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e042      	b.n	80034b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fc4e 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f973 	bl	8003748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d175      	bne.n	80035c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2c>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e06e      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	@ 0x21
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f6:	f7fd fd43 	bl	8000f80 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f848 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03a      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	@ 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f814 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e006      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e03b      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d037      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fd fcca 	bl	8000f80 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e03a      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d020      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b40      	cmp	r3, #64	@ 0x40
 800361a:	d01d      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b08      	cmp	r3, #8
 8003628:	d116      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f81d 	bl	8003680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2208      	movs	r2, #8
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e00f      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	429a      	cmp	r2, r3
 8003674:	d0b4      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b095      	sub	sp, #84	@ 0x54
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d119      	bne.n	800372c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60bb      	str	r3, [r7, #8]
   return(result);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003718:	61ba      	str	r2, [r7, #24]
 800371a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800373a:	bf00      	nop
 800373c:	3754      	adds	r7, #84	@ 0x54
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800374c:	b0c0      	sub	sp, #256	@ 0x100
 800374e:	af00      	add	r7, sp, #0
 8003750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	68d9      	ldr	r1, [r3, #12]
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	ea40 0301 	orr.w	r3, r0, r1
 8003770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037a0:	f021 010c 	bic.w	r1, r1, #12
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ae:	430b      	orrs	r3, r1
 80037b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	6999      	ldr	r1, [r3, #24]
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	ea40 0301 	orr.w	r3, r0, r1
 80037ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a14 <UART_SetConfig+0x2cc>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d005      	beq.n	80037e8 <UART_SetConfig+0xa0>
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003a18 <UART_SetConfig+0x2d0>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d104      	bne.n	80037f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fba4 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 80037ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037f0:	e003      	b.n	80037fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f2:	f7fe fb8b 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 80037f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003804:	f040 810c 	bne.w	8003a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380c:	2200      	movs	r2, #0
 800380e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800381a:	4622      	mov	r2, r4
 800381c:	462b      	mov	r3, r5
 800381e:	1891      	adds	r1, r2, r2
 8003820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003822:	415b      	adcs	r3, r3
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800382a:	4621      	mov	r1, r4
 800382c:	eb12 0801 	adds.w	r8, r2, r1
 8003830:	4629      	mov	r1, r5
 8003832:	eb43 0901 	adc.w	r9, r3, r1
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800384a:	4690      	mov	r8, r2
 800384c:	4699      	mov	r9, r3
 800384e:	4623      	mov	r3, r4
 8003850:	eb18 0303 	adds.w	r3, r8, r3
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003858:	462b      	mov	r3, r5
 800385a:	eb49 0303 	adc.w	r3, r9, r3
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800386e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003876:	460b      	mov	r3, r1
 8003878:	18db      	adds	r3, r3, r3
 800387a:	653b      	str	r3, [r7, #80]	@ 0x50
 800387c:	4613      	mov	r3, r2
 800387e:	eb42 0303 	adc.w	r3, r2, r3
 8003882:	657b      	str	r3, [r7, #84]	@ 0x54
 8003884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800388c:	f7fc fd18 	bl	80002c0 <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <UART_SetConfig+0x2d4>)
 8003896:	fba3 2302 	umull	r2, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	011c      	lsls	r4, r3, #4
 800389e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038b8:	415b      	adcs	r3, r3
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038c0:	4641      	mov	r1, r8
 80038c2:	eb12 0a01 	adds.w	sl, r2, r1
 80038c6:	4649      	mov	r1, r9
 80038c8:	eb43 0b01 	adc.w	fp, r3, r1
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e0:	4692      	mov	sl, r2
 80038e2:	469b      	mov	fp, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	eb1a 0303 	adds.w	r3, sl, r3
 80038ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ee:	464b      	mov	r3, r9
 80038f0:	eb4b 0303 	adc.w	r3, fp, r3
 80038f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800390c:	460b      	mov	r3, r1
 800390e:	18db      	adds	r3, r3, r3
 8003910:	643b      	str	r3, [r7, #64]	@ 0x40
 8003912:	4613      	mov	r3, r2
 8003914:	eb42 0303 	adc.w	r3, r2, r3
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
 800391a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800391e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003922:	f7fc fccd 	bl	80002c0 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4611      	mov	r1, r2
 800392c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <UART_SetConfig+0x2d4>)
 800392e:	fba3 2301 	umull	r2, r3, r3, r1
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2264      	movs	r2, #100	@ 0x64
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	1acb      	subs	r3, r1, r3
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003942:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <UART_SetConfig+0x2d4>)
 8003944:	fba3 2302 	umull	r2, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003950:	441c      	add	r4, r3
 8003952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800395c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003964:	4642      	mov	r2, r8
 8003966:	464b      	mov	r3, r9
 8003968:	1891      	adds	r1, r2, r2
 800396a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800396c:	415b      	adcs	r3, r3
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003974:	4641      	mov	r1, r8
 8003976:	1851      	adds	r1, r2, r1
 8003978:	6339      	str	r1, [r7, #48]	@ 0x30
 800397a:	4649      	mov	r1, r9
 800397c:	414b      	adcs	r3, r1
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800398c:	4659      	mov	r1, fp
 800398e:	00cb      	lsls	r3, r1, #3
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003996:	4651      	mov	r1, sl
 8003998:	00ca      	lsls	r2, r1, #3
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	4642      	mov	r2, r8
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a8:	464b      	mov	r3, r9
 80039aa:	460a      	mov	r2, r1
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c8:	460b      	mov	r3, r1
 80039ca:	18db      	adds	r3, r3, r3
 80039cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ce:	4613      	mov	r3, r2
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039de:	f7fc fc6f 	bl	80002c0 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <UART_SetConfig+0x2d4>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	@ 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	3332      	adds	r3, #50	@ 0x32
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <UART_SetConfig+0x2d4>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 0207 	and.w	r2, r3, #7
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4422      	add	r2, r4
 8003a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a10:	e106      	b.n	8003c20 <UART_SetConfig+0x4d8>
 8003a12:	bf00      	nop
 8003a14:	40011000 	.word	0x40011000
 8003a18:	40011400 	.word	0x40011400
 8003a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a32:	4642      	mov	r2, r8
 8003a34:	464b      	mov	r3, r9
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	6239      	str	r1, [r7, #32]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a42:	4641      	mov	r1, r8
 8003a44:	1854      	adds	r4, r2, r1
 8003a46:	4649      	mov	r1, r9
 8003a48:	eb43 0501 	adc.w	r5, r3, r1
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	00eb      	lsls	r3, r5, #3
 8003a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a5a:	00e2      	lsls	r2, r4, #3
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	461d      	mov	r5, r3
 8003a60:	4643      	mov	r3, r8
 8003a62:	18e3      	adds	r3, r4, r3
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a68:	464b      	mov	r3, r9
 8003a6a:	eb45 0303 	adc.w	r3, r5, r3
 8003a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a8e:	4629      	mov	r1, r5
 8003a90:	008b      	lsls	r3, r1, #2
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a98:	4621      	mov	r1, r4
 8003a9a:	008a      	lsls	r2, r1, #2
 8003a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aa0:	f7fc fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b60      	ldr	r3, [pc, #384]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011c      	lsls	r4, r3, #4
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	61b9      	str	r1, [r7, #24]
 8003acc:	415b      	adcs	r3, r3
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6139      	str	r1, [r7, #16]
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b08:	464b      	mov	r3, r9
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	008b      	lsls	r3, r1, #2
 8003b30:	4641      	mov	r1, r8
 8003b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b36:	4641      	mov	r1, r8
 8003b38:	008a      	lsls	r2, r1, #2
 8003b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b3e:	f7fc fbbf 	bl	80002c0 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2264      	movs	r2, #100	@ 0x64
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	1acb      	subs	r3, r1, r3
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	3332      	adds	r3, #50	@ 0x32
 8003b5c:	4a33      	ldr	r2, [pc, #204]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b68:	441c      	add	r4, r3
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	415b      	adcs	r3, r3
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bba:	464b      	mov	r3, r9
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	eb42 0303 	adc.w	r3, r2, r3
 8003bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bdc:	4649      	mov	r1, r9
 8003bde:	008b      	lsls	r3, r1, #2
 8003be0:	4641      	mov	r1, r8
 8003be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be6:	4641      	mov	r1, r8
 8003be8:	008a      	lsls	r2, r1, #2
 8003bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bee:	f7fc fb67 	bl	80002c0 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	@ 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	3332      	adds	r3, #50	@ 0x32
 8003c0a:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 020f 	and.w	r2, r3, #15
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4422      	add	r2, r4
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c26:	46bd      	mov	sp, r7
 8003c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2c:	51eb851f 	.word	0x51eb851f

08003c30 <siprintf>:
 8003c30:	b40e      	push	{r1, r2, r3}
 8003c32:	b500      	push	{lr}
 8003c34:	b09c      	sub	sp, #112	@ 0x70
 8003c36:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c38:	9002      	str	r0, [sp, #8]
 8003c3a:	9006      	str	r0, [sp, #24]
 8003c3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c40:	4809      	ldr	r0, [pc, #36]	@ (8003c68 <siprintf+0x38>)
 8003c42:	9107      	str	r1, [sp, #28]
 8003c44:	9104      	str	r1, [sp, #16]
 8003c46:	4909      	ldr	r1, [pc, #36]	@ (8003c6c <siprintf+0x3c>)
 8003c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c4c:	9105      	str	r1, [sp, #20]
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	a902      	add	r1, sp, #8
 8003c54:	f000 f994 	bl	8003f80 <_svfiprintf_r>
 8003c58:	9b02      	ldr	r3, [sp, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	b01c      	add	sp, #112	@ 0x70
 8003c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c64:	b003      	add	sp, #12
 8003c66:	4770      	bx	lr
 8003c68:	2000000c 	.word	0x2000000c
 8003c6c:	ffff0208 	.word	0xffff0208

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <__errno>:
 8003c80:	4b01      	ldr	r3, [pc, #4]	@ (8003c88 <__errno+0x8>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	2000000c 	.word	0x2000000c

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f000 fc66 	bl	8004570 <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08004608 	.word	0x08004608
 8003cc8:	08004608 	.word	0x08004608
 8003ccc:	08004608 	.word	0x08004608
 8003cd0:	0800460c 	.word	0x0800460c

08003cd4 <__retarget_lock_acquire_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <__retarget_lock_release_recursive>:
 8003cd6:	4770      	bx	lr

08003cd8 <_free_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4605      	mov	r5, r0
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	d041      	beq.n	8003d64 <_free_r+0x8c>
 8003ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce4:	1f0c      	subs	r4, r1, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfb8      	it	lt
 8003cea:	18e4      	addlt	r4, r4, r3
 8003cec:	f000 f8e0 	bl	8003eb0 <__malloc_lock>
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <_free_r+0x90>)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	b933      	cbnz	r3, 8003d04 <_free_r+0x2c>
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6014      	str	r4, [r2, #0]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d00:	f000 b8dc 	b.w	8003ebc <__malloc_unlock>
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d908      	bls.n	8003d1a <_free_r+0x42>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf01      	itttt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	1809      	addeq	r1, r1, r0
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	e7ed      	b.n	8003cf6 <_free_r+0x1e>
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b10b      	cbz	r3, 8003d24 <_free_r+0x4c>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d9fa      	bls.n	8003d1a <_free_r+0x42>
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	1850      	adds	r0, r2, r1
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d10b      	bne.n	8003d44 <_free_r+0x6c>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	4401      	add	r1, r0
 8003d30:	1850      	adds	r0, r2, r1
 8003d32:	4283      	cmp	r3, r0
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	d1e0      	bne.n	8003cfa <_free_r+0x22>
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6053      	str	r3, [r2, #4]
 8003d3e:	4408      	add	r0, r1
 8003d40:	6010      	str	r0, [r2, #0]
 8003d42:	e7da      	b.n	8003cfa <_free_r+0x22>
 8003d44:	d902      	bls.n	8003d4c <_free_r+0x74>
 8003d46:	230c      	movs	r3, #12
 8003d48:	602b      	str	r3, [r5, #0]
 8003d4a:	e7d6      	b.n	8003cfa <_free_r+0x22>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	1821      	adds	r1, r4, r0
 8003d50:	428b      	cmp	r3, r1
 8003d52:	bf04      	itt	eq
 8003d54:	6819      	ldreq	r1, [r3, #0]
 8003d56:	685b      	ldreq	r3, [r3, #4]
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	bf04      	itt	eq
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	6054      	str	r4, [r2, #4]
 8003d62:	e7ca      	b.n	8003cfa <_free_r+0x22>
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	bf00      	nop
 8003d68:	200002a8 	.word	0x200002a8

08003d6c <sbrk_aligned>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8003dac <sbrk_aligned+0x40>)
 8003d70:	460c      	mov	r4, r1
 8003d72:	6831      	ldr	r1, [r6, #0]
 8003d74:	4605      	mov	r5, r0
 8003d76:	b911      	cbnz	r1, 8003d7e <sbrk_aligned+0x12>
 8003d78:	f000 fba6 	bl	80044c8 <_sbrk_r>
 8003d7c:	6030      	str	r0, [r6, #0]
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 fba1 	bl	80044c8 <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d103      	bne.n	8003d92 <sbrk_aligned+0x26>
 8003d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d8e:	4620      	mov	r0, r4
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	1cc4      	adds	r4, r0, #3
 8003d94:	f024 0403 	bic.w	r4, r4, #3
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d0f8      	beq.n	8003d8e <sbrk_aligned+0x22>
 8003d9c:	1a21      	subs	r1, r4, r0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 fb92 	bl	80044c8 <_sbrk_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d1f2      	bne.n	8003d8e <sbrk_aligned+0x22>
 8003da8:	e7ef      	b.n	8003d8a <sbrk_aligned+0x1e>
 8003daa:	bf00      	nop
 8003dac:	200002a4 	.word	0x200002a4

08003db0 <_malloc_r>:
 8003db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db4:	1ccd      	adds	r5, r1, #3
 8003db6:	f025 0503 	bic.w	r5, r5, #3
 8003dba:	3508      	adds	r5, #8
 8003dbc:	2d0c      	cmp	r5, #12
 8003dbe:	bf38      	it	cc
 8003dc0:	250c      	movcc	r5, #12
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	db01      	blt.n	8003dcc <_malloc_r+0x1c>
 8003dc8:	42a9      	cmp	r1, r5
 8003dca:	d904      	bls.n	8003dd6 <_malloc_r+0x26>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003eac <_malloc_r+0xfc>
 8003dda:	f000 f869 	bl	8003eb0 <__malloc_lock>
 8003dde:	f8d8 3000 	ldr.w	r3, [r8]
 8003de2:	461c      	mov	r4, r3
 8003de4:	bb44      	cbnz	r4, 8003e38 <_malloc_r+0x88>
 8003de6:	4629      	mov	r1, r5
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff ffbf 	bl	8003d6c <sbrk_aligned>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	4604      	mov	r4, r0
 8003df2:	d158      	bne.n	8003ea6 <_malloc_r+0xf6>
 8003df4:	f8d8 4000 	ldr.w	r4, [r8]
 8003df8:	4627      	mov	r7, r4
 8003dfa:	2f00      	cmp	r7, #0
 8003dfc:	d143      	bne.n	8003e86 <_malloc_r+0xd6>
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d04b      	beq.n	8003e9a <_malloc_r+0xea>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	4639      	mov	r1, r7
 8003e06:	4630      	mov	r0, r6
 8003e08:	eb04 0903 	add.w	r9, r4, r3
 8003e0c:	f000 fb5c 	bl	80044c8 <_sbrk_r>
 8003e10:	4581      	cmp	r9, r0
 8003e12:	d142      	bne.n	8003e9a <_malloc_r+0xea>
 8003e14:	6821      	ldr	r1, [r4, #0]
 8003e16:	1a6d      	subs	r5, r5, r1
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f7ff ffa6 	bl	8003d6c <sbrk_aligned>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d03a      	beq.n	8003e9a <_malloc_r+0xea>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	442b      	add	r3, r5
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	bb62      	cbnz	r2, 8003e8c <_malloc_r+0xdc>
 8003e32:	f8c8 7000 	str.w	r7, [r8]
 8003e36:	e00f      	b.n	8003e58 <_malloc_r+0xa8>
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	1b52      	subs	r2, r2, r5
 8003e3c:	d420      	bmi.n	8003e80 <_malloc_r+0xd0>
 8003e3e:	2a0b      	cmp	r2, #11
 8003e40:	d917      	bls.n	8003e72 <_malloc_r+0xc2>
 8003e42:	1961      	adds	r1, r4, r5
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	6025      	str	r5, [r4, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	6059      	strne	r1, [r3, #4]
 8003e4c:	6863      	ldr	r3, [r4, #4]
 8003e4e:	bf08      	it	eq
 8003e50:	f8c8 1000 	streq.w	r1, [r8]
 8003e54:	5162      	str	r2, [r4, r5]
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f000 f82f 	bl	8003ebc <__malloc_unlock>
 8003e5e:	f104 000b 	add.w	r0, r4, #11
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	f020 0007 	bic.w	r0, r0, #7
 8003e68:	1ac2      	subs	r2, r0, r3
 8003e6a:	bf1c      	itt	ne
 8003e6c:	1a1b      	subne	r3, r3, r0
 8003e6e:	50a3      	strne	r3, [r4, r2]
 8003e70:	e7af      	b.n	8003dd2 <_malloc_r+0x22>
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	bf0c      	ite	eq
 8003e78:	f8c8 2000 	streq.w	r2, [r8]
 8003e7c:	605a      	strne	r2, [r3, #4]
 8003e7e:	e7eb      	b.n	8003e58 <_malloc_r+0xa8>
 8003e80:	4623      	mov	r3, r4
 8003e82:	6864      	ldr	r4, [r4, #4]
 8003e84:	e7ae      	b.n	8003de4 <_malloc_r+0x34>
 8003e86:	463c      	mov	r4, r7
 8003e88:	687f      	ldr	r7, [r7, #4]
 8003e8a:	e7b6      	b.n	8003dfa <_malloc_r+0x4a>
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d1fb      	bne.n	8003e8c <_malloc_r+0xdc>
 8003e94:	2300      	movs	r3, #0
 8003e96:	6053      	str	r3, [r2, #4]
 8003e98:	e7de      	b.n	8003e58 <_malloc_r+0xa8>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	6033      	str	r3, [r6, #0]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f000 f80c 	bl	8003ebc <__malloc_unlock>
 8003ea4:	e794      	b.n	8003dd0 <_malloc_r+0x20>
 8003ea6:	6005      	str	r5, [r0, #0]
 8003ea8:	e7d6      	b.n	8003e58 <_malloc_r+0xa8>
 8003eaa:	bf00      	nop
 8003eac:	200002a8 	.word	0x200002a8

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	@ (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f7ff bf0f 	b.w	8003cd4 <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	200002a0 	.word	0x200002a0

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	@ (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f7ff bf0a 	b.w	8003cd6 <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	200002a0 	.word	0x200002a0

08003ec8 <__ssputs_r>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	688e      	ldr	r6, [r1, #8]
 8003ece:	461f      	mov	r7, r3
 8003ed0:	42be      	cmp	r6, r7
 8003ed2:	680b      	ldr	r3, [r1, #0]
 8003ed4:	4682      	mov	sl, r0
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	4690      	mov	r8, r2
 8003eda:	d82d      	bhi.n	8003f38 <__ssputs_r+0x70>
 8003edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ee4:	d026      	beq.n	8003f34 <__ssputs_r+0x6c>
 8003ee6:	6965      	ldr	r5, [r4, #20]
 8003ee8:	6909      	ldr	r1, [r1, #16]
 8003eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eee:	eba3 0901 	sub.w	r9, r3, r1
 8003ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ef6:	1c7b      	adds	r3, r7, #1
 8003ef8:	444b      	add	r3, r9
 8003efa:	106d      	asrs	r5, r5, #1
 8003efc:	429d      	cmp	r5, r3
 8003efe:	bf38      	it	cc
 8003f00:	461d      	movcc	r5, r3
 8003f02:	0553      	lsls	r3, r2, #21
 8003f04:	d527      	bpl.n	8003f56 <__ssputs_r+0x8e>
 8003f06:	4629      	mov	r1, r5
 8003f08:	f7ff ff52 	bl	8003db0 <_malloc_r>
 8003f0c:	4606      	mov	r6, r0
 8003f0e:	b360      	cbz	r0, 8003f6a <__ssputs_r+0xa2>
 8003f10:	6921      	ldr	r1, [r4, #16]
 8003f12:	464a      	mov	r2, r9
 8003f14:	f000 fae8 	bl	80044e8 <memcpy>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	6126      	str	r6, [r4, #16]
 8003f26:	6165      	str	r5, [r4, #20]
 8003f28:	444e      	add	r6, r9
 8003f2a:	eba5 0509 	sub.w	r5, r5, r9
 8003f2e:	6026      	str	r6, [r4, #0]
 8003f30:	60a5      	str	r5, [r4, #8]
 8003f32:	463e      	mov	r6, r7
 8003f34:	42be      	cmp	r6, r7
 8003f36:	d900      	bls.n	8003f3a <__ssputs_r+0x72>
 8003f38:	463e      	mov	r6, r7
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	4641      	mov	r1, r8
 8003f40:	f000 faa8 	bl	8004494 <memmove>
 8003f44:	68a3      	ldr	r3, [r4, #8]
 8003f46:	1b9b      	subs	r3, r3, r6
 8003f48:	60a3      	str	r3, [r4, #8]
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	4433      	add	r3, r6
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	2000      	movs	r0, #0
 8003f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f56:	462a      	mov	r2, r5
 8003f58:	f000 fad4 	bl	8004504 <_realloc_r>
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d1e0      	bne.n	8003f24 <__ssputs_r+0x5c>
 8003f62:	6921      	ldr	r1, [r4, #16]
 8003f64:	4650      	mov	r0, sl
 8003f66:	f7ff feb7 	bl	8003cd8 <_free_r>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	f8ca 3000 	str.w	r3, [sl]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	e7e9      	b.n	8003f52 <__ssputs_r+0x8a>
	...

08003f80 <_svfiprintf_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	4698      	mov	r8, r3
 8003f86:	898b      	ldrh	r3, [r1, #12]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	b09d      	sub	sp, #116	@ 0x74
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	d510      	bpl.n	8003fb6 <_svfiprintf_r+0x36>
 8003f94:	690b      	ldr	r3, [r1, #16]
 8003f96:	b973      	cbnz	r3, 8003fb6 <_svfiprintf_r+0x36>
 8003f98:	2140      	movs	r1, #64	@ 0x40
 8003f9a:	f7ff ff09 	bl	8003db0 <_malloc_r>
 8003f9e:	6028      	str	r0, [r5, #0]
 8003fa0:	6128      	str	r0, [r5, #16]
 8003fa2:	b930      	cbnz	r0, 8003fb2 <_svfiprintf_r+0x32>
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	b01d      	add	sp, #116	@ 0x74
 8003fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb2:	2340      	movs	r3, #64	@ 0x40
 8003fb4:	616b      	str	r3, [r5, #20]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fba:	2320      	movs	r3, #32
 8003fbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc4:	2330      	movs	r3, #48	@ 0x30
 8003fc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004164 <_svfiprintf_r+0x1e4>
 8003fca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fce:	f04f 0901 	mov.w	r9, #1
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fda:	b10a      	cbz	r2, 8003fe0 <_svfiprintf_r+0x60>
 8003fdc:	2a25      	cmp	r2, #37	@ 0x25
 8003fde:	d1f9      	bne.n	8003fd4 <_svfiprintf_r+0x54>
 8003fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe4:	d00b      	beq.n	8003ffe <_svfiprintf_r+0x7e>
 8003fe6:	465b      	mov	r3, fp
 8003fe8:	4622      	mov	r2, r4
 8003fea:	4629      	mov	r1, r5
 8003fec:	4638      	mov	r0, r7
 8003fee:	f7ff ff6b 	bl	8003ec8 <__ssputs_r>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f000 80a7 	beq.w	8004146 <_svfiprintf_r+0x1c6>
 8003ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ffa:	445a      	add	r2, fp
 8003ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 809f 	beq.w	8004146 <_svfiprintf_r+0x1c6>
 8004008:	2300      	movs	r3, #0
 800400a:	f04f 32ff 	mov.w	r2, #4294967295
 800400e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004012:	f10a 0a01 	add.w	sl, sl, #1
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	9307      	str	r3, [sp, #28]
 800401a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800401e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004020:	4654      	mov	r4, sl
 8004022:	2205      	movs	r2, #5
 8004024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004028:	484e      	ldr	r0, [pc, #312]	@ (8004164 <_svfiprintf_r+0x1e4>)
 800402a:	f7fc f8f9 	bl	8000220 <memchr>
 800402e:	9a04      	ldr	r2, [sp, #16]
 8004030:	b9d8      	cbnz	r0, 800406a <_svfiprintf_r+0xea>
 8004032:	06d0      	lsls	r0, r2, #27
 8004034:	bf44      	itt	mi
 8004036:	2320      	movmi	r3, #32
 8004038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800403c:	0711      	lsls	r1, r2, #28
 800403e:	bf44      	itt	mi
 8004040:	232b      	movmi	r3, #43	@ 0x2b
 8004042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004046:	f89a 3000 	ldrb.w	r3, [sl]
 800404a:	2b2a      	cmp	r3, #42	@ 0x2a
 800404c:	d015      	beq.n	800407a <_svfiprintf_r+0xfa>
 800404e:	9a07      	ldr	r2, [sp, #28]
 8004050:	4654      	mov	r4, sl
 8004052:	2000      	movs	r0, #0
 8004054:	f04f 0c0a 	mov.w	ip, #10
 8004058:	4621      	mov	r1, r4
 800405a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800405e:	3b30      	subs	r3, #48	@ 0x30
 8004060:	2b09      	cmp	r3, #9
 8004062:	d94b      	bls.n	80040fc <_svfiprintf_r+0x17c>
 8004064:	b1b0      	cbz	r0, 8004094 <_svfiprintf_r+0x114>
 8004066:	9207      	str	r2, [sp, #28]
 8004068:	e014      	b.n	8004094 <_svfiprintf_r+0x114>
 800406a:	eba0 0308 	sub.w	r3, r0, r8
 800406e:	fa09 f303 	lsl.w	r3, r9, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	46a2      	mov	sl, r4
 8004078:	e7d2      	b.n	8004020 <_svfiprintf_r+0xa0>
 800407a:	9b03      	ldr	r3, [sp, #12]
 800407c:	1d19      	adds	r1, r3, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	9103      	str	r1, [sp, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	bfbb      	ittet	lt
 8004086:	425b      	neglt	r3, r3
 8004088:	f042 0202 	orrlt.w	r2, r2, #2
 800408c:	9307      	strge	r3, [sp, #28]
 800408e:	9307      	strlt	r3, [sp, #28]
 8004090:	bfb8      	it	lt
 8004092:	9204      	strlt	r2, [sp, #16]
 8004094:	7823      	ldrb	r3, [r4, #0]
 8004096:	2b2e      	cmp	r3, #46	@ 0x2e
 8004098:	d10a      	bne.n	80040b0 <_svfiprintf_r+0x130>
 800409a:	7863      	ldrb	r3, [r4, #1]
 800409c:	2b2a      	cmp	r3, #42	@ 0x2a
 800409e:	d132      	bne.n	8004106 <_svfiprintf_r+0x186>
 80040a0:	9b03      	ldr	r3, [sp, #12]
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	9203      	str	r2, [sp, #12]
 80040a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040ac:	3402      	adds	r4, #2
 80040ae:	9305      	str	r3, [sp, #20]
 80040b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004174 <_svfiprintf_r+0x1f4>
 80040b4:	7821      	ldrb	r1, [r4, #0]
 80040b6:	2203      	movs	r2, #3
 80040b8:	4650      	mov	r0, sl
 80040ba:	f7fc f8b1 	bl	8000220 <memchr>
 80040be:	b138      	cbz	r0, 80040d0 <_svfiprintf_r+0x150>
 80040c0:	9b04      	ldr	r3, [sp, #16]
 80040c2:	eba0 000a 	sub.w	r0, r0, sl
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	4082      	lsls	r2, r0
 80040ca:	4313      	orrs	r3, r2
 80040cc:	3401      	adds	r4, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d4:	4824      	ldr	r0, [pc, #144]	@ (8004168 <_svfiprintf_r+0x1e8>)
 80040d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040da:	2206      	movs	r2, #6
 80040dc:	f7fc f8a0 	bl	8000220 <memchr>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d036      	beq.n	8004152 <_svfiprintf_r+0x1d2>
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <_svfiprintf_r+0x1ec>)
 80040e6:	bb1b      	cbnz	r3, 8004130 <_svfiprintf_r+0x1b0>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	3307      	adds	r3, #7
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	3308      	adds	r3, #8
 80040f2:	9303      	str	r3, [sp, #12]
 80040f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040f6:	4433      	add	r3, r6
 80040f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040fa:	e76a      	b.n	8003fd2 <_svfiprintf_r+0x52>
 80040fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004100:	460c      	mov	r4, r1
 8004102:	2001      	movs	r0, #1
 8004104:	e7a8      	b.n	8004058 <_svfiprintf_r+0xd8>
 8004106:	2300      	movs	r3, #0
 8004108:	3401      	adds	r4, #1
 800410a:	9305      	str	r3, [sp, #20]
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0c0a 	mov.w	ip, #10
 8004112:	4620      	mov	r0, r4
 8004114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004118:	3a30      	subs	r2, #48	@ 0x30
 800411a:	2a09      	cmp	r2, #9
 800411c:	d903      	bls.n	8004126 <_svfiprintf_r+0x1a6>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0c6      	beq.n	80040b0 <_svfiprintf_r+0x130>
 8004122:	9105      	str	r1, [sp, #20]
 8004124:	e7c4      	b.n	80040b0 <_svfiprintf_r+0x130>
 8004126:	fb0c 2101 	mla	r1, ip, r1, r2
 800412a:	4604      	mov	r4, r0
 800412c:	2301      	movs	r3, #1
 800412e:	e7f0      	b.n	8004112 <_svfiprintf_r+0x192>
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <_svfiprintf_r+0x1f0>)
 8004138:	a904      	add	r1, sp, #16
 800413a:	4638      	mov	r0, r7
 800413c:	f3af 8000 	nop.w
 8004140:	1c42      	adds	r2, r0, #1
 8004142:	4606      	mov	r6, r0
 8004144:	d1d6      	bne.n	80040f4 <_svfiprintf_r+0x174>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	065b      	lsls	r3, r3, #25
 800414a:	f53f af2d 	bmi.w	8003fa8 <_svfiprintf_r+0x28>
 800414e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004150:	e72c      	b.n	8003fac <_svfiprintf_r+0x2c>
 8004152:	ab03      	add	r3, sp, #12
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	462a      	mov	r2, r5
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <_svfiprintf_r+0x1f0>)
 800415a:	a904      	add	r1, sp, #16
 800415c:	4638      	mov	r0, r7
 800415e:	f000 f879 	bl	8004254 <_printf_i>
 8004162:	e7ed      	b.n	8004140 <_svfiprintf_r+0x1c0>
 8004164:	080045cc 	.word	0x080045cc
 8004168:	080045d6 	.word	0x080045d6
 800416c:	00000000 	.word	0x00000000
 8004170:	08003ec9 	.word	0x08003ec9
 8004174:	080045d2 	.word	0x080045d2

08004178 <_printf_common>:
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	4616      	mov	r6, r2
 800417e:	4698      	mov	r8, r3
 8004180:	688a      	ldr	r2, [r1, #8]
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004188:	4293      	cmp	r3, r2
 800418a:	bfb8      	it	lt
 800418c:	4613      	movlt	r3, r2
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004194:	4607      	mov	r7, r0
 8004196:	460c      	mov	r4, r1
 8004198:	b10a      	cbz	r2, 800419e <_printf_common+0x26>
 800419a:	3301      	adds	r3, #1
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0699      	lsls	r1, r3, #26
 80041a2:	bf42      	ittt	mi
 80041a4:	6833      	ldrmi	r3, [r6, #0]
 80041a6:	3302      	addmi	r3, #2
 80041a8:	6033      	strmi	r3, [r6, #0]
 80041aa:	6825      	ldr	r5, [r4, #0]
 80041ac:	f015 0506 	ands.w	r5, r5, #6
 80041b0:	d106      	bne.n	80041c0 <_printf_common+0x48>
 80041b2:	f104 0a19 	add.w	sl, r4, #25
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	42ab      	cmp	r3, r5
 80041be:	dc26      	bgt.n	800420e <_printf_common+0x96>
 80041c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	3b00      	subs	r3, #0
 80041c8:	bf18      	it	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	0692      	lsls	r2, r2, #26
 80041ce:	d42b      	bmi.n	8004228 <_printf_common+0xb0>
 80041d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041d4:	4641      	mov	r1, r8
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c8      	blx	r9
 80041da:	3001      	adds	r0, #1
 80041dc:	d01e      	beq.n	800421c <_printf_common+0xa4>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	6922      	ldr	r2, [r4, #16]
 80041e2:	f003 0306 	and.w	r3, r3, #6
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	bf02      	ittt	eq
 80041ea:	68e5      	ldreq	r5, [r4, #12]
 80041ec:	6833      	ldreq	r3, [r6, #0]
 80041ee:	1aed      	subeq	r5, r5, r3
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	bf0c      	ite	eq
 80041f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f8:	2500      	movne	r5, #0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	bfc4      	itt	gt
 80041fe:	1a9b      	subgt	r3, r3, r2
 8004200:	18ed      	addgt	r5, r5, r3
 8004202:	2600      	movs	r6, #0
 8004204:	341a      	adds	r4, #26
 8004206:	42b5      	cmp	r5, r6
 8004208:	d11a      	bne.n	8004240 <_printf_common+0xc8>
 800420a:	2000      	movs	r0, #0
 800420c:	e008      	b.n	8004220 <_printf_common+0xa8>
 800420e:	2301      	movs	r3, #1
 8004210:	4652      	mov	r2, sl
 8004212:	4641      	mov	r1, r8
 8004214:	4638      	mov	r0, r7
 8004216:	47c8      	blx	r9
 8004218:	3001      	adds	r0, #1
 800421a:	d103      	bne.n	8004224 <_printf_common+0xac>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004224:	3501      	adds	r5, #1
 8004226:	e7c6      	b.n	80041b6 <_printf_common+0x3e>
 8004228:	18e1      	adds	r1, r4, r3
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	2030      	movs	r0, #48	@ 0x30
 800422e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004232:	4422      	add	r2, r4
 8004234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800423c:	3302      	adds	r3, #2
 800423e:	e7c7      	b.n	80041d0 <_printf_common+0x58>
 8004240:	2301      	movs	r3, #1
 8004242:	4622      	mov	r2, r4
 8004244:	4641      	mov	r1, r8
 8004246:	4638      	mov	r0, r7
 8004248:	47c8      	blx	r9
 800424a:	3001      	adds	r0, #1
 800424c:	d0e6      	beq.n	800421c <_printf_common+0xa4>
 800424e:	3601      	adds	r6, #1
 8004250:	e7d9      	b.n	8004206 <_printf_common+0x8e>
	...

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	7e0f      	ldrb	r7, [r1, #24]
 800425a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800425c:	2f78      	cmp	r7, #120	@ 0x78
 800425e:	4691      	mov	r9, r2
 8004260:	4680      	mov	r8, r0
 8004262:	460c      	mov	r4, r1
 8004264:	469a      	mov	sl, r3
 8004266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	@ 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d2 	beq.w	800441a <_printf_i+0x1c6>
 8004276:	2f58      	cmp	r7, #88	@ 0x58
 8004278:	f000 80b9 	beq.w	80043ee <_printf_i+0x19a>
 800427c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a101      	add	r1, pc, #4	@ (adr r1, 8004294 <_printf_i+0x40>)
 8004290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	08004401 	.word	0x08004401
 80042c4:	0800432b 	.word	0x0800432b
 80042c8:	080043bb 	.word	0x080043bb
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	08004423 	.word	0x08004423
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	0800432b 	.word	0x0800432b
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043c3 	.word	0x080043c3
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6032      	str	r2, [r6, #0]
 80042f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e09d      	b.n	800443c <_printf_i+0x1e8>
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1d19      	adds	r1, r3, #4
 8004306:	6031      	str	r1, [r6, #0]
 8004308:	0606      	lsls	r6, r0, #24
 800430a:	d501      	bpl.n	8004310 <_printf_i+0xbc>
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	e003      	b.n	8004318 <_printf_i+0xc4>
 8004310:	0645      	lsls	r5, r0, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0xb8>
 8004314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004318:	2d00      	cmp	r5, #0
 800431a:	da03      	bge.n	8004324 <_printf_i+0xd0>
 800431c:	232d      	movs	r3, #45	@ 0x2d
 800431e:	426d      	negs	r5, r5
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004324:	4859      	ldr	r0, [pc, #356]	@ (800448c <_printf_i+0x238>)
 8004326:	230a      	movs	r3, #10
 8004328:	e011      	b.n	800434e <_printf_i+0xfa>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	0608      	lsls	r0, r1, #24
 8004330:	f853 5b04 	ldr.w	r5, [r3], #4
 8004334:	d402      	bmi.n	800433c <_printf_i+0xe8>
 8004336:	0649      	lsls	r1, r1, #25
 8004338:	bf48      	it	mi
 800433a:	b2ad      	uxthmi	r5, r5
 800433c:	2f6f      	cmp	r7, #111	@ 0x6f
 800433e:	4853      	ldr	r0, [pc, #332]	@ (800448c <_printf_i+0x238>)
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	bf14      	ite	ne
 8004344:	230a      	movne	r3, #10
 8004346:	2308      	moveq	r3, #8
 8004348:	2100      	movs	r1, #0
 800434a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800434e:	6866      	ldr	r6, [r4, #4]
 8004350:	60a6      	str	r6, [r4, #8]
 8004352:	2e00      	cmp	r6, #0
 8004354:	bfa2      	ittt	ge
 8004356:	6821      	ldrge	r1, [r4, #0]
 8004358:	f021 0104 	bicge.w	r1, r1, #4
 800435c:	6021      	strge	r1, [r4, #0]
 800435e:	b90d      	cbnz	r5, 8004364 <_printf_i+0x110>
 8004360:	2e00      	cmp	r6, #0
 8004362:	d04b      	beq.n	80043fc <_printf_i+0x1a8>
 8004364:	4616      	mov	r6, r2
 8004366:	fbb5 f1f3 	udiv	r1, r5, r3
 800436a:	fb03 5711 	mls	r7, r3, r1, r5
 800436e:	5dc7      	ldrb	r7, [r0, r7]
 8004370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004374:	462f      	mov	r7, r5
 8004376:	42bb      	cmp	r3, r7
 8004378:	460d      	mov	r5, r1
 800437a:	d9f4      	bls.n	8004366 <_printf_i+0x112>
 800437c:	2b08      	cmp	r3, #8
 800437e:	d10b      	bne.n	8004398 <_printf_i+0x144>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	07df      	lsls	r7, r3, #31
 8004384:	d508      	bpl.n	8004398 <_printf_i+0x144>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	6861      	ldr	r1, [r4, #4]
 800438a:	4299      	cmp	r1, r3
 800438c:	bfde      	ittt	le
 800438e:	2330      	movle	r3, #48	@ 0x30
 8004390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004394:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004398:	1b92      	subs	r2, r2, r6
 800439a:	6122      	str	r2, [r4, #16]
 800439c:	f8cd a000 	str.w	sl, [sp]
 80043a0:	464b      	mov	r3, r9
 80043a2:	aa03      	add	r2, sp, #12
 80043a4:	4621      	mov	r1, r4
 80043a6:	4640      	mov	r0, r8
 80043a8:	f7ff fee6 	bl	8004178 <_printf_common>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d14a      	bne.n	8004446 <_printf_i+0x1f2>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	b004      	add	sp, #16
 80043b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	f043 0320 	orr.w	r3, r3, #32
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	4833      	ldr	r0, [pc, #204]	@ (8004490 <_printf_i+0x23c>)
 80043c4:	2778      	movs	r7, #120	@ 0x78
 80043c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	6831      	ldr	r1, [r6, #0]
 80043ce:	061f      	lsls	r7, r3, #24
 80043d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80043d4:	d402      	bmi.n	80043dc <_printf_i+0x188>
 80043d6:	065f      	lsls	r7, r3, #25
 80043d8:	bf48      	it	mi
 80043da:	b2ad      	uxthmi	r5, r5
 80043dc:	6031      	str	r1, [r6, #0]
 80043de:	07d9      	lsls	r1, r3, #31
 80043e0:	bf44      	itt	mi
 80043e2:	f043 0320 	orrmi.w	r3, r3, #32
 80043e6:	6023      	strmi	r3, [r4, #0]
 80043e8:	b11d      	cbz	r5, 80043f2 <_printf_i+0x19e>
 80043ea:	2310      	movs	r3, #16
 80043ec:	e7ac      	b.n	8004348 <_printf_i+0xf4>
 80043ee:	4827      	ldr	r0, [pc, #156]	@ (800448c <_printf_i+0x238>)
 80043f0:	e7e9      	b.n	80043c6 <_printf_i+0x172>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f023 0320 	bic.w	r3, r3, #32
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	e7f6      	b.n	80043ea <_printf_i+0x196>
 80043fc:	4616      	mov	r6, r2
 80043fe:	e7bd      	b.n	800437c <_printf_i+0x128>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	6825      	ldr	r5, [r4, #0]
 8004404:	6961      	ldr	r1, [r4, #20]
 8004406:	1d18      	adds	r0, r3, #4
 8004408:	6030      	str	r0, [r6, #0]
 800440a:	062e      	lsls	r6, r5, #24
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	d501      	bpl.n	8004414 <_printf_i+0x1c0>
 8004410:	6019      	str	r1, [r3, #0]
 8004412:	e002      	b.n	800441a <_printf_i+0x1c6>
 8004414:	0668      	lsls	r0, r5, #25
 8004416:	d5fb      	bpl.n	8004410 <_printf_i+0x1bc>
 8004418:	8019      	strh	r1, [r3, #0]
 800441a:	2300      	movs	r3, #0
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	4616      	mov	r6, r2
 8004420:	e7bc      	b.n	800439c <_printf_i+0x148>
 8004422:	6833      	ldr	r3, [r6, #0]
 8004424:	1d1a      	adds	r2, r3, #4
 8004426:	6032      	str	r2, [r6, #0]
 8004428:	681e      	ldr	r6, [r3, #0]
 800442a:	6862      	ldr	r2, [r4, #4]
 800442c:	2100      	movs	r1, #0
 800442e:	4630      	mov	r0, r6
 8004430:	f7fb fef6 	bl	8000220 <memchr>
 8004434:	b108      	cbz	r0, 800443a <_printf_i+0x1e6>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	6060      	str	r0, [r4, #4]
 800443a:	6863      	ldr	r3, [r4, #4]
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	2300      	movs	r3, #0
 8004440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004444:	e7aa      	b.n	800439c <_printf_i+0x148>
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	47d0      	blx	sl
 8004450:	3001      	adds	r0, #1
 8004452:	d0ad      	beq.n	80043b0 <_printf_i+0x15c>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	079b      	lsls	r3, r3, #30
 8004458:	d413      	bmi.n	8004482 <_printf_i+0x22e>
 800445a:	68e0      	ldr	r0, [r4, #12]
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	4298      	cmp	r0, r3
 8004460:	bfb8      	it	lt
 8004462:	4618      	movlt	r0, r3
 8004464:	e7a6      	b.n	80043b4 <_printf_i+0x160>
 8004466:	2301      	movs	r3, #1
 8004468:	4632      	mov	r2, r6
 800446a:	4649      	mov	r1, r9
 800446c:	4640      	mov	r0, r8
 800446e:	47d0      	blx	sl
 8004470:	3001      	adds	r0, #1
 8004472:	d09d      	beq.n	80043b0 <_printf_i+0x15c>
 8004474:	3501      	adds	r5, #1
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	9903      	ldr	r1, [sp, #12]
 800447a:	1a5b      	subs	r3, r3, r1
 800447c:	42ab      	cmp	r3, r5
 800447e:	dcf2      	bgt.n	8004466 <_printf_i+0x212>
 8004480:	e7eb      	b.n	800445a <_printf_i+0x206>
 8004482:	2500      	movs	r5, #0
 8004484:	f104 0619 	add.w	r6, r4, #25
 8004488:	e7f5      	b.n	8004476 <_printf_i+0x222>
 800448a:	bf00      	nop
 800448c:	080045dd 	.word	0x080045dd
 8004490:	080045ee 	.word	0x080045ee

08004494 <memmove>:
 8004494:	4288      	cmp	r0, r1
 8004496:	b510      	push	{r4, lr}
 8004498:	eb01 0402 	add.w	r4, r1, r2
 800449c:	d902      	bls.n	80044a4 <memmove+0x10>
 800449e:	4284      	cmp	r4, r0
 80044a0:	4623      	mov	r3, r4
 80044a2:	d807      	bhi.n	80044b4 <memmove+0x20>
 80044a4:	1e43      	subs	r3, r0, #1
 80044a6:	42a1      	cmp	r1, r4
 80044a8:	d008      	beq.n	80044bc <memmove+0x28>
 80044aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b2:	e7f8      	b.n	80044a6 <memmove+0x12>
 80044b4:	4402      	add	r2, r0
 80044b6:	4601      	mov	r1, r0
 80044b8:	428a      	cmp	r2, r1
 80044ba:	d100      	bne.n	80044be <memmove+0x2a>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c6:	e7f7      	b.n	80044b8 <memmove+0x24>

080044c8 <_sbrk_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4d06      	ldr	r5, [pc, #24]	@ (80044e4 <_sbrk_r+0x1c>)
 80044cc:	2300      	movs	r3, #0
 80044ce:	4604      	mov	r4, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	602b      	str	r3, [r5, #0]
 80044d4:	f7fc fc7c 	bl	8000dd0 <_sbrk>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_sbrk_r+0x1a>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_sbrk_r+0x1a>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	2000029c 	.word	0x2000029c

080044e8 <memcpy>:
 80044e8:	440a      	add	r2, r1
 80044ea:	4291      	cmp	r1, r2
 80044ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f0:	d100      	bne.n	80044f4 <memcpy+0xc>
 80044f2:	4770      	bx	lr
 80044f4:	b510      	push	{r4, lr}
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fe:	4291      	cmp	r1, r2
 8004500:	d1f9      	bne.n	80044f6 <memcpy+0xe>
 8004502:	bd10      	pop	{r4, pc}

08004504 <_realloc_r>:
 8004504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004508:	4680      	mov	r8, r0
 800450a:	4615      	mov	r5, r2
 800450c:	460c      	mov	r4, r1
 800450e:	b921      	cbnz	r1, 800451a <_realloc_r+0x16>
 8004510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004514:	4611      	mov	r1, r2
 8004516:	f7ff bc4b 	b.w	8003db0 <_malloc_r>
 800451a:	b92a      	cbnz	r2, 8004528 <_realloc_r+0x24>
 800451c:	f7ff fbdc 	bl	8003cd8 <_free_r>
 8004520:	2400      	movs	r4, #0
 8004522:	4620      	mov	r0, r4
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	f000 f81a 	bl	8004560 <_malloc_usable_size_r>
 800452c:	4285      	cmp	r5, r0
 800452e:	4606      	mov	r6, r0
 8004530:	d802      	bhi.n	8004538 <_realloc_r+0x34>
 8004532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004536:	d8f4      	bhi.n	8004522 <_realloc_r+0x1e>
 8004538:	4629      	mov	r1, r5
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fc38 	bl	8003db0 <_malloc_r>
 8004540:	4607      	mov	r7, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d0ec      	beq.n	8004520 <_realloc_r+0x1c>
 8004546:	42b5      	cmp	r5, r6
 8004548:	462a      	mov	r2, r5
 800454a:	4621      	mov	r1, r4
 800454c:	bf28      	it	cs
 800454e:	4632      	movcs	r2, r6
 8004550:	f7ff ffca 	bl	80044e8 <memcpy>
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f7ff fbbe 	bl	8003cd8 <_free_r>
 800455c:	463c      	mov	r4, r7
 800455e:	e7e0      	b.n	8004522 <_realloc_r+0x1e>

08004560 <_malloc_usable_size_r>:
 8004560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004564:	1f18      	subs	r0, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfbc      	itt	lt
 800456a:	580b      	ldrlt	r3, [r1, r0]
 800456c:	18c0      	addlt	r0, r0, r3
 800456e:	4770      	bx	lr

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
