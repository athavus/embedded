
atividade-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004788  08004788  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004790  08004790  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004798  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000005c  080047f4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080047f4  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9c2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4e  00000000  00000000  00013a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000157a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a46  00000000  00000000  000164b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023268  00000000  00000000  00016efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010002  00000000  00000000  0003a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6c2  00000000  00000000  0004a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012782a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  00127870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0012b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080046fc 	.word	0x080046fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080046fc 	.word	0x080046fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fc23 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f865 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f9f9 	bl	80009b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c2:	f000 f921 	bl	8000808 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f9cb 	bl	8000960 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ca:	f000 f8cb 	bl	8000764 <MX_ADC1_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ce:	2100      	movs	r1, #0
 80005d0:	4826      	ldr	r0, [pc, #152]	@ (800066c <main+0xbc>)
 80005d2:	f002 f9ab 	bl	800292c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005d6:	2104      	movs	r1, #4
 80005d8:	4824      	ldr	r0, [pc, #144]	@ (800066c <main+0xbc>)
 80005da:	f002 f9a7 	bl	800292c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005de:	4824      	ldr	r0, [pc, #144]	@ (8000670 <main+0xc0>)
 80005e0:	f000 fce8 	bl	8000fb4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80005e4:	2114      	movs	r1, #20
 80005e6:	4822      	ldr	r0, [pc, #136]	@ (8000670 <main+0xc0>)
 80005e8:	f000 fdb6 	bl	8001158 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 80005ec:	4820      	ldr	r0, [pc, #128]	@ (8000670 <main+0xc0>)
 80005ee:	f000 fe3e 	bl	800126e <HAL_ADC_GetValue>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <main+0xc4>)
 80005f8:	801a      	strh	r2, [r3, #0]
	  uint32_t vin_mv = (adc_value * 3300) / 4096;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <main+0xc4>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000604:	fb02 f303 	mul.w	r3, r2, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	da01      	bge.n	8000610 <main+0x60>
 800060c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000610:	131b      	asrs	r3, r3, #12
 8000612:	607b      	str	r3, [r7, #4]

	  sprintf(console_msg, "Value ADC: %hu; Duty Cycle: %lu %% \r\n", adc_value, vin_mv / 33);
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <main+0xc4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <main+0xc8>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	460a      	mov	r2, r1
 8000626:	4915      	ldr	r1, [pc, #84]	@ (800067c <main+0xcc>)
 8000628:	4815      	ldr	r0, [pc, #84]	@ (8000680 <main+0xd0>)
 800062a:	f003 fbc7 	bl	8003dbc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)console_msg, strlen(console_msg), HAL_MAX_DELAY);
 800062e:	4814      	ldr	r0, [pc, #80]	@ (8000680 <main+0xd0>)
 8000630:	f7ff fdee 	bl	8000210 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	4910      	ldr	r1, [pc, #64]	@ (8000680 <main+0xd0>)
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <main+0xd4>)
 8000640:	f003 f800 	bl	8003644 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000644:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000648:	f000 fc4c 	bl	8000ee4 <HAL_Delay>

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, vin_mv);
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <main+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 750);
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <main+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800065c:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000662:	f000 fc3f 	bl	8000ee4 <HAL_Delay>
  {
 8000666:	bf00      	nop
 8000668:	e7b9      	b.n	80005de <main+0x2e>
 800066a:	bf00      	nop
 800066c:	20000104 	.word	0x20000104
 8000670:	200000bc 	.word	0x200000bc
 8000674:	20000078 	.word	0x20000078
 8000678:	3e0f83e1 	.word	0x3e0f83e1
 800067c:	08004714 	.word	0x08004714
 8000680:	2000007c 	.word	0x2000007c
 8000684:	2000014c 	.word	0x2000014c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	@ 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fbb0 	bl	8003dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a29      	ldr	r2, [pc, #164]	@ (800075c <SystemClock_Config+0xd4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d4:	4a22      	ldr	r2, [pc, #136]	@ (8000760 <SystemClock_Config+0xd8>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000700:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000706:	2304      	movs	r3, #4
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fdc2 	bl	80022a0 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000722:	f000 f9b5 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2102      	movs	r1, #2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fa62 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074e:	f000 f99f 	bl	8000a90 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <MX_ADC1_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC1_Init+0x98>)
 800077e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_ADC1_Init+0xa0>)
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007c6:	f000 fbb1 	bl	8000f2c <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f95e 	bl	8000a90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0x98>)
 80007e6:	f000 fd4f 	bl	8001288 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f0:	f000 f94e 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000bc 	.word	0x200000bc
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2220      	movs	r2, #32
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fadb 	bl	8003dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000846:	4b44      	ldr	r3, [pc, #272]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000848:	4a44      	ldr	r2, [pc, #272]	@ (800095c <MX_TIM1_Init+0x154>)
 800084a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800084c:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <MX_TIM1_Init+0x150>)
 800084e:	2253      	movs	r2, #83	@ 0x53
 8000850:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b41      	ldr	r3, [pc, #260]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000858:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <MX_TIM1_Init+0x150>)
 800085a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800085e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b3d      	ldr	r3, [pc, #244]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000866:	4b3c      	ldr	r3, [pc, #240]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b3a      	ldr	r3, [pc, #232]	@ (8000958 <MX_TIM1_Init+0x150>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000872:	4839      	ldr	r0, [pc, #228]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000874:	f001 ffb2 	bl	80027dc <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800087e:	f000 f907 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800088c:	4619      	mov	r1, r3
 800088e:	4832      	ldr	r0, [pc, #200]	@ (8000958 <MX_TIM1_Init+0x150>)
 8000890:	f002 f9d6 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 f8f9 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089e:	482e      	ldr	r0, [pc, #184]	@ (8000958 <MX_TIM1_Init+0x150>)
 80008a0:	f001 ffeb 	bl	800287a <HAL_TIM_PWM_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008aa:	f000 f8f1 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ba:	4619      	mov	r1, r3
 80008bc:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_TIM1_Init+0x150>)
 80008be:	f002 fda3 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008c8:	f000 f8e2 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008cc:	2360      	movs	r3, #96	@ 0x60
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	4819      	ldr	r0, [pc, #100]	@ (8000958 <MX_TIM1_Init+0x150>)
 80008f2:	f002 f8e3 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008fc:	f000 f8c8 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	2204      	movs	r2, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4813      	ldr	r0, [pc, #76]	@ (8000958 <MX_TIM1_Init+0x150>)
 800090a:	f002 f8d7 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000914:	f000 f8bc 	bl	8000a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM1_Init+0x150>)
 800093c:	f002 fde0 	bl	8003500 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000946:	f000 f8a3 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM1_Init+0x150>)
 800094c:	f000 f934 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3758      	adds	r7, #88	@ 0x58
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000104 	.word	0x20000104
 800095c:	40010000 	.word	0x40010000

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f002 fe04 	bl	80035a4 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f875 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000014c 	.word	0x2000014c
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <MX_GPIO_Init+0xd4>)
 8000a40:	f001 f8ca 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <MX_GPIO_Init+0xd8>)
 8000a5c:	f000 ff28 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a60:	2320      	movs	r3, #32
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_GPIO_Init+0xd4>)
 8000a78:	f000 ff1a 	bl	80018b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	@ 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020800 	.word	0x40020800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ada:	2007      	movs	r0, #7
 8000adc:	f000 feb4 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_ADC_MspInit+0x7c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d127      	bne.n	8000b5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a15      	ldr	r2, [pc, #84]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b5a:	f000 fea9 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012000 	.word	0x40012000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10d      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x40>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x40>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x40>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <HAL_TIM_MspPostInit+0x68>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d11e      	bne.n	8000c18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_TIM_MspPostInit+0x6c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_TIM_MspPostInit+0x6c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_TIM_MspPostInit+0x6c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <HAL_TIM_MspPostInit+0x70>)
 8000c14:	f000 fe4c 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010000 	.word	0x40010000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_UART_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c86:	230c      	movs	r3, #12
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <HAL_UART_MspInit+0x8c>)
 8000ca2:	f000 fe05 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f8c7 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f003 f85e 	bl	8003e0c <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000194 	.word	0x20000194
 8000d84:	200002e8 	.word	0x200002e8

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 f81d 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbe7 	bl	80005b0 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000df0:	08004798 	.word	0x08004798
  ldr r2, =_sbss
 8000df4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df8:	200002e4 	.word	0x200002e4

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fd0d 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fe32 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fd17 	bl	8001896 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 fced 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000198 	.word	0x20000198

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000198 	.word	0x20000198

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e033      	b.n	8000faa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fdce 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f72:	f023 0302 	bic.w	r3, r3, #2
 8000f76:	f043 0202 	orr.w	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fab4 	bl	80014ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f9a:	e001      	b.n	8000fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Start+0x1a>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e0b2      	b.n	8001134 <HAL_ADC_Start+0x180>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d018      	beq.n	8001016 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff4:	4b52      	ldr	r3, [pc, #328]	@ (8001140 <HAL_ADC_Start+0x18c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	@ (8001144 <HAL_ADC_Start+0x190>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9a      	lsrs	r2, r3, #18
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001008:	e002      	b.n	8001010 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3b01      	subs	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f9      	bne.n	800100a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d17a      	bne.n	800111a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800104e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001062:	d106      	bne.n	8001072 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	f023 0206 	bic.w	r2, r3, #6
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001070:	e002      	b.n	8001078 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001080:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <HAL_ADC_Start+0x194>)
 8001082:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800108c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	2b00      	cmp	r3, #0
 8001098:	d12a      	bne.n	80010f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2b      	ldr	r2, [pc, #172]	@ (800114c <HAL_ADC_Start+0x198>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d015      	beq.n	80010d0 <HAL_ADC_Start+0x11c>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a29      	ldr	r2, [pc, #164]	@ (8001150 <HAL_ADC_Start+0x19c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_Start+0x106>
 80010ae:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <HAL_ADC_Start+0x194>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <HAL_ADC_Start+0x1a0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d136      	bne.n	8001132 <HAL_ADC_Start+0x17e>
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <HAL_ADC_Start+0x194>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d130      	bne.n	8001132 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d129      	bne.n	8001132 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	e020      	b.n	8001132 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	@ (800114c <HAL_ADC_Start+0x198>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_Start+0x17e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d114      	bne.n	8001132 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e00b      	b.n	8001132 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	40012300 	.word	0x40012300
 800114c:	40012000 	.word	0x40012000
 8001150:	40012100 	.word	0x40012100
 8001154:	40012200 	.word	0x40012200

08001158 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001174:	d113      	bne.n	800119e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001184:	d10b      	bne.n	800119e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f043 0220 	orr.w	r2, r3, #32
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e063      	b.n	8001266 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800119e:	f7ff fe95 	bl	8000ecc <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011a4:	e021      	b.n	80011ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d01d      	beq.n	80011ea <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d007      	beq.n	80011c4 <HAL_ADC_PollForConversion+0x6c>
 80011b4:	f7ff fe8a 	bl	8000ecc <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d212      	bcs.n	80011ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d00b      	beq.n	80011ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f043 0204 	orr.w	r2, r3, #4
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e03d      	b.n	8001266 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d1d6      	bne.n	80011a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 0212 	mvn.w	r2, #18
 8001200:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d123      	bne.n	8001264 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11f      	bne.n	8001264 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800123c:	2b00      	cmp	r3, #0
 800123e:	d111      	bne.n	8001264 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1c>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e113      	b.n	80014cc <HAL_ADC_ConfigChannel+0x244>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d925      	bls.n	8001300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3b1e      	subs	r3, #30
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4403      	add	r3, r0
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	e022      	b.n	8001346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	2207      	movs	r2, #7
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	4603      	mov	r3, r0
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4403      	add	r3, r0
 800133c:	409a      	lsls	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b06      	cmp	r3, #6
 800134c:	d824      	bhi.n	8001398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b05      	subs	r3, #5
 8001360:	221f      	movs	r2, #31
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b05      	subs	r3, #5
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34
 8001396:	e04c      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d824      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b23      	subs	r3, #35	@ 0x23
 80013b2:	221f      	movs	r2, #31
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43da      	mvns	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	400a      	ands	r2, r1
 80013c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b23      	subs	r3, #35	@ 0x23
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e8:	e023      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b41      	subs	r3, #65	@ 0x41
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	400a      	ands	r2, r1
 800140a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b41      	subs	r3, #65	@ 0x41
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <HAL_ADC_ConfigChannel+0x250>)
 8001434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <HAL_ADC_ConfigChannel+0x254>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d10f      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1d8>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d10b      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <HAL_ADC_ConfigChannel+0x254>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1c      	ldr	r2, [pc, #112]	@ (80014e0 <HAL_ADC_ConfigChannel+0x258>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d003      	beq.n	800147c <HAL_ADC_ConfigChannel+0x1f4>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b11      	cmp	r3, #17
 800147a:	d122      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_ADC_ConfigChannel+0x258>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_ADC_ConfigChannel+0x25c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_ADC_ConfigChannel+0x260>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9a      	lsrs	r2, r3, #18
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40012300 	.word	0x40012300
 80014dc:	40012000 	.word	0x40012000
 80014e0:	10000012 	.word	0x10000012
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83

080014ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f4:	4b79      	ldr	r3, [pc, #484]	@ (80016dc <ADC_Init+0x1f0>)
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	021a      	lsls	r2, r3, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	4a58      	ldr	r2, [pc, #352]	@ (80016e0 <ADC_Init+0x1f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e00f      	b.n	80015ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0202 	bic.w	r2, r2, #2
 80015f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	005a      	lsls	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001626:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	3b01      	subs	r3, #1
 8001644:	035a      	lsls	r2, r3, #13
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	e007      	b.n	8001660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	3b01      	subs	r3, #1
 800167c:	051a      	lsls	r2, r3, #20
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a2:	025a      	lsls	r2, r3, #9
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	029a      	lsls	r2, r3, #10
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	0f000001 	.word	0x0f000001

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff47 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff5c 	bl	800172c <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffb0 	bl	8001804 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e165      	b.n	8001b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8154 	bne.w	8001b92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ae 	beq.w	8001b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a58      	ldr	r2, [pc, #352]	@ (8001bb4 <HAL_GPIO_Init+0x304>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4f      	ldr	r2, [pc, #316]	@ (8001bb8 <HAL_GPIO_Init+0x308>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x21a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4e      	ldr	r2, [pc, #312]	@ (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x216>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4b      	ldr	r2, [pc, #300]	@ (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x20a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bcc <HAL_GPIO_Init+0x31c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x206>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a49      	ldr	r2, [pc, #292]	@ (8001bd0 <HAL_GPIO_Init+0x320>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x202>
 8001aae:	2306      	movs	r3, #6
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x21c>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	@ (8001bb4 <HAL_GPIO_Init+0x304>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a31      	ldr	r2, [pc, #196]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a26      	ldr	r2, [pc, #152]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae96 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f8e6 	bl	8000ecc <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f8e2 	bl	8000ecc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f855 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f846 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	0800473c 	.word	0x0800473c
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	@ (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	0800474c 	.word	0x0800474c

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffdc 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	@ (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800474c 	.word	0x0800474c

08001e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b0ae      	sub	sp, #184	@ 0xb8
 8001e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4bcb      	ldr	r3, [pc, #812]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	f200 8206 	bhi.w	8002280 <HAL_RCC_GetSysClockFreq+0x440>
 8001e74:	a201      	add	r2, pc, #4	@ (adr r2, 8001e7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001eb1 	.word	0x08001eb1
 8001e80:	08002281 	.word	0x08002281
 8001e84:	08002281 	.word	0x08002281
 8001e88:	08002281 	.word	0x08002281
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08002281 	.word	0x08002281
 8001e94:	08002281 	.word	0x08002281
 8001e98:	08002281 	.word	0x08002281
 8001e9c:	08001ec1 	.word	0x08001ec1
 8001ea0:	08002281 	.word	0x08002281
 8001ea4:	08002281 	.word	0x08002281
 8001ea8:	08002281 	.word	0x08002281
 8001eac:	080020b1 	.word	0x080020b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eb6:	e1e7      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4bb8      	ldr	r3, [pc, #736]	@ (800219c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ebe:	e1e3      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4bb4      	ldr	r3, [pc, #720]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ecc:	4bb1      	ldr	r3, [pc, #708]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d071      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed8:	4bae      	ldr	r3, [pc, #696]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ee4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001efe:	4622      	mov	r2, r4
 8001f00:	462b      	mov	r3, r5
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0159      	lsls	r1, r3, #5
 8001f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f10:	0150      	lsls	r0, r2, #5
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4621      	mov	r1, r4
 8001f18:	1a51      	subs	r1, r2, r1
 8001f1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f30:	4649      	mov	r1, r9
 8001f32:	018b      	lsls	r3, r1, #6
 8001f34:	4641      	mov	r1, r8
 8001f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	018a      	lsls	r2, r1, #6
 8001f3e:	4641      	mov	r1, r8
 8001f40:	1a51      	subs	r1, r2, r1
 8001f42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f44:	4649      	mov	r1, r9
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f58:	4649      	mov	r1, r9
 8001f5a:	00cb      	lsls	r3, r1, #3
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f62:	4641      	mov	r1, r8
 8001f64:	00ca      	lsls	r2, r1, #3
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f72:	462b      	mov	r3, r5
 8001f74:	460a      	mov	r2, r1
 8001f76:	eb42 0303 	adc.w	r3, r2, r3
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f88:	4629      	mov	r1, r5
 8001f8a:	024b      	lsls	r3, r1, #9
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f92:	4621      	mov	r1, r4
 8001f94:	024a      	lsls	r2, r1, #9
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fac:	f7fe f988 	bl	80002c0 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fba:	e067      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4b75      	ldr	r3, [pc, #468]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	0159      	lsls	r1, r3, #5
 8001fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff0:	0150      	lsls	r0, r2, #5
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	1a51      	subs	r1, r2, r1
 8001ffa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002010:	4649      	mov	r1, r9
 8002012:	018b      	lsls	r3, r1, #6
 8002014:	4641      	mov	r1, r8
 8002016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800201a:	4641      	mov	r1, r8
 800201c:	018a      	lsls	r2, r1, #6
 800201e:	4641      	mov	r1, r8
 8002020:	ebb2 0a01 	subs.w	sl, r2, r1
 8002024:	4649      	mov	r1, r9
 8002026:	eb63 0b01 	sbc.w	fp, r3, r1
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002036:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800203a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800203e:	4692      	mov	sl, r2
 8002040:	469b      	mov	fp, r3
 8002042:	4623      	mov	r3, r4
 8002044:	eb1a 0303 	adds.w	r3, sl, r3
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	462b      	mov	r3, r5
 800204c:	eb4b 0303 	adc.w	r3, fp, r3
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800205e:	4629      	mov	r1, r5
 8002060:	028b      	lsls	r3, r1, #10
 8002062:	4621      	mov	r1, r4
 8002064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002068:	4621      	mov	r1, r4
 800206a:	028a      	lsls	r2, r1, #10
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002074:	2200      	movs	r2, #0
 8002076:	673b      	str	r3, [r7, #112]	@ 0x70
 8002078:	677a      	str	r2, [r7, #116]	@ 0x74
 800207a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800207e:	f7fe f91f 	bl	80002c0 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4613      	mov	r3, r2
 8002088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	3301      	adds	r3, #1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800209e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ae:	e0eb      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b0:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020bc:	4b35      	ldr	r3, [pc, #212]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d06b      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c8:	4b32      	ldr	r3, [pc, #200]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	2200      	movs	r2, #0
 80020d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020da:	663b      	str	r3, [r7, #96]	@ 0x60
 80020dc:	2300      	movs	r3, #0
 80020de:	667b      	str	r3, [r7, #100]	@ 0x64
 80020e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020e4:	4622      	mov	r2, r4
 80020e6:	462b      	mov	r3, r5
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0159      	lsls	r1, r3, #5
 80020f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f6:	0150      	lsls	r0, r2, #5
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4621      	mov	r1, r4
 80020fe:	1a51      	subs	r1, r2, r1
 8002100:	61b9      	str	r1, [r7, #24]
 8002102:	4629      	mov	r1, r5
 8002104:	eb63 0301 	sbc.w	r3, r3, r1
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002116:	4659      	mov	r1, fp
 8002118:	018b      	lsls	r3, r1, #6
 800211a:	4651      	mov	r1, sl
 800211c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002120:	4651      	mov	r1, sl
 8002122:	018a      	lsls	r2, r1, #6
 8002124:	4651      	mov	r1, sl
 8002126:	ebb2 0801 	subs.w	r8, r2, r1
 800212a:	4659      	mov	r1, fp
 800212c:	eb63 0901 	sbc.w	r9, r3, r1
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800213c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002140:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002144:	4690      	mov	r8, r2
 8002146:	4699      	mov	r9, r3
 8002148:	4623      	mov	r3, r4
 800214a:	eb18 0303 	adds.w	r3, r8, r3
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	462b      	mov	r3, r5
 8002152:	eb49 0303 	adc.w	r3, r9, r3
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002164:	4629      	mov	r1, r5
 8002166:	024b      	lsls	r3, r1, #9
 8002168:	4621      	mov	r1, r4
 800216a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800216e:	4621      	mov	r1, r4
 8002170:	024a      	lsls	r2, r1, #9
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800217a:	2200      	movs	r2, #0
 800217c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800217e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002180:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002184:	f7fe f89c 	bl	80002c0 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002192:	e065      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x420>
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x458>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	2200      	movs	r2, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	4611      	mov	r1, r2
 80021ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80021b2:	2300      	movs	r3, #0
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021ba:	4642      	mov	r2, r8
 80021bc:	464b      	mov	r3, r9
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021cc:	0150      	lsls	r0, r2, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4641      	mov	r1, r8
 80021d4:	1a51      	subs	r1, r2, r1
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	4649      	mov	r1, r9
 80021da:	eb63 0301 	sbc.w	r3, r3, r1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021ec:	4659      	mov	r1, fp
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	4651      	mov	r1, sl
 80021f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f6:	4651      	mov	r1, sl
 80021f8:	018a      	lsls	r2, r1, #6
 80021fa:	4651      	mov	r1, sl
 80021fc:	1a54      	subs	r4, r2, r1
 80021fe:	4659      	mov	r1, fp
 8002200:	eb63 0501 	sbc.w	r5, r3, r1
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	00eb      	lsls	r3, r5, #3
 800220e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002212:	00e2      	lsls	r2, r4, #3
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	4643      	mov	r3, r8
 800221a:	18e3      	adds	r3, r4, r3
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	464b      	mov	r3, r9
 8002220:	eb45 0303 	adc.w	r3, r5, r3
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002232:	4629      	mov	r1, r5
 8002234:	028b      	lsls	r3, r1, #10
 8002236:	4621      	mov	r1, r4
 8002238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800223c:	4621      	mov	r1, r4
 800223e:	028a      	lsls	r2, r1, #10
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002248:	2200      	movs	r2, #0
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800224c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800224e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002252:	f7fe f835 	bl	80002c0 <__aeabi_uldivmod>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4613      	mov	r3, r2
 800225c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x458>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0f1b      	lsrs	r3, r3, #28
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800226e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800227e:	e003      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800228c:	4618      	mov	r0, r3
 800228e:	37b8      	adds	r7, #184	@ 0xb8
 8002290:	46bd      	mov	sp, r7
 8002292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	00f42400 	.word	0x00f42400

080022a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e28d      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8083 	beq.w	80023c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022c0:	4b94      	ldr	r3, [pc, #592]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d019      	beq.n	8002300 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022cc:	4b91      	ldr	r3, [pc, #580]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b88      	ldr	r3, [pc, #544]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b84      	ldr	r3, [pc, #528]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x124>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e25a      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x90>
 8002322:	4b7c      	ldr	r3, [pc, #496]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7b      	ldr	r2, [pc, #492]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xcc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xb4>
 800233a:	4b76      	ldr	r3, [pc, #472]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b73      	ldr	r3, [pc, #460]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a72      	ldr	r2, [pc, #456]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xcc>
 8002354:	4b6f      	ldr	r3, [pc, #444]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6e      	ldr	r2, [pc, #440]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b6c      	ldr	r3, [pc, #432]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6b      	ldr	r2, [pc, #428]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fdaa 	bl	8000ecc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe fda6 	bl	8000ecc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	@ 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e21f      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b61      	ldr	r3, [pc, #388]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xdc>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fd96 	bl	8000ecc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fd92 	bl	8000ecc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e20b      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x104>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06f      	beq.n	80024b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023d2:	4b50      	ldr	r3, [pc, #320]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d017      	beq.n	800240e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023de:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x186>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1d3      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_OscConfig+0x278>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd3f 	bl	8000ecc <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fd3b 	bl	8000ecc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b4      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCC_OscConfig+0x278>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd1e 	bl	8000ecc <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fd1a 	bl	8000ecc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e193      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <HAL_RCC_OscConfig+0x27c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fcfe 	bl	8000ecc <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fcfa 	bl	8000ecc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e173      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_OscConfig+0x274>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x234>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_OscConfig+0x27c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fce7 	bl	8000ecc <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe fce3 	bl	8000ecc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e15c      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b8a      	ldr	r3, [pc, #552]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b83      	ldr	r3, [pc, #524]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7f      	ldr	r3, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a7e      	ldr	r2, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b7c      	ldr	r3, [pc, #496]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b76      	ldr	r3, [pc, #472]	@ (8002750 <HAL_RCC_OscConfig+0x4b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a75      	ldr	r2, [pc, #468]	@ (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fca3 	bl	8000ecc <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe fc9f 	bl	8000ecc <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e118      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6c      	ldr	r3, [pc, #432]	@ (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x31e>
 80025b0:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x358>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x340>
 80025c6:	4b61      	ldr	r3, [pc, #388]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a60      	ldr	r2, [pc, #384]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	4b5e      	ldr	r3, [pc, #376]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a5d      	ldr	r2, [pc, #372]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x358>
 80025e0:	4b5a      	ldr	r3, [pc, #360]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a59      	ldr	r2, [pc, #356]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ec:	4b57      	ldr	r3, [pc, #348]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a56      	ldr	r2, [pc, #344]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fc64 	bl	8000ecc <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fc60 	bl	8000ecc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0d7      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x368>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fc4e 	bl	8000ecc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fc4a 	bl	8000ecc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0c1      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	4a3a      	ldr	r2, [pc, #232]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80ad 	beq.w	80027cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d060      	beq.n	8002740 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d145      	bne.n	8002712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b33      	ldr	r3, [pc, #204]	@ (8002754 <HAL_RCC_OscConfig+0x4b4>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fc1e 	bl	8000ecc <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fc1a 	bl	8000ecc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e093      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	491b      	ldr	r1, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_RCC_OscConfig+0x4b4>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fbef 	bl	8000ecc <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fbeb 	bl	8000ecc <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e064      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x452>
 8002710:	e05c      	b.n	80027cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <HAL_RCC_OscConfig+0x4b4>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fbd8 	bl	8000ecc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fbd4 	bl	8000ecc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04d      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x480>
 800273e:	e045      	b.n	80027cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e040      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000
 8002754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002758:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <HAL_RCC_OscConfig+0x538>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d030      	beq.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d129      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d122      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800278e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002790:	4293      	cmp	r3, r2
 8002792:	d119      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10f      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f9b6 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fad8 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e041      	b.n	8002910 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f839 	bl	8002918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fa89 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start+0x24>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e022      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d109      	bne.n	800296a <HAL_TIM_PWM_Start+0x3e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e015      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d109      	bne.n	8002984 <HAL_TIM_PWM_Start+0x58>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e008      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07c      	b.n	8002a98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0x82>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029ac:	e013      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0x92>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029bc:	e00b      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0xa2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029cc:	e003      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2201      	movs	r2, #1
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fcec 	bl	80033bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa0 <HAL_TIM_PWM_Start+0x174>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_PWM_Start+0xcc>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa4 <HAL_TIM_PWM_Start+0x178>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_PWM_Start+0xd0>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_TIM_PWM_Start+0xd2>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_TIM_PWM_Start+0x174>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d01d      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_TIM_PWM_Start+0x17c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_TIM_PWM_Start+0x180>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab0 <HAL_TIM_PWM_Start+0x184>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <HAL_TIM_PWM_Start+0x178>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_TIM_PWM_Start+0x188>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x136>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	@ (8002ab8 <HAL_TIM_PWM_Start+0x18c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d010      	beq.n	8002a96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40001800 	.word	0x40001800

08002abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0ae      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	f200 809f 	bhi.w	8002c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002c29 	.word	0x08002c29
 8002af8:	08002c29 	.word	0x08002c29
 8002afc:	08002c29 	.word	0x08002c29
 8002b00:	08002b65 	.word	0x08002b65
 8002b04:	08002c29 	.word	0x08002c29
 8002b08:	08002c29 	.word	0x08002c29
 8002b0c:	08002c29 	.word	0x08002c29
 8002b10:	08002ba7 	.word	0x08002ba7
 8002b14:	08002c29 	.word	0x08002c29
 8002b18:	08002c29 	.word	0x08002c29
 8002b1c:	08002c29 	.word	0x08002c29
 8002b20:	08002be7 	.word	0x08002be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f9fc 	bl	8002f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]
      break;
 8002b62:	e064      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fa4c 	bl	8003008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	619a      	str	r2, [r3, #24]
      break;
 8002ba4:	e043      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 faa1 	bl	80030f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0208 	orr.w	r2, r2, #8
 8002bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0204 	bic.w	r2, r2, #4
 8002bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69d9      	ldr	r1, [r3, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	61da      	str	r2, [r3, #28]
      break;
 8002be4:	e023      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 faf5 	bl	80031dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	021a      	lsls	r2, r3, #8
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIM_ConfigClockSource+0x1c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0b4      	b.n	8002dc6 <HAL_TIM_ConfigClockSource+0x186>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c94:	d03e      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0xd4>
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9a:	f200 8087 	bhi.w	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca2:	f000 8086 	beq.w	8002db2 <HAL_TIM_ConfigClockSource+0x172>
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002caa:	d87f      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b70      	cmp	r3, #112	@ 0x70
 8002cae:	d01a      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8002cb0:	2b70      	cmp	r3, #112	@ 0x70
 8002cb2:	d87b      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b60      	cmp	r3, #96	@ 0x60
 8002cb6:	d050      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x11a>
 8002cb8:	2b60      	cmp	r3, #96	@ 0x60
 8002cba:	d877      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b50      	cmp	r3, #80	@ 0x50
 8002cbe:	d03c      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0xfa>
 8002cc0:	2b50      	cmp	r3, #80	@ 0x50
 8002cc2:	d873      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b40      	cmp	r3, #64	@ 0x40
 8002cc6:	d058      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x13a>
 8002cc8:	2b40      	cmp	r3, #64	@ 0x40
 8002cca:	d86f      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b30      	cmp	r3, #48	@ 0x30
 8002cce:	d064      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b30      	cmp	r3, #48	@ 0x30
 8002cd2:	d86b      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d060      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d867      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05c      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d05a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ce4:	e062      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cf6:	f000 fb41 	bl	800337c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	609a      	str	r2, [r3, #8]
      break;
 8002d12:	e04f      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d24:	f000 fb2a 	bl	800337c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d36:	609a      	str	r2, [r3, #8]
      break;
 8002d38:	e03c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	461a      	mov	r2, r3
 8002d48:	f000 fa9e 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2150      	movs	r1, #80	@ 0x50
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 faf7 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002d58:	e02c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 fabd 	bl	80032e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2160      	movs	r1, #96	@ 0x60
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fae7 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002d78:	e01c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 fa7e 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2140      	movs	r1, #64	@ 0x40
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fad7 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002d98:	e00c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f000 face 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002daa:	e003      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e000      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a46      	ldr	r2, [pc, #280]	@ (8002efc <TIM_Base_SetConfig+0x12c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a43      	ldr	r2, [pc, #268]	@ (8002f00 <TIM_Base_SetConfig+0x130>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a42      	ldr	r2, [pc, #264]	@ (8002f04 <TIM_Base_SetConfig+0x134>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a41      	ldr	r2, [pc, #260]	@ (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	@ (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a35      	ldr	r2, [pc, #212]	@ (8002efc <TIM_Base_SetConfig+0x12c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e30:	d027      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <TIM_Base_SetConfig+0x130>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d023      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	@ (8002f04 <TIM_Base_SetConfig+0x134>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a30      	ldr	r2, [pc, #192]	@ (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <TIM_Base_SetConfig+0x140>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f14 <TIM_Base_SetConfig+0x144>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <TIM_Base_SetConfig+0x148>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <TIM_Base_SetConfig+0x14c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2a      	ldr	r2, [pc, #168]	@ (8002f20 <TIM_Base_SetConfig+0x150>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a29      	ldr	r2, [pc, #164]	@ (8002f24 <TIM_Base_SetConfig+0x154>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <TIM_Base_SetConfig+0x12c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xf8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a12      	ldr	r2, [pc, #72]	@ (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40010400 	.word	0x40010400
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800
 8002f1c:	40001800 	.word	0x40001800
 8002f20:	40001c00 	.word	0x40001c00
 8002f24:	40002000 	.word	0x40002000

08002f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0201 	bic.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 0302 	bic.w	r3, r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a20      	ldr	r2, [pc, #128]	@ (8003000 <TIM_OC1_SetConfig+0xd8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_OC1_SetConfig+0x64>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a1f      	ldr	r2, [pc, #124]	@ (8003004 <TIM_OC1_SetConfig+0xdc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10c      	bne.n	8002fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0308 	bic.w	r3, r3, #8
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	@ (8003000 <TIM_OC1_SetConfig+0xd8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_OC1_SetConfig+0x8e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <TIM_OC1_SetConfig+0xdc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d111      	bne.n	8002fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40010000 	.word	0x40010000
 8003004:	40010400 	.word	0x40010400

08003008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f023 0210 	bic.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0320 	bic.w	r3, r3, #32
 8003052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <TIM_OC2_SetConfig+0xe4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC2_SetConfig+0x68>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <TIM_OC2_SetConfig+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10d      	bne.n	800308c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800308a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <TIM_OC2_SetConfig+0xe4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_OC2_SetConfig+0x94>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <TIM_OC2_SetConfig+0xe8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d113      	bne.n	80030c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40010400 	.word	0x40010400

080030f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800313c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <TIM_OC3_SetConfig+0xe0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_OC3_SetConfig+0x66>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a20      	ldr	r2, [pc, #128]	@ (80031d8 <TIM_OC3_SetConfig+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10d      	bne.n	8003176 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a16      	ldr	r2, [pc, #88]	@ (80031d4 <TIM_OC3_SetConfig+0xe0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_OC3_SetConfig+0x92>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <TIM_OC3_SetConfig+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d113      	bne.n	80031ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800318c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	621a      	str	r2, [r3, #32]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40010400 	.word	0x40010400

080031dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	031b      	lsls	r3, r3, #12
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a12      	ldr	r2, [pc, #72]	@ (8003280 <TIM_OC4_SetConfig+0xa4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_OC4_SetConfig+0x68>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <TIM_OC4_SetConfig+0xa8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d109      	bne.n	8003258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800324a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400

08003288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 030a 	bic.w	r3, r3, #10
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b087      	sub	sp, #28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0210 	bic.w	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	031b      	lsls	r3, r3, #12
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	f043 0307 	orr.w	r3, r3, #7
 8003368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	431a      	orrs	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	609a      	str	r2, [r3, #8]
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2201      	movs	r2, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e05a      	b.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346c:	d01d      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1b      	ldr	r2, [pc, #108]	@ (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1a      	ldr	r2, [pc, #104]	@ (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a15      	ldr	r2, [pc, #84]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d10c      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40010400 	.word	0x40010400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40001800 	.word	0x40001800

08003500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e03d      	b.n	8003598 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e042      	b.n	800363c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fb2e 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	@ 0x24
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f973 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800361c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	@ 0x28
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b20      	cmp	r3, #32
 8003662:	d175      	bne.n	8003750 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_Transmit+0x2c>
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e06e      	b.n	8003752 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2221      	movs	r2, #33	@ 0x21
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003682:	f7fd fc23 	bl	8000ecc <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369c:	d108      	bne.n	80036b0 <HAL_UART_Transmit+0x6c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e003      	b.n	80036b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036b8:	e02e      	b.n	8003718 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	@ 0x80
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f848 	bl	800375a <UART_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e03a      	b.n	8003752 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	3302      	adds	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	e007      	b.n	800370a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	3301      	adds	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cb      	bne.n	80036ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2140      	movs	r1, #64	@ 0x40
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f814 	bl	800375a <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e006      	b.n	8003752 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376a:	e03b      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d037      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fd fbaa 	bl	8000ecc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <UART_WaitOnFlagUntilTimeout+0x30>
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e03a      	b.n	8003804 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b80      	cmp	r3, #128	@ 0x80
 80037a0:	d020      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b40      	cmp	r3, #64	@ 0x40
 80037a6:	d01d      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d116      	bne.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f81d 	bl	800380c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2208      	movs	r2, #8
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e00f      	b.n	8003804 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d0b4      	beq.n	800376c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b095      	sub	sp, #84	@ 0x54
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003834:	643a      	str	r2, [r7, #64]	@ 0x40
 8003836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800383a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	61fb      	str	r3, [r7, #28]
   return(result);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800386e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	d119      	bne.n	80038b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	60bb      	str	r3, [r7, #8]
   return(result);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0310 	bic.w	r3, r3, #16
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038a4:	61ba      	str	r2, [r7, #24]
 80038a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	613b      	str	r3, [r7, #16]
   return(result);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038c6:	bf00      	nop
 80038c8:	3754      	adds	r7, #84	@ 0x54
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	@ 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fa50 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7fe fa37 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a18:	f7fc fc52 	bl	80002c0 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	@ (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003aae:	f7fc fc07 	bl	80002c0 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	@ 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b6a:	f7fc fba9 	bl	80002c0 <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	@ 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	@ 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	@ (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e106      	b.n	8003dac <UART_SetConfig+0x4d8>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c2c:	f7fc fb48 	bl	80002c0 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	@ (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cca:	f7fc faf9 	bl	80002c0 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4b38      	ldr	r3, [pc, #224]	@ (8003db8 <UART_SetConfig+0x4e4>)
 8003cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2264      	movs	r2, #100	@ 0x64
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	1acb      	subs	r3, r1, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	@ 0x32
 8003ce8:	4a33      	ldr	r2, [pc, #204]	@ (8003db8 <UART_SetConfig+0x4e4>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf4:	441c      	add	r4, r3
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d14:	4641      	mov	r1, r8
 8003d16:	1851      	adds	r1, r2, r1
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	414b      	adcs	r3, r1
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	00cb      	lsls	r3, r1, #3
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d36:	4651      	mov	r1, sl
 8003d38:	00ca      	lsls	r2, r1, #3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4642      	mov	r2, r8
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d46:	464b      	mov	r3, r9
 8003d48:	460a      	mov	r2, r1
 8003d4a:	eb42 0303 	adc.w	r3, r2, r3
 8003d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d68:	4649      	mov	r1, r9
 8003d6a:	008b      	lsls	r3, r1, #2
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d72:	4641      	mov	r1, r8
 8003d74:	008a      	lsls	r2, r1, #2
 8003d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d7a:	f7fc faa1 	bl	80002c0 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <UART_SetConfig+0x4e4>)
 8003d84:	fba3 1302 	umull	r1, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	2164      	movs	r1, #100	@ 0x64
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	3332      	adds	r3, #50	@ 0x32
 8003d96:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <UART_SetConfig+0x4e4>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4422      	add	r2, r4
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003db2:	46bd      	mov	sp, r7
 8003db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <siprintf>:
 8003dbc:	b40e      	push	{r1, r2, r3}
 8003dbe:	b500      	push	{lr}
 8003dc0:	b09c      	sub	sp, #112	@ 0x70
 8003dc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003dc4:	9002      	str	r0, [sp, #8]
 8003dc6:	9006      	str	r0, [sp, #24]
 8003dc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dcc:	4809      	ldr	r0, [pc, #36]	@ (8003df4 <siprintf+0x38>)
 8003dce:	9107      	str	r1, [sp, #28]
 8003dd0:	9104      	str	r1, [sp, #16]
 8003dd2:	4909      	ldr	r1, [pc, #36]	@ (8003df8 <siprintf+0x3c>)
 8003dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	a902      	add	r1, sp, #8
 8003de0:	f000 f994 	bl	800410c <_svfiprintf_r>
 8003de4:	9b02      	ldr	r3, [sp, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	b01c      	add	sp, #112	@ 0x70
 8003dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df0:	b003      	add	sp, #12
 8003df2:	4770      	bx	lr
 8003df4:	2000000c 	.word	0x2000000c
 8003df8:	ffff0208 	.word	0xffff0208

08003dfc <memset>:
 8003dfc:	4402      	add	r2, r0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d100      	bne.n	8003e06 <memset+0xa>
 8003e04:	4770      	bx	lr
 8003e06:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0a:	e7f9      	b.n	8003e00 <memset+0x4>

08003e0c <__errno>:
 8003e0c:	4b01      	ldr	r3, [pc, #4]	@ (8003e14 <__errno+0x8>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	2000000c 	.word	0x2000000c

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e50 <__libc_init_array+0x38>)
 8003e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e54 <__libc_init_array+0x3c>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	2600      	movs	r6, #0
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	4d0b      	ldr	r5, [pc, #44]	@ (8003e58 <__libc_init_array+0x40>)
 8003e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e5c <__libc_init_array+0x44>)
 8003e2c:	f000 fc66 	bl	80046fc <_init>
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	2600      	movs	r6, #0
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08004790 	.word	0x08004790
 8003e54:	08004790 	.word	0x08004790
 8003e58:	08004790 	.word	0x08004790
 8003e5c:	08004794 	.word	0x08004794

08003e60 <__retarget_lock_acquire_recursive>:
 8003e60:	4770      	bx	lr

08003e62 <__retarget_lock_release_recursive>:
 8003e62:	4770      	bx	lr

08003e64 <_free_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4605      	mov	r5, r0
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	d041      	beq.n	8003ef0 <_free_r+0x8c>
 8003e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e70:	1f0c      	subs	r4, r1, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bfb8      	it	lt
 8003e76:	18e4      	addlt	r4, r4, r3
 8003e78:	f000 f8e0 	bl	800403c <__malloc_lock>
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <_free_r+0x90>)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	b933      	cbnz	r3, 8003e90 <_free_r+0x2c>
 8003e82:	6063      	str	r3, [r4, #4]
 8003e84:	6014      	str	r4, [r2, #0]
 8003e86:	4628      	mov	r0, r5
 8003e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e8c:	f000 b8dc 	b.w	8004048 <__malloc_unlock>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x42>
 8003e94:	6820      	ldr	r0, [r4, #0]
 8003e96:	1821      	adds	r1, r4, r0
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf01      	itttt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	1809      	addeq	r1, r1, r0
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	e7ed      	b.n	8003e82 <_free_r+0x1e>
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b10b      	cbz	r3, 8003eb0 <_free_r+0x4c>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d9fa      	bls.n	8003ea6 <_free_r+0x42>
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	1850      	adds	r0, r2, r1
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d10b      	bne.n	8003ed0 <_free_r+0x6c>
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	4401      	add	r1, r0
 8003ebc:	1850      	adds	r0, r2, r1
 8003ebe:	4283      	cmp	r3, r0
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	d1e0      	bne.n	8003e86 <_free_r+0x22>
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	6053      	str	r3, [r2, #4]
 8003eca:	4408      	add	r0, r1
 8003ecc:	6010      	str	r0, [r2, #0]
 8003ece:	e7da      	b.n	8003e86 <_free_r+0x22>
 8003ed0:	d902      	bls.n	8003ed8 <_free_r+0x74>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	e7d6      	b.n	8003e86 <_free_r+0x22>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	1821      	adds	r1, r4, r0
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf04      	itt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	bf04      	itt	eq
 8003ee8:	1809      	addeq	r1, r1, r0
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	6054      	str	r4, [r2, #4]
 8003eee:	e7ca      	b.n	8003e86 <_free_r+0x22>
 8003ef0:	bd38      	pop	{r3, r4, r5, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200002e0 	.word	0x200002e0

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0f      	ldr	r6, [pc, #60]	@ (8003f38 <sbrk_aligned+0x40>)
 8003efc:	460c      	mov	r4, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	4605      	mov	r5, r0
 8003f02:	b911      	cbnz	r1, 8003f0a <sbrk_aligned+0x12>
 8003f04:	f000 fba6 	bl	8004654 <_sbrk_r>
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 fba1 	bl	8004654 <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d103      	bne.n	8003f1e <sbrk_aligned+0x26>
 8003f16:	f04f 34ff 	mov.w	r4, #4294967295
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
 8003f1e:	1cc4      	adds	r4, r0, #3
 8003f20:	f024 0403 	bic.w	r4, r4, #3
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d0f8      	beq.n	8003f1a <sbrk_aligned+0x22>
 8003f28:	1a21      	subs	r1, r4, r0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 fb92 	bl	8004654 <_sbrk_r>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d1f2      	bne.n	8003f1a <sbrk_aligned+0x22>
 8003f34:	e7ef      	b.n	8003f16 <sbrk_aligned+0x1e>
 8003f36:	bf00      	nop
 8003f38:	200002dc 	.word	0x200002dc

08003f3c <_malloc_r>:
 8003f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f40:	1ccd      	adds	r5, r1, #3
 8003f42:	f025 0503 	bic.w	r5, r5, #3
 8003f46:	3508      	adds	r5, #8
 8003f48:	2d0c      	cmp	r5, #12
 8003f4a:	bf38      	it	cc
 8003f4c:	250c      	movcc	r5, #12
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	4606      	mov	r6, r0
 8003f52:	db01      	blt.n	8003f58 <_malloc_r+0x1c>
 8003f54:	42a9      	cmp	r1, r5
 8003f56:	d904      	bls.n	8003f62 <_malloc_r+0x26>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004038 <_malloc_r+0xfc>
 8003f66:	f000 f869 	bl	800403c <__malloc_lock>
 8003f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6e:	461c      	mov	r4, r3
 8003f70:	bb44      	cbnz	r4, 8003fc4 <_malloc_r+0x88>
 8003f72:	4629      	mov	r1, r5
 8003f74:	4630      	mov	r0, r6
 8003f76:	f7ff ffbf 	bl	8003ef8 <sbrk_aligned>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	d158      	bne.n	8004032 <_malloc_r+0xf6>
 8003f80:	f8d8 4000 	ldr.w	r4, [r8]
 8003f84:	4627      	mov	r7, r4
 8003f86:	2f00      	cmp	r7, #0
 8003f88:	d143      	bne.n	8004012 <_malloc_r+0xd6>
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	d04b      	beq.n	8004026 <_malloc_r+0xea>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	4639      	mov	r1, r7
 8003f92:	4630      	mov	r0, r6
 8003f94:	eb04 0903 	add.w	r9, r4, r3
 8003f98:	f000 fb5c 	bl	8004654 <_sbrk_r>
 8003f9c:	4581      	cmp	r9, r0
 8003f9e:	d142      	bne.n	8004026 <_malloc_r+0xea>
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	1a6d      	subs	r5, r5, r1
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff ffa6 	bl	8003ef8 <sbrk_aligned>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d03a      	beq.n	8004026 <_malloc_r+0xea>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	442b      	add	r3, r5
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	bb62      	cbnz	r2, 8004018 <_malloc_r+0xdc>
 8003fbe:	f8c8 7000 	str.w	r7, [r8]
 8003fc2:	e00f      	b.n	8003fe4 <_malloc_r+0xa8>
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	1b52      	subs	r2, r2, r5
 8003fc8:	d420      	bmi.n	800400c <_malloc_r+0xd0>
 8003fca:	2a0b      	cmp	r2, #11
 8003fcc:	d917      	bls.n	8003ffe <_malloc_r+0xc2>
 8003fce:	1961      	adds	r1, r4, r5
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	6025      	str	r5, [r4, #0]
 8003fd4:	bf18      	it	ne
 8003fd6:	6059      	strne	r1, [r3, #4]
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	bf08      	it	eq
 8003fdc:	f8c8 1000 	streq.w	r1, [r8]
 8003fe0:	5162      	str	r2, [r4, r5]
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f000 f82f 	bl	8004048 <__malloc_unlock>
 8003fea:	f104 000b 	add.w	r0, r4, #11
 8003fee:	1d23      	adds	r3, r4, #4
 8003ff0:	f020 0007 	bic.w	r0, r0, #7
 8003ff4:	1ac2      	subs	r2, r0, r3
 8003ff6:	bf1c      	itt	ne
 8003ff8:	1a1b      	subne	r3, r3, r0
 8003ffa:	50a3      	strne	r3, [r4, r2]
 8003ffc:	e7af      	b.n	8003f5e <_malloc_r+0x22>
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	42a3      	cmp	r3, r4
 8004002:	bf0c      	ite	eq
 8004004:	f8c8 2000 	streq.w	r2, [r8]
 8004008:	605a      	strne	r2, [r3, #4]
 800400a:	e7eb      	b.n	8003fe4 <_malloc_r+0xa8>
 800400c:	4623      	mov	r3, r4
 800400e:	6864      	ldr	r4, [r4, #4]
 8004010:	e7ae      	b.n	8003f70 <_malloc_r+0x34>
 8004012:	463c      	mov	r4, r7
 8004014:	687f      	ldr	r7, [r7, #4]
 8004016:	e7b6      	b.n	8003f86 <_malloc_r+0x4a>
 8004018:	461a      	mov	r2, r3
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	d1fb      	bne.n	8004018 <_malloc_r+0xdc>
 8004020:	2300      	movs	r3, #0
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e7de      	b.n	8003fe4 <_malloc_r+0xa8>
 8004026:	230c      	movs	r3, #12
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f80c 	bl	8004048 <__malloc_unlock>
 8004030:	e794      	b.n	8003f5c <_malloc_r+0x20>
 8004032:	6005      	str	r5, [r0, #0]
 8004034:	e7d6      	b.n	8003fe4 <_malloc_r+0xa8>
 8004036:	bf00      	nop
 8004038:	200002e0 	.word	0x200002e0

0800403c <__malloc_lock>:
 800403c:	4801      	ldr	r0, [pc, #4]	@ (8004044 <__malloc_lock+0x8>)
 800403e:	f7ff bf0f 	b.w	8003e60 <__retarget_lock_acquire_recursive>
 8004042:	bf00      	nop
 8004044:	200002d8 	.word	0x200002d8

08004048 <__malloc_unlock>:
 8004048:	4801      	ldr	r0, [pc, #4]	@ (8004050 <__malloc_unlock+0x8>)
 800404a:	f7ff bf0a 	b.w	8003e62 <__retarget_lock_release_recursive>
 800404e:	bf00      	nop
 8004050:	200002d8 	.word	0x200002d8

08004054 <__ssputs_r>:
 8004054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	688e      	ldr	r6, [r1, #8]
 800405a:	461f      	mov	r7, r3
 800405c:	42be      	cmp	r6, r7
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	4682      	mov	sl, r0
 8004062:	460c      	mov	r4, r1
 8004064:	4690      	mov	r8, r2
 8004066:	d82d      	bhi.n	80040c4 <__ssputs_r+0x70>
 8004068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800406c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004070:	d026      	beq.n	80040c0 <__ssputs_r+0x6c>
 8004072:	6965      	ldr	r5, [r4, #20]
 8004074:	6909      	ldr	r1, [r1, #16]
 8004076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800407a:	eba3 0901 	sub.w	r9, r3, r1
 800407e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004082:	1c7b      	adds	r3, r7, #1
 8004084:	444b      	add	r3, r9
 8004086:	106d      	asrs	r5, r5, #1
 8004088:	429d      	cmp	r5, r3
 800408a:	bf38      	it	cc
 800408c:	461d      	movcc	r5, r3
 800408e:	0553      	lsls	r3, r2, #21
 8004090:	d527      	bpl.n	80040e2 <__ssputs_r+0x8e>
 8004092:	4629      	mov	r1, r5
 8004094:	f7ff ff52 	bl	8003f3c <_malloc_r>
 8004098:	4606      	mov	r6, r0
 800409a:	b360      	cbz	r0, 80040f6 <__ssputs_r+0xa2>
 800409c:	6921      	ldr	r1, [r4, #16]
 800409e:	464a      	mov	r2, r9
 80040a0:	f000 fae8 	bl	8004674 <memcpy>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ae:	81a3      	strh	r3, [r4, #12]
 80040b0:	6126      	str	r6, [r4, #16]
 80040b2:	6165      	str	r5, [r4, #20]
 80040b4:	444e      	add	r6, r9
 80040b6:	eba5 0509 	sub.w	r5, r5, r9
 80040ba:	6026      	str	r6, [r4, #0]
 80040bc:	60a5      	str	r5, [r4, #8]
 80040be:	463e      	mov	r6, r7
 80040c0:	42be      	cmp	r6, r7
 80040c2:	d900      	bls.n	80040c6 <__ssputs_r+0x72>
 80040c4:	463e      	mov	r6, r7
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	4632      	mov	r2, r6
 80040ca:	4641      	mov	r1, r8
 80040cc:	f000 faa8 	bl	8004620 <memmove>
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	1b9b      	subs	r3, r3, r6
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	4433      	add	r3, r6
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	2000      	movs	r0, #0
 80040de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e2:	462a      	mov	r2, r5
 80040e4:	f000 fad4 	bl	8004690 <_realloc_r>
 80040e8:	4606      	mov	r6, r0
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d1e0      	bne.n	80040b0 <__ssputs_r+0x5c>
 80040ee:	6921      	ldr	r1, [r4, #16]
 80040f0:	4650      	mov	r0, sl
 80040f2:	f7ff feb7 	bl	8003e64 <_free_r>
 80040f6:	230c      	movs	r3, #12
 80040f8:	f8ca 3000 	str.w	r3, [sl]
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	e7e9      	b.n	80040de <__ssputs_r+0x8a>
	...

0800410c <_svfiprintf_r>:
 800410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	4698      	mov	r8, r3
 8004112:	898b      	ldrh	r3, [r1, #12]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	b09d      	sub	sp, #116	@ 0x74
 8004118:	4607      	mov	r7, r0
 800411a:	460d      	mov	r5, r1
 800411c:	4614      	mov	r4, r2
 800411e:	d510      	bpl.n	8004142 <_svfiprintf_r+0x36>
 8004120:	690b      	ldr	r3, [r1, #16]
 8004122:	b973      	cbnz	r3, 8004142 <_svfiprintf_r+0x36>
 8004124:	2140      	movs	r1, #64	@ 0x40
 8004126:	f7ff ff09 	bl	8003f3c <_malloc_r>
 800412a:	6028      	str	r0, [r5, #0]
 800412c:	6128      	str	r0, [r5, #16]
 800412e:	b930      	cbnz	r0, 800413e <_svfiprintf_r+0x32>
 8004130:	230c      	movs	r3, #12
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	b01d      	add	sp, #116	@ 0x74
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	2340      	movs	r3, #64	@ 0x40
 8004140:	616b      	str	r3, [r5, #20]
 8004142:	2300      	movs	r3, #0
 8004144:	9309      	str	r3, [sp, #36]	@ 0x24
 8004146:	2320      	movs	r3, #32
 8004148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800414c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004150:	2330      	movs	r3, #48	@ 0x30
 8004152:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042f0 <_svfiprintf_r+0x1e4>
 8004156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800415a:	f04f 0901 	mov.w	r9, #1
 800415e:	4623      	mov	r3, r4
 8004160:	469a      	mov	sl, r3
 8004162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004166:	b10a      	cbz	r2, 800416c <_svfiprintf_r+0x60>
 8004168:	2a25      	cmp	r2, #37	@ 0x25
 800416a:	d1f9      	bne.n	8004160 <_svfiprintf_r+0x54>
 800416c:	ebba 0b04 	subs.w	fp, sl, r4
 8004170:	d00b      	beq.n	800418a <_svfiprintf_r+0x7e>
 8004172:	465b      	mov	r3, fp
 8004174:	4622      	mov	r2, r4
 8004176:	4629      	mov	r1, r5
 8004178:	4638      	mov	r0, r7
 800417a:	f7ff ff6b 	bl	8004054 <__ssputs_r>
 800417e:	3001      	adds	r0, #1
 8004180:	f000 80a7 	beq.w	80042d2 <_svfiprintf_r+0x1c6>
 8004184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004186:	445a      	add	r2, fp
 8004188:	9209      	str	r2, [sp, #36]	@ 0x24
 800418a:	f89a 3000 	ldrb.w	r3, [sl]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 809f 	beq.w	80042d2 <_svfiprintf_r+0x1c6>
 8004194:	2300      	movs	r3, #0
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800419e:	f10a 0a01 	add.w	sl, sl, #1
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	9307      	str	r3, [sp, #28]
 80041a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80041ac:	4654      	mov	r4, sl
 80041ae:	2205      	movs	r2, #5
 80041b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b4:	484e      	ldr	r0, [pc, #312]	@ (80042f0 <_svfiprintf_r+0x1e4>)
 80041b6:	f7fc f833 	bl	8000220 <memchr>
 80041ba:	9a04      	ldr	r2, [sp, #16]
 80041bc:	b9d8      	cbnz	r0, 80041f6 <_svfiprintf_r+0xea>
 80041be:	06d0      	lsls	r0, r2, #27
 80041c0:	bf44      	itt	mi
 80041c2:	2320      	movmi	r3, #32
 80041c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041c8:	0711      	lsls	r1, r2, #28
 80041ca:	bf44      	itt	mi
 80041cc:	232b      	movmi	r3, #43	@ 0x2b
 80041ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041d2:	f89a 3000 	ldrb.w	r3, [sl]
 80041d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d8:	d015      	beq.n	8004206 <_svfiprintf_r+0xfa>
 80041da:	9a07      	ldr	r2, [sp, #28]
 80041dc:	4654      	mov	r4, sl
 80041de:	2000      	movs	r0, #0
 80041e0:	f04f 0c0a 	mov.w	ip, #10
 80041e4:	4621      	mov	r1, r4
 80041e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041ea:	3b30      	subs	r3, #48	@ 0x30
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d94b      	bls.n	8004288 <_svfiprintf_r+0x17c>
 80041f0:	b1b0      	cbz	r0, 8004220 <_svfiprintf_r+0x114>
 80041f2:	9207      	str	r2, [sp, #28]
 80041f4:	e014      	b.n	8004220 <_svfiprintf_r+0x114>
 80041f6:	eba0 0308 	sub.w	r3, r0, r8
 80041fa:	fa09 f303 	lsl.w	r3, r9, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	46a2      	mov	sl, r4
 8004204:	e7d2      	b.n	80041ac <_svfiprintf_r+0xa0>
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	1d19      	adds	r1, r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	9103      	str	r1, [sp, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	bfbb      	ittet	lt
 8004212:	425b      	neglt	r3, r3
 8004214:	f042 0202 	orrlt.w	r2, r2, #2
 8004218:	9307      	strge	r3, [sp, #28]
 800421a:	9307      	strlt	r3, [sp, #28]
 800421c:	bfb8      	it	lt
 800421e:	9204      	strlt	r2, [sp, #16]
 8004220:	7823      	ldrb	r3, [r4, #0]
 8004222:	2b2e      	cmp	r3, #46	@ 0x2e
 8004224:	d10a      	bne.n	800423c <_svfiprintf_r+0x130>
 8004226:	7863      	ldrb	r3, [r4, #1]
 8004228:	2b2a      	cmp	r3, #42	@ 0x2a
 800422a:	d132      	bne.n	8004292 <_svfiprintf_r+0x186>
 800422c:	9b03      	ldr	r3, [sp, #12]
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	9203      	str	r2, [sp, #12]
 8004234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004238:	3402      	adds	r4, #2
 800423a:	9305      	str	r3, [sp, #20]
 800423c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004300 <_svfiprintf_r+0x1f4>
 8004240:	7821      	ldrb	r1, [r4, #0]
 8004242:	2203      	movs	r2, #3
 8004244:	4650      	mov	r0, sl
 8004246:	f7fb ffeb 	bl	8000220 <memchr>
 800424a:	b138      	cbz	r0, 800425c <_svfiprintf_r+0x150>
 800424c:	9b04      	ldr	r3, [sp, #16]
 800424e:	eba0 000a 	sub.w	r0, r0, sl
 8004252:	2240      	movs	r2, #64	@ 0x40
 8004254:	4082      	lsls	r2, r0
 8004256:	4313      	orrs	r3, r2
 8004258:	3401      	adds	r4, #1
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004260:	4824      	ldr	r0, [pc, #144]	@ (80042f4 <_svfiprintf_r+0x1e8>)
 8004262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004266:	2206      	movs	r2, #6
 8004268:	f7fb ffda 	bl	8000220 <memchr>
 800426c:	2800      	cmp	r0, #0
 800426e:	d036      	beq.n	80042de <_svfiprintf_r+0x1d2>
 8004270:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <_svfiprintf_r+0x1ec>)
 8004272:	bb1b      	cbnz	r3, 80042bc <_svfiprintf_r+0x1b0>
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	3307      	adds	r3, #7
 8004278:	f023 0307 	bic.w	r3, r3, #7
 800427c:	3308      	adds	r3, #8
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004282:	4433      	add	r3, r6
 8004284:	9309      	str	r3, [sp, #36]	@ 0x24
 8004286:	e76a      	b.n	800415e <_svfiprintf_r+0x52>
 8004288:	fb0c 3202 	mla	r2, ip, r2, r3
 800428c:	460c      	mov	r4, r1
 800428e:	2001      	movs	r0, #1
 8004290:	e7a8      	b.n	80041e4 <_svfiprintf_r+0xd8>
 8004292:	2300      	movs	r3, #0
 8004294:	3401      	adds	r4, #1
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	4619      	mov	r1, r3
 800429a:	f04f 0c0a 	mov.w	ip, #10
 800429e:	4620      	mov	r0, r4
 80042a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042a4:	3a30      	subs	r2, #48	@ 0x30
 80042a6:	2a09      	cmp	r2, #9
 80042a8:	d903      	bls.n	80042b2 <_svfiprintf_r+0x1a6>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0c6      	beq.n	800423c <_svfiprintf_r+0x130>
 80042ae:	9105      	str	r1, [sp, #20]
 80042b0:	e7c4      	b.n	800423c <_svfiprintf_r+0x130>
 80042b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042b6:	4604      	mov	r4, r0
 80042b8:	2301      	movs	r3, #1
 80042ba:	e7f0      	b.n	800429e <_svfiprintf_r+0x192>
 80042bc:	ab03      	add	r3, sp, #12
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	462a      	mov	r2, r5
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <_svfiprintf_r+0x1f0>)
 80042c4:	a904      	add	r1, sp, #16
 80042c6:	4638      	mov	r0, r7
 80042c8:	f3af 8000 	nop.w
 80042cc:	1c42      	adds	r2, r0, #1
 80042ce:	4606      	mov	r6, r0
 80042d0:	d1d6      	bne.n	8004280 <_svfiprintf_r+0x174>
 80042d2:	89ab      	ldrh	r3, [r5, #12]
 80042d4:	065b      	lsls	r3, r3, #25
 80042d6:	f53f af2d 	bmi.w	8004134 <_svfiprintf_r+0x28>
 80042da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042dc:	e72c      	b.n	8004138 <_svfiprintf_r+0x2c>
 80042de:	ab03      	add	r3, sp, #12
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	462a      	mov	r2, r5
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <_svfiprintf_r+0x1f0>)
 80042e6:	a904      	add	r1, sp, #16
 80042e8:	4638      	mov	r0, r7
 80042ea:	f000 f879 	bl	80043e0 <_printf_i>
 80042ee:	e7ed      	b.n	80042cc <_svfiprintf_r+0x1c0>
 80042f0:	08004754 	.word	0x08004754
 80042f4:	0800475e 	.word	0x0800475e
 80042f8:	00000000 	.word	0x00000000
 80042fc:	08004055 	.word	0x08004055
 8004300:	0800475a 	.word	0x0800475a

08004304 <_printf_common>:
 8004304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	4616      	mov	r6, r2
 800430a:	4698      	mov	r8, r3
 800430c:	688a      	ldr	r2, [r1, #8]
 800430e:	690b      	ldr	r3, [r1, #16]
 8004310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004314:	4293      	cmp	r3, r2
 8004316:	bfb8      	it	lt
 8004318:	4613      	movlt	r3, r2
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004320:	4607      	mov	r7, r0
 8004322:	460c      	mov	r4, r1
 8004324:	b10a      	cbz	r2, 800432a <_printf_common+0x26>
 8004326:	3301      	adds	r3, #1
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	0699      	lsls	r1, r3, #26
 800432e:	bf42      	ittt	mi
 8004330:	6833      	ldrmi	r3, [r6, #0]
 8004332:	3302      	addmi	r3, #2
 8004334:	6033      	strmi	r3, [r6, #0]
 8004336:	6825      	ldr	r5, [r4, #0]
 8004338:	f015 0506 	ands.w	r5, r5, #6
 800433c:	d106      	bne.n	800434c <_printf_common+0x48>
 800433e:	f104 0a19 	add.w	sl, r4, #25
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	6832      	ldr	r2, [r6, #0]
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	42ab      	cmp	r3, r5
 800434a:	dc26      	bgt.n	800439a <_printf_common+0x96>
 800434c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	3b00      	subs	r3, #0
 8004354:	bf18      	it	ne
 8004356:	2301      	movne	r3, #1
 8004358:	0692      	lsls	r2, r2, #26
 800435a:	d42b      	bmi.n	80043b4 <_printf_common+0xb0>
 800435c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004360:	4641      	mov	r1, r8
 8004362:	4638      	mov	r0, r7
 8004364:	47c8      	blx	r9
 8004366:	3001      	adds	r0, #1
 8004368:	d01e      	beq.n	80043a8 <_printf_common+0xa4>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	f003 0306 	and.w	r3, r3, #6
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf02      	ittt	eq
 8004376:	68e5      	ldreq	r5, [r4, #12]
 8004378:	6833      	ldreq	r3, [r6, #0]
 800437a:	1aed      	subeq	r5, r5, r3
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	bf0c      	ite	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	2500      	movne	r5, #0
 8004386:	4293      	cmp	r3, r2
 8004388:	bfc4      	itt	gt
 800438a:	1a9b      	subgt	r3, r3, r2
 800438c:	18ed      	addgt	r5, r5, r3
 800438e:	2600      	movs	r6, #0
 8004390:	341a      	adds	r4, #26
 8004392:	42b5      	cmp	r5, r6
 8004394:	d11a      	bne.n	80043cc <_printf_common+0xc8>
 8004396:	2000      	movs	r0, #0
 8004398:	e008      	b.n	80043ac <_printf_common+0xa8>
 800439a:	2301      	movs	r3, #1
 800439c:	4652      	mov	r2, sl
 800439e:	4641      	mov	r1, r8
 80043a0:	4638      	mov	r0, r7
 80043a2:	47c8      	blx	r9
 80043a4:	3001      	adds	r0, #1
 80043a6:	d103      	bne.n	80043b0 <_printf_common+0xac>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b0:	3501      	adds	r5, #1
 80043b2:	e7c6      	b.n	8004342 <_printf_common+0x3e>
 80043b4:	18e1      	adds	r1, r4, r3
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	2030      	movs	r0, #48	@ 0x30
 80043ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043be:	4422      	add	r2, r4
 80043c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043c8:	3302      	adds	r3, #2
 80043ca:	e7c7      	b.n	800435c <_printf_common+0x58>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4622      	mov	r2, r4
 80043d0:	4641      	mov	r1, r8
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c8      	blx	r9
 80043d6:	3001      	adds	r0, #1
 80043d8:	d0e6      	beq.n	80043a8 <_printf_common+0xa4>
 80043da:	3601      	adds	r6, #1
 80043dc:	e7d9      	b.n	8004392 <_printf_common+0x8e>
	...

080043e0 <_printf_i>:
 80043e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	7e0f      	ldrb	r7, [r1, #24]
 80043e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043e8:	2f78      	cmp	r7, #120	@ 0x78
 80043ea:	4691      	mov	r9, r2
 80043ec:	4680      	mov	r8, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	469a      	mov	sl, r3
 80043f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043f6:	d807      	bhi.n	8004408 <_printf_i+0x28>
 80043f8:	2f62      	cmp	r7, #98	@ 0x62
 80043fa:	d80a      	bhi.n	8004412 <_printf_i+0x32>
 80043fc:	2f00      	cmp	r7, #0
 80043fe:	f000 80d2 	beq.w	80045a6 <_printf_i+0x1c6>
 8004402:	2f58      	cmp	r7, #88	@ 0x58
 8004404:	f000 80b9 	beq.w	800457a <_printf_i+0x19a>
 8004408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800440c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004410:	e03a      	b.n	8004488 <_printf_i+0xa8>
 8004412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004416:	2b15      	cmp	r3, #21
 8004418:	d8f6      	bhi.n	8004408 <_printf_i+0x28>
 800441a:	a101      	add	r1, pc, #4	@ (adr r1, 8004420 <_printf_i+0x40>)
 800441c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004420:	08004479 	.word	0x08004479
 8004424:	0800448d 	.word	0x0800448d
 8004428:	08004409 	.word	0x08004409
 800442c:	08004409 	.word	0x08004409
 8004430:	08004409 	.word	0x08004409
 8004434:	08004409 	.word	0x08004409
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004409 	.word	0x08004409
 8004440:	08004409 	.word	0x08004409
 8004444:	08004409 	.word	0x08004409
 8004448:	08004409 	.word	0x08004409
 800444c:	0800458d 	.word	0x0800458d
 8004450:	080044b7 	.word	0x080044b7
 8004454:	08004547 	.word	0x08004547
 8004458:	08004409 	.word	0x08004409
 800445c:	08004409 	.word	0x08004409
 8004460:	080045af 	.word	0x080045af
 8004464:	08004409 	.word	0x08004409
 8004468:	080044b7 	.word	0x080044b7
 800446c:	08004409 	.word	0x08004409
 8004470:	08004409 	.word	0x08004409
 8004474:	0800454f 	.word	0x0800454f
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6032      	str	r2, [r6, #0]
 8004480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004488:	2301      	movs	r3, #1
 800448a:	e09d      	b.n	80045c8 <_printf_i+0x1e8>
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	6820      	ldr	r0, [r4, #0]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	6031      	str	r1, [r6, #0]
 8004494:	0606      	lsls	r6, r0, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xbc>
 8004498:	681d      	ldr	r5, [r3, #0]
 800449a:	e003      	b.n	80044a4 <_printf_i+0xc4>
 800449c:	0645      	lsls	r5, r0, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xb8>
 80044a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	da03      	bge.n	80044b0 <_printf_i+0xd0>
 80044a8:	232d      	movs	r3, #45	@ 0x2d
 80044aa:	426d      	negs	r5, r5
 80044ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b0:	4859      	ldr	r0, [pc, #356]	@ (8004618 <_printf_i+0x238>)
 80044b2:	230a      	movs	r3, #10
 80044b4:	e011      	b.n	80044da <_printf_i+0xfa>
 80044b6:	6821      	ldr	r1, [r4, #0]
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	0608      	lsls	r0, r1, #24
 80044bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80044c0:	d402      	bmi.n	80044c8 <_printf_i+0xe8>
 80044c2:	0649      	lsls	r1, r1, #25
 80044c4:	bf48      	it	mi
 80044c6:	b2ad      	uxthmi	r5, r5
 80044c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ca:	4853      	ldr	r0, [pc, #332]	@ (8004618 <_printf_i+0x238>)
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	bf14      	ite	ne
 80044d0:	230a      	movne	r3, #10
 80044d2:	2308      	moveq	r3, #8
 80044d4:	2100      	movs	r1, #0
 80044d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044da:	6866      	ldr	r6, [r4, #4]
 80044dc:	60a6      	str	r6, [r4, #8]
 80044de:	2e00      	cmp	r6, #0
 80044e0:	bfa2      	ittt	ge
 80044e2:	6821      	ldrge	r1, [r4, #0]
 80044e4:	f021 0104 	bicge.w	r1, r1, #4
 80044e8:	6021      	strge	r1, [r4, #0]
 80044ea:	b90d      	cbnz	r5, 80044f0 <_printf_i+0x110>
 80044ec:	2e00      	cmp	r6, #0
 80044ee:	d04b      	beq.n	8004588 <_printf_i+0x1a8>
 80044f0:	4616      	mov	r6, r2
 80044f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80044f6:	fb03 5711 	mls	r7, r3, r1, r5
 80044fa:	5dc7      	ldrb	r7, [r0, r7]
 80044fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004500:	462f      	mov	r7, r5
 8004502:	42bb      	cmp	r3, r7
 8004504:	460d      	mov	r5, r1
 8004506:	d9f4      	bls.n	80044f2 <_printf_i+0x112>
 8004508:	2b08      	cmp	r3, #8
 800450a:	d10b      	bne.n	8004524 <_printf_i+0x144>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	07df      	lsls	r7, r3, #31
 8004510:	d508      	bpl.n	8004524 <_printf_i+0x144>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	6861      	ldr	r1, [r4, #4]
 8004516:	4299      	cmp	r1, r3
 8004518:	bfde      	ittt	le
 800451a:	2330      	movle	r3, #48	@ 0x30
 800451c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004524:	1b92      	subs	r2, r2, r6
 8004526:	6122      	str	r2, [r4, #16]
 8004528:	f8cd a000 	str.w	sl, [sp]
 800452c:	464b      	mov	r3, r9
 800452e:	aa03      	add	r2, sp, #12
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff fee6 	bl	8004304 <_printf_common>
 8004538:	3001      	adds	r0, #1
 800453a:	d14a      	bne.n	80045d2 <_printf_i+0x1f2>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b004      	add	sp, #16
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f043 0320 	orr.w	r3, r3, #32
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	4833      	ldr	r0, [pc, #204]	@ (800461c <_printf_i+0x23c>)
 8004550:	2778      	movs	r7, #120	@ 0x78
 8004552:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	6831      	ldr	r1, [r6, #0]
 800455a:	061f      	lsls	r7, r3, #24
 800455c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0x188>
 8004562:	065f      	lsls	r7, r3, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	6031      	str	r1, [r6, #0]
 800456a:	07d9      	lsls	r1, r3, #31
 800456c:	bf44      	itt	mi
 800456e:	f043 0320 	orrmi.w	r3, r3, #32
 8004572:	6023      	strmi	r3, [r4, #0]
 8004574:	b11d      	cbz	r5, 800457e <_printf_i+0x19e>
 8004576:	2310      	movs	r3, #16
 8004578:	e7ac      	b.n	80044d4 <_printf_i+0xf4>
 800457a:	4827      	ldr	r0, [pc, #156]	@ (8004618 <_printf_i+0x238>)
 800457c:	e7e9      	b.n	8004552 <_printf_i+0x172>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f023 0320 	bic.w	r3, r3, #32
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	e7f6      	b.n	8004576 <_printf_i+0x196>
 8004588:	4616      	mov	r6, r2
 800458a:	e7bd      	b.n	8004508 <_printf_i+0x128>
 800458c:	6833      	ldr	r3, [r6, #0]
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	6961      	ldr	r1, [r4, #20]
 8004592:	1d18      	adds	r0, r3, #4
 8004594:	6030      	str	r0, [r6, #0]
 8004596:	062e      	lsls	r6, r5, #24
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0x1c0>
 800459c:	6019      	str	r1, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0x1c6>
 80045a0:	0668      	lsls	r0, r5, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0x1bc>
 80045a4:	8019      	strh	r1, [r3, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	4616      	mov	r6, r2
 80045ac:	e7bc      	b.n	8004528 <_printf_i+0x148>
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	1d1a      	adds	r2, r3, #4
 80045b2:	6032      	str	r2, [r6, #0]
 80045b4:	681e      	ldr	r6, [r3, #0]
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	2100      	movs	r1, #0
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7fb fe30 	bl	8000220 <memchr>
 80045c0:	b108      	cbz	r0, 80045c6 <_printf_i+0x1e6>
 80045c2:	1b80      	subs	r0, r0, r6
 80045c4:	6060      	str	r0, [r4, #4]
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	6123      	str	r3, [r4, #16]
 80045ca:	2300      	movs	r3, #0
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d0:	e7aa      	b.n	8004528 <_printf_i+0x148>
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	4632      	mov	r2, r6
 80045d6:	4649      	mov	r1, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	47d0      	blx	sl
 80045dc:	3001      	adds	r0, #1
 80045de:	d0ad      	beq.n	800453c <_printf_i+0x15c>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	079b      	lsls	r3, r3, #30
 80045e4:	d413      	bmi.n	800460e <_printf_i+0x22e>
 80045e6:	68e0      	ldr	r0, [r4, #12]
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	4298      	cmp	r0, r3
 80045ec:	bfb8      	it	lt
 80045ee:	4618      	movlt	r0, r3
 80045f0:	e7a6      	b.n	8004540 <_printf_i+0x160>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4632      	mov	r2, r6
 80045f6:	4649      	mov	r1, r9
 80045f8:	4640      	mov	r0, r8
 80045fa:	47d0      	blx	sl
 80045fc:	3001      	adds	r0, #1
 80045fe:	d09d      	beq.n	800453c <_printf_i+0x15c>
 8004600:	3501      	adds	r5, #1
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	9903      	ldr	r1, [sp, #12]
 8004606:	1a5b      	subs	r3, r3, r1
 8004608:	42ab      	cmp	r3, r5
 800460a:	dcf2      	bgt.n	80045f2 <_printf_i+0x212>
 800460c:	e7eb      	b.n	80045e6 <_printf_i+0x206>
 800460e:	2500      	movs	r5, #0
 8004610:	f104 0619 	add.w	r6, r4, #25
 8004614:	e7f5      	b.n	8004602 <_printf_i+0x222>
 8004616:	bf00      	nop
 8004618:	08004765 	.word	0x08004765
 800461c:	08004776 	.word	0x08004776

08004620 <memmove>:
 8004620:	4288      	cmp	r0, r1
 8004622:	b510      	push	{r4, lr}
 8004624:	eb01 0402 	add.w	r4, r1, r2
 8004628:	d902      	bls.n	8004630 <memmove+0x10>
 800462a:	4284      	cmp	r4, r0
 800462c:	4623      	mov	r3, r4
 800462e:	d807      	bhi.n	8004640 <memmove+0x20>
 8004630:	1e43      	subs	r3, r0, #1
 8004632:	42a1      	cmp	r1, r4
 8004634:	d008      	beq.n	8004648 <memmove+0x28>
 8004636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800463a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800463e:	e7f8      	b.n	8004632 <memmove+0x12>
 8004640:	4402      	add	r2, r0
 8004642:	4601      	mov	r1, r0
 8004644:	428a      	cmp	r2, r1
 8004646:	d100      	bne.n	800464a <memmove+0x2a>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800464e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004652:	e7f7      	b.n	8004644 <memmove+0x24>

08004654 <_sbrk_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d06      	ldr	r5, [pc, #24]	@ (8004670 <_sbrk_r+0x1c>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fc fb5c 	bl	8000d1c <_sbrk>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_sbrk_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_sbrk_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	200002d4 	.word	0x200002d4

08004674 <memcpy>:
 8004674:	440a      	add	r2, r1
 8004676:	4291      	cmp	r1, r2
 8004678:	f100 33ff 	add.w	r3, r0, #4294967295
 800467c:	d100      	bne.n	8004680 <memcpy+0xc>
 800467e:	4770      	bx	lr
 8004680:	b510      	push	{r4, lr}
 8004682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468a:	4291      	cmp	r1, r2
 800468c:	d1f9      	bne.n	8004682 <memcpy+0xe>
 800468e:	bd10      	pop	{r4, pc}

08004690 <_realloc_r>:
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004694:	4680      	mov	r8, r0
 8004696:	4615      	mov	r5, r2
 8004698:	460c      	mov	r4, r1
 800469a:	b921      	cbnz	r1, 80046a6 <_realloc_r+0x16>
 800469c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	4611      	mov	r1, r2
 80046a2:	f7ff bc4b 	b.w	8003f3c <_malloc_r>
 80046a6:	b92a      	cbnz	r2, 80046b4 <_realloc_r+0x24>
 80046a8:	f7ff fbdc 	bl	8003e64 <_free_r>
 80046ac:	2400      	movs	r4, #0
 80046ae:	4620      	mov	r0, r4
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	f000 f81a 	bl	80046ec <_malloc_usable_size_r>
 80046b8:	4285      	cmp	r5, r0
 80046ba:	4606      	mov	r6, r0
 80046bc:	d802      	bhi.n	80046c4 <_realloc_r+0x34>
 80046be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046c2:	d8f4      	bhi.n	80046ae <_realloc_r+0x1e>
 80046c4:	4629      	mov	r1, r5
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7ff fc38 	bl	8003f3c <_malloc_r>
 80046cc:	4607      	mov	r7, r0
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d0ec      	beq.n	80046ac <_realloc_r+0x1c>
 80046d2:	42b5      	cmp	r5, r6
 80046d4:	462a      	mov	r2, r5
 80046d6:	4621      	mov	r1, r4
 80046d8:	bf28      	it	cs
 80046da:	4632      	movcs	r2, r6
 80046dc:	f7ff ffca 	bl	8004674 <memcpy>
 80046e0:	4621      	mov	r1, r4
 80046e2:	4640      	mov	r0, r8
 80046e4:	f7ff fbbe 	bl	8003e64 <_free_r>
 80046e8:	463c      	mov	r4, r7
 80046ea:	e7e0      	b.n	80046ae <_realloc_r+0x1e>

080046ec <_malloc_usable_size_r>:
 80046ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f0:	1f18      	subs	r0, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfbc      	itt	lt
 80046f6:	580b      	ldrlt	r3, [r1, r0]
 80046f8:	18c0      	addlt	r0, r0, r3
 80046fa:	4770      	bx	lr

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
